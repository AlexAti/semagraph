{
"version":3,
"file":"module$node_modules$$zxing$library$cjs$core$common$GlobalHistogramBinarizer.js",
"lineCount":9,
"mappings":"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",
"sources":["node_modules/@zxing/library/cjs/core/common/GlobalHistogramBinarizer.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$zxing$library$cjs$core$common$GlobalHistogramBinarizer\"] = function(global,require,module,exports) {\n\"use strict\";\n/*\n * Copyright 2009 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/*namespace com.google.zxing.common {*/\nvar Binarizer_1 = require(\"../Binarizer\");\nvar BitArray_1 = require(\"./BitArray\");\nvar BitMatrix_1 = require(\"./BitMatrix\");\nvar NotFoundException_1 = require(\"../NotFoundException\");\n/**\n * This Binarizer implementation uses the old ZXing global histogram approach. It is suitable\n * for low-end mobile devices which don't have enough CPU or memory to use a local thresholding\n * algorithm. However, because it picks a global black point, it cannot handle difficult shadows\n * and gradients.\n *\n * Faster mobile devices and all desktop applications should probably use HybridBinarizer instead.\n *\n * @author dswitkin@google.com (Daniel Switkin)\n * @author Sean Owen\n */\nvar GlobalHistogramBinarizer = /** @class */ (function (_super) {\n    __extends(GlobalHistogramBinarizer, _super);\n    function GlobalHistogramBinarizer(source) {\n        var _this = _super.call(this, source) || this;\n        _this.luminances = GlobalHistogramBinarizer.EMPTY;\n        _this.buckets = new Int32Array(GlobalHistogramBinarizer.LUMINANCE_BUCKETS);\n        return _this;\n    }\n    // Applies simple sharpening to the row data to improve performance of the 1D Readers.\n    /*@Override*/\n    GlobalHistogramBinarizer.prototype.getBlackRow = function (y /*int*/, row) {\n        var source = this.getLuminanceSource();\n        var width = source.getWidth();\n        if (row === undefined || row === null || row.getSize() < width) {\n            row = new BitArray_1.default(width);\n        }\n        else {\n            row.clear();\n        }\n        this.initArrays(width);\n        var localLuminances = source.getRow(y, this.luminances);\n        var localBuckets = this.buckets;\n        for (var x = 0; x < width; x++) {\n            localBuckets[(localLuminances[x] & 0xff) >> GlobalHistogramBinarizer.LUMINANCE_SHIFT]++;\n        }\n        var blackPoint = GlobalHistogramBinarizer.estimateBlackPoint(localBuckets);\n        if (width < 3) {\n            // Special case for very small images\n            for (var x = 0; x < width; x++) {\n                if ((localLuminances[x] & 0xff) < blackPoint) {\n                    row.set(x);\n                }\n            }\n        }\n        else {\n            var left = localLuminances[0] & 0xff;\n            var center = localLuminances[1] & 0xff;\n            for (var x = 1; x < width - 1; x++) {\n                var right = localLuminances[x + 1] & 0xff;\n                // A simple -1 4 -1 box filter with a weight of 2.\n                if (((center * 4) - left - right) / 2 < blackPoint) {\n                    row.set(x);\n                }\n                left = center;\n                center = right;\n            }\n        }\n        return row;\n    };\n    // Does not sharpen the data, as this call is intended to only be used by 2D Readers.\n    /*@Override*/\n    GlobalHistogramBinarizer.prototype.getBlackMatrix = function () {\n        var source = this.getLuminanceSource();\n        var width = source.getWidth();\n        var height = source.getHeight();\n        var matrix = new BitMatrix_1.default(width, height);\n        // Quickly calculates the histogram by sampling four rows from the image. This proved to be\n        // more robust on the blackbox tests than sampling a diagonal as we used to do.\n        this.initArrays(width);\n        var localBuckets = this.buckets;\n        for (var y = 1; y < 5; y++) {\n            var row = Math.floor((height * y) / 5);\n            var localLuminances_1 = source.getRow(row, this.luminances);\n            var right = Math.floor((width * 4) / 5);\n            for (var x = Math.floor(width / 5); x < right; x++) {\n                var pixel = localLuminances_1[x] & 0xff;\n                localBuckets[pixel >> GlobalHistogramBinarizer.LUMINANCE_SHIFT]++;\n            }\n        }\n        var blackPoint = GlobalHistogramBinarizer.estimateBlackPoint(localBuckets);\n        // We delay reading the entire image luminance until the black point estimation succeeds.\n        // Although we end up reading four rows twice, it is consistent with our motto of\n        // \"fail quickly\" which is necessary for continuous scanning.\n        var localLuminances = source.getMatrix();\n        for (var y = 0; y < height; y++) {\n            var offset = y * width;\n            for (var x = 0; x < width; x++) {\n                var pixel = localLuminances[offset + x] & 0xff;\n                if (pixel < blackPoint) {\n                    matrix.set(x, y);\n                }\n            }\n        }\n        return matrix;\n    };\n    /*@Override*/\n    GlobalHistogramBinarizer.prototype.createBinarizer = function (source) {\n        return new GlobalHistogramBinarizer(source);\n    };\n    GlobalHistogramBinarizer.prototype.initArrays = function (luminanceSize /*int*/) {\n        if (this.luminances.length < luminanceSize) {\n            this.luminances = new Uint8ClampedArray(luminanceSize);\n        }\n        var buckets = this.buckets;\n        for (var x = 0; x < GlobalHistogramBinarizer.LUMINANCE_BUCKETS; x++) {\n            buckets[x] = 0;\n        }\n    };\n    GlobalHistogramBinarizer.estimateBlackPoint = function (buckets) {\n        // Find the tallest peak in the histogram.\n        var numBuckets = buckets.length;\n        var maxBucketCount = 0;\n        var firstPeak = 0;\n        var firstPeakSize = 0;\n        for (var x = 0; x < numBuckets; x++) {\n            if (buckets[x] > firstPeakSize) {\n                firstPeak = x;\n                firstPeakSize = buckets[x];\n            }\n            if (buckets[x] > maxBucketCount) {\n                maxBucketCount = buckets[x];\n            }\n        }\n        // Find the second-tallest peak which is somewhat far from the tallest peak.\n        var secondPeak = 0;\n        var secondPeakScore = 0;\n        for (var x = 0; x < numBuckets; x++) {\n            var distanceToBiggest = x - firstPeak;\n            // Encourage more distant second peaks by multiplying by square of distance.\n            var score = buckets[x] * distanceToBiggest * distanceToBiggest;\n            if (score > secondPeakScore) {\n                secondPeak = x;\n                secondPeakScore = score;\n            }\n        }\n        // Make sure firstPeak corresponds to the black peak.\n        if (firstPeak > secondPeak) {\n            var temp = firstPeak;\n            firstPeak = secondPeak;\n            secondPeak = temp;\n        }\n        // If there is too little contrast in the image to pick a meaningful black point, throw rather\n        // than waste time trying to decode the image, and risk false positives.\n        if (secondPeak - firstPeak <= numBuckets / 16) {\n            throw new NotFoundException_1.default();\n        }\n        // Find a valley between them that is low and closer to the white peak.\n        var bestValley = secondPeak - 1;\n        var bestValleyScore = -1;\n        for (var x = secondPeak - 1; x > firstPeak; x--) {\n            var fromFirst = x - firstPeak;\n            var score = fromFirst * fromFirst * (secondPeak - x) * (maxBucketCount - buckets[x]);\n            if (score > bestValleyScore) {\n                bestValley = x;\n                bestValleyScore = score;\n            }\n        }\n        return bestValley << GlobalHistogramBinarizer.LUMINANCE_SHIFT;\n    };\n    GlobalHistogramBinarizer.LUMINANCE_BITS = 5;\n    GlobalHistogramBinarizer.LUMINANCE_SHIFT = 8 - GlobalHistogramBinarizer.LUMINANCE_BITS;\n    GlobalHistogramBinarizer.LUMINANCE_BUCKETS = 1 << GlobalHistogramBinarizer.LUMINANCE_BITS;\n    GlobalHistogramBinarizer.EMPTY = Uint8ClampedArray.from([0]);\n    return GlobalHistogramBinarizer;\n}(Binarizer_1.default));\nexports.default = GlobalHistogramBinarizer;\n//# sourceMappingURL=GlobalHistogramBinarizer.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","defineProperty","value","Binarizer_1","BitArray_1","BitMatrix_1","NotFoundException_1","GlobalHistogramBinarizer","_super","source","_this","call","luminances","EMPTY","buckets","Int32Array","LUMINANCE_BUCKETS","getBlackRow","GlobalHistogramBinarizer.prototype.getBlackRow","y","row","getLuminanceSource","width","getWidth","undefined","getSize","default","clear","initArrays","localLuminances","getRow","localBuckets","x","LUMINANCE_SHIFT","blackPoint","estimateBlackPoint","set","left","center","right","getBlackMatrix","GlobalHistogramBinarizer.prototype.getBlackMatrix","height","getHeight","matrix","localLuminances_1","Math","floor","pixel","getMatrix","offset","createBinarizer","GlobalHistogramBinarizer.prototype.createBinarizer","GlobalHistogramBinarizer.prototype.initArrays","luminanceSize","length","Uint8ClampedArray","GlobalHistogramBinarizer.estimateBlackPoint","numBuckets","maxBucketCount","firstPeak","firstPeakSize","secondPeakScore","secondPeak","distanceToBiggest","score","temp","bestValley","bestValleyScore","fromFirst","LUMINANCE_BITS","from"]
}
