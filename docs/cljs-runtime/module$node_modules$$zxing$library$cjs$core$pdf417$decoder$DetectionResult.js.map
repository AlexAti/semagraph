{
"version":3,
"file":"module$node_modules$$zxing$library$cjs$core$pdf417$decoder$DetectionResult.js",
"lineCount":17,
"mappings":"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",
"sources":["node_modules/@zxing/library/cjs/core/pdf417/decoder/DetectionResult.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$zxing$library$cjs$core$pdf417$decoder$DetectionResult\"] = function(global,require,module,exports) {\n\"use strict\";\n/*\n * Copyright 2013 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// package com.google.zxing.pdf417.decoder;\n// import com.google.zxing.pdf417.PDF417Common;\nvar PDF417Common_1 = require(\"../PDF417Common\");\nvar Formatter_1 = require(\"../../util/Formatter\");\n/**\n * @author Guenther Grau\n */\nvar DetectionResult = /** @class */ (function () {\n    function DetectionResult(barcodeMetadata, boundingBox) {\n        /*final*/ this.ADJUST_ROW_NUMBER_SKIP = 2;\n        this.barcodeMetadata = barcodeMetadata;\n        this.barcodeColumnCount = barcodeMetadata.getColumnCount();\n        this.boundingBox = boundingBox;\n        // this.detectionResultColumns = new DetectionResultColumn[this.barcodeColumnCount + 2];\n        this.detectionResultColumns = new Array(this.barcodeColumnCount + 2);\n    }\n    DetectionResult.prototype.getDetectionResultColumns = function () {\n        this.adjustIndicatorColumnRowNumbers(this.detectionResultColumns[0]);\n        this.adjustIndicatorColumnRowNumbers(this.detectionResultColumns[this.barcodeColumnCount + 1]);\n        var unadjustedCodewordCount = PDF417Common_1.default.MAX_CODEWORDS_IN_BARCODE;\n        var previousUnadjustedCount;\n        do {\n            previousUnadjustedCount = unadjustedCodewordCount;\n            unadjustedCodewordCount = this.adjustRowNumbersAndGetCount();\n        } while (unadjustedCodewordCount > 0 && unadjustedCodewordCount < previousUnadjustedCount);\n        return this.detectionResultColumns;\n    };\n    DetectionResult.prototype.adjustIndicatorColumnRowNumbers = function (detectionResultColumn) {\n        if (detectionResultColumn != null) {\n            detectionResultColumn\n                .adjustCompleteIndicatorColumnRowNumbers(this.barcodeMetadata);\n        }\n    };\n    // TODO ensure that no detected codewords with unknown row number are left\n    // we should be able to estimate the row height and use it as a hint for the row number\n    // we should also fill the rows top to bottom and bottom to top\n    /**\n     * @return number of codewords which don't have a valid row number. Note that the count is not accurate as codewords\n     * will be counted several times. It just serves as an indicator to see when we can stop adjusting row numbers\n     */\n    DetectionResult.prototype.adjustRowNumbersAndGetCount = function () {\n        var unadjustedCount = this.adjustRowNumbersByRow();\n        if (unadjustedCount === 0) {\n            return 0;\n        }\n        for (var barcodeColumn /*int*/ = 1; barcodeColumn < this.barcodeColumnCount + 1; barcodeColumn++) {\n            var codewords = this.detectionResultColumns[barcodeColumn].getCodewords();\n            for (var codewordsRow /*int*/ = 0; codewordsRow < codewords.length; codewordsRow++) {\n                if (codewords[codewordsRow] == null) {\n                    continue;\n                }\n                if (!codewords[codewordsRow].hasValidRowNumber()) {\n                    this.adjustRowNumbers(barcodeColumn, codewordsRow, codewords);\n                }\n            }\n        }\n        return unadjustedCount;\n    };\n    DetectionResult.prototype.adjustRowNumbersByRow = function () {\n        this.adjustRowNumbersFromBothRI();\n        // TODO we should only do full row adjustments if row numbers of left and right row indicator column match.\n        // Maybe it's even better to calculated the height (rows: d) and divide it by the number of barcode\n        // rows. This, together with the LRI and RRI row numbers should allow us to get a good estimate where a row\n        // number starts and ends.\n        var unadjustedCount = this.adjustRowNumbersFromLRI();\n        return unadjustedCount + this.adjustRowNumbersFromRRI();\n    };\n    DetectionResult.prototype.adjustRowNumbersFromBothRI = function () {\n        if (this.detectionResultColumns[0] == null || this.detectionResultColumns[this.barcodeColumnCount + 1] == null) {\n            return;\n        }\n        var LRIcodewords = this.detectionResultColumns[0].getCodewords();\n        var RRIcodewords = this.detectionResultColumns[this.barcodeColumnCount + 1].getCodewords();\n        for (var codewordsRow /*int*/ = 0; codewordsRow < LRIcodewords.length; codewordsRow++) {\n            if (LRIcodewords[codewordsRow] != null &&\n                RRIcodewords[codewordsRow] != null &&\n                LRIcodewords[codewordsRow].getRowNumber() === RRIcodewords[codewordsRow].getRowNumber()) {\n                for (var barcodeColumn /*int*/ = 1; barcodeColumn <= this.barcodeColumnCount; barcodeColumn++) {\n                    var codeword = this.detectionResultColumns[barcodeColumn].getCodewords()[codewordsRow];\n                    if (codeword == null) {\n                        continue;\n                    }\n                    codeword.setRowNumber(LRIcodewords[codewordsRow].getRowNumber());\n                    if (!codeword.hasValidRowNumber()) {\n                        this.detectionResultColumns[barcodeColumn].getCodewords()[codewordsRow] = null;\n                    }\n                }\n            }\n        }\n    };\n    DetectionResult.prototype.adjustRowNumbersFromRRI = function () {\n        if (this.detectionResultColumns[this.barcodeColumnCount + 1] == null) {\n            return 0;\n        }\n        var unadjustedCount = 0;\n        var codewords = this.detectionResultColumns[this.barcodeColumnCount + 1].getCodewords();\n        for (var codewordsRow /*int*/ = 0; codewordsRow < codewords.length; codewordsRow++) {\n            if (codewords[codewordsRow] == null) {\n                continue;\n            }\n            var rowIndicatorRowNumber = codewords[codewordsRow].getRowNumber();\n            var invalidRowCounts = 0;\n            for (var barcodeColumn /*int*/ = this.barcodeColumnCount + 1; barcodeColumn > 0 && invalidRowCounts < this.ADJUST_ROW_NUMBER_SKIP; barcodeColumn--) {\n                var codeword = this.detectionResultColumns[barcodeColumn].getCodewords()[codewordsRow];\n                if (codeword != null) {\n                    invalidRowCounts = DetectionResult.adjustRowNumberIfValid(rowIndicatorRowNumber, invalidRowCounts, codeword);\n                    if (!codeword.hasValidRowNumber()) {\n                        unadjustedCount++;\n                    }\n                }\n            }\n        }\n        return unadjustedCount;\n    };\n    DetectionResult.prototype.adjustRowNumbersFromLRI = function () {\n        if (this.detectionResultColumns[0] == null) {\n            return 0;\n        }\n        var unadjustedCount = 0;\n        var codewords = this.detectionResultColumns[0].getCodewords();\n        for (var codewordsRow /*int*/ = 0; codewordsRow < codewords.length; codewordsRow++) {\n            if (codewords[codewordsRow] == null) {\n                continue;\n            }\n            var rowIndicatorRowNumber = codewords[codewordsRow].getRowNumber();\n            var invalidRowCounts = 0;\n            for (var barcodeColumn /*int*/ = 1; barcodeColumn < this.barcodeColumnCount + 1 && invalidRowCounts < this.ADJUST_ROW_NUMBER_SKIP; barcodeColumn++) {\n                var codeword = this.detectionResultColumns[barcodeColumn].getCodewords()[codewordsRow];\n                if (codeword != null) {\n                    invalidRowCounts = DetectionResult.adjustRowNumberIfValid(rowIndicatorRowNumber, invalidRowCounts, codeword);\n                    if (!codeword.hasValidRowNumber()) {\n                        unadjustedCount++;\n                    }\n                }\n            }\n        }\n        return unadjustedCount;\n    };\n    DetectionResult.adjustRowNumberIfValid = function (rowIndicatorRowNumber, invalidRowCounts, codeword) {\n        if (codeword == null) {\n            return invalidRowCounts;\n        }\n        if (!codeword.hasValidRowNumber()) {\n            if (codeword.isValidRowNumber(rowIndicatorRowNumber)) {\n                codeword.setRowNumber(rowIndicatorRowNumber);\n                invalidRowCounts = 0;\n            }\n            else {\n                ++invalidRowCounts;\n            }\n        }\n        return invalidRowCounts;\n    };\n    DetectionResult.prototype.adjustRowNumbers = function (barcodeColumn, codewordsRow, codewords) {\n        var e_1, _a;\n        if (this.detectionResultColumns[barcodeColumn - 1] == null) {\n            return;\n        }\n        var codeword = codewords[codewordsRow];\n        var previousColumnCodewords = this.detectionResultColumns[barcodeColumn - 1].getCodewords();\n        var nextColumnCodewords = previousColumnCodewords;\n        if (this.detectionResultColumns[barcodeColumn + 1] != null) {\n            nextColumnCodewords = this.detectionResultColumns[barcodeColumn + 1].getCodewords();\n        }\n        // let otherCodewords: Codeword[] = new Codeword[14];\n        var otherCodewords = new Array(14);\n        otherCodewords[2] = previousColumnCodewords[codewordsRow];\n        otherCodewords[3] = nextColumnCodewords[codewordsRow];\n        if (codewordsRow > 0) {\n            otherCodewords[0] = codewords[codewordsRow - 1];\n            otherCodewords[4] = previousColumnCodewords[codewordsRow - 1];\n            otherCodewords[5] = nextColumnCodewords[codewordsRow - 1];\n        }\n        if (codewordsRow > 1) {\n            otherCodewords[8] = codewords[codewordsRow - 2];\n            otherCodewords[10] = previousColumnCodewords[codewordsRow - 2];\n            otherCodewords[11] = nextColumnCodewords[codewordsRow - 2];\n        }\n        if (codewordsRow < codewords.length - 1) {\n            otherCodewords[1] = codewords[codewordsRow + 1];\n            otherCodewords[6] = previousColumnCodewords[codewordsRow + 1];\n            otherCodewords[7] = nextColumnCodewords[codewordsRow + 1];\n        }\n        if (codewordsRow < codewords.length - 2) {\n            otherCodewords[9] = codewords[codewordsRow + 2];\n            otherCodewords[12] = previousColumnCodewords[codewordsRow + 2];\n            otherCodewords[13] = nextColumnCodewords[codewordsRow + 2];\n        }\n        try {\n            for (var otherCodewords_1 = __values(otherCodewords), otherCodewords_1_1 = otherCodewords_1.next(); !otherCodewords_1_1.done; otherCodewords_1_1 = otherCodewords_1.next()) {\n                var otherCodeword = otherCodewords_1_1.value;\n                if (DetectionResult.adjustRowNumber(codeword, otherCodeword)) {\n                    return;\n                }\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (otherCodewords_1_1 && !otherCodewords_1_1.done && (_a = otherCodewords_1.return)) _a.call(otherCodewords_1);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n    };\n    /**\n     * @return true, if row number was adjusted, false otherwise\n     */\n    DetectionResult.adjustRowNumber = function (codeword, otherCodeword) {\n        if (otherCodeword == null) {\n            return false;\n        }\n        if (otherCodeword.hasValidRowNumber() && otherCodeword.getBucket() === codeword.getBucket()) {\n            codeword.setRowNumber(otherCodeword.getRowNumber());\n            return true;\n        }\n        return false;\n    };\n    DetectionResult.prototype.getBarcodeColumnCount = function () {\n        return this.barcodeColumnCount;\n    };\n    DetectionResult.prototype.getBarcodeRowCount = function () {\n        return this.barcodeMetadata.getRowCount();\n    };\n    DetectionResult.prototype.getBarcodeECLevel = function () {\n        return this.barcodeMetadata.getErrorCorrectionLevel();\n    };\n    DetectionResult.prototype.setBoundingBox = function (boundingBox) {\n        this.boundingBox = boundingBox;\n    };\n    DetectionResult.prototype.getBoundingBox = function () {\n        return this.boundingBox;\n    };\n    DetectionResult.prototype.setDetectionResultColumn = function (barcodeColumn, detectionResultColumn) {\n        this.detectionResultColumns[barcodeColumn] = detectionResultColumn;\n    };\n    DetectionResult.prototype.getDetectionResultColumn = function (barcodeColumn) {\n        return this.detectionResultColumns[barcodeColumn];\n    };\n    // @Override\n    DetectionResult.prototype.toString = function () {\n        var rowIndicatorColumn = this.detectionResultColumns[0];\n        if (rowIndicatorColumn == null) {\n            rowIndicatorColumn = this.detectionResultColumns[this.barcodeColumnCount + 1];\n        }\n        // try (\n        var formatter = new Formatter_1.default();\n        // ) {\n        for (var codewordsRow /*int*/ = 0; codewordsRow < rowIndicatorColumn.getCodewords().length; codewordsRow++) {\n            formatter.format('CW %3d:', codewordsRow);\n            for (var barcodeColumn /*int*/ = 0; barcodeColumn < this.barcodeColumnCount + 2; barcodeColumn++) {\n                if (this.detectionResultColumns[barcodeColumn] == null) {\n                    formatter.format('    |   ');\n                    continue;\n                }\n                var codeword = this.detectionResultColumns[barcodeColumn].getCodewords()[codewordsRow];\n                if (codeword == null) {\n                    formatter.format('    |   ');\n                    continue;\n                }\n                formatter.format(' %3d|%3d', codeword.getRowNumber(), codeword.getValue());\n            }\n            formatter.format('%n');\n        }\n        return formatter.toString();\n        // }\n    };\n    return DetectionResult;\n}());\nexports.default = DetectionResult;\n//# sourceMappingURL=DetectionResult.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","__values","o","s","Symbol","iterator","m","i","call","length","next","value","done","TypeError","Object","defineProperty","PDF417Common_1","Formatter_1","DetectionResult","barcodeMetadata","boundingBox","ADJUST_ROW_NUMBER_SKIP","barcodeColumnCount","getColumnCount","detectionResultColumns","Array","prototype","getDetectionResultColumns","DetectionResult.prototype.getDetectionResultColumns","adjustIndicatorColumnRowNumbers","unadjustedCodewordCount","default","MAX_CODEWORDS_IN_BARCODE","previousUnadjustedCount","adjustRowNumbersAndGetCount","DetectionResult.prototype.adjustIndicatorColumnRowNumbers","detectionResultColumn","adjustCompleteIndicatorColumnRowNumbers","DetectionResult.prototype.adjustRowNumbersAndGetCount","unadjustedCount","adjustRowNumbersByRow","barcodeColumn","codewords","getCodewords","codewordsRow","hasValidRowNumber","adjustRowNumbers","DetectionResult.prototype.adjustRowNumbersByRow","adjustRowNumbersFromBothRI","adjustRowNumbersFromLRI","adjustRowNumbersFromRRI","DetectionResult.prototype.adjustRowNumbersFromBothRI","LRIcodewords","RRIcodewords","getRowNumber","codeword","setRowNumber","DetectionResult.prototype.adjustRowNumbersFromRRI","rowIndicatorRowNumber","invalidRowCounts","adjustRowNumberIfValid","DetectionResult.prototype.adjustRowNumbersFromLRI","DetectionResult.adjustRowNumberIfValid","isValidRowNumber","DetectionResult.prototype.adjustRowNumbers","_a","previousColumnCodewords","nextColumnCodewords","otherCodewords","otherCodewords_1","otherCodewords_1_1","adjustRowNumber","e_1_1","e_1","error","return","DetectionResult.adjustRowNumber","otherCodeword","getBucket","getBarcodeColumnCount","DetectionResult.prototype.getBarcodeColumnCount","getBarcodeRowCount","DetectionResult.prototype.getBarcodeRowCount","getRowCount","getBarcodeECLevel","DetectionResult.prototype.getBarcodeECLevel","getErrorCorrectionLevel","setBoundingBox","DetectionResult.prototype.setBoundingBox","getBoundingBox","DetectionResult.prototype.getBoundingBox","setDetectionResultColumn","DetectionResult.prototype.setDetectionResultColumn","getDetectionResultColumn","DetectionResult.prototype.getDetectionResultColumn","toString","DetectionResult.prototype.toString","rowIndicatorColumn","formatter","format","getValue"]
}
