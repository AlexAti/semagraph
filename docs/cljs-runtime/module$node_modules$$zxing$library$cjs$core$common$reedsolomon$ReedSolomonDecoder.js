shadow$provide.module$node_modules$$zxing$library$cjs$core$common$reedsolomon$ReedSolomonDecoder=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});var GenericGF_1=require("module$node_modules$$zxing$library$cjs$core$common$reedsolomon$GenericGF"),GenericGFPoly_1=require("module$node_modules$$zxing$library$cjs$core$common$reedsolomon$GenericGFPoly"),ReedSolomonException_1=require("module$node_modules$$zxing$library$cjs$core$ReedSolomonException"),IllegalStateException_1=
require("module$node_modules$$zxing$library$cjs$core$IllegalStateException");global=function(){function ReedSolomonDecoder(field){this.field=field}ReedSolomonDecoder.prototype.decode=function(received,twoS){for(var field=this.field,poly=new GenericGFPoly_1.default(field,received),syndromeCoefficients=new Int32Array(twoS),noError=!0,i=0;i<twoS;i++){var evalResult=poly.evaluateAt(field.exp(i+field.getGeneratorBase()));syndromeCoefficients[syndromeCoefficients.length-1-i]=evalResult;0!==evalResult&&
(noError=!1)}if(!noError)for(i=new GenericGFPoly_1.default(field,syndromeCoefficients),twoS=this.runEuclideanAlgorithm(field.buildMonomial(twoS,1),i,twoS),i=twoS[1],twoS=this.findErrorLocations(twoS[0]),poly=this.findErrorMagnitudes(i,twoS),i=0;i<twoS.length;i++){syndromeCoefficients=received.length-1-field.log(twoS[i]);if(0>syndromeCoefficients)throw new ReedSolomonException_1.default("Bad error location");received[syndromeCoefficients]=GenericGF_1.default.addOrSubtract(received[syndromeCoefficients],
poly[i])}};ReedSolomonDecoder.prototype.runEuclideanAlgorithm=function(a,b,R){if(a.getDegree()<b.getDegree()){var temp=a;a=b;b=temp}temp=this.field;for(var tLast=temp.getZero(),t=temp.getOne();b.getDegree()>=(R/2|0);){var rLastLast=a,tLastLast=tLast;a=b;tLast=t;if(a.isZero())throw new ReedSolomonException_1.default("r_{i-1} was zero");b=rLastLast;t=temp.getZero();rLastLast=a.getCoefficient(a.getDegree());for(rLastLast=temp.inverse(rLastLast);b.getDegree()>=a.getDegree()&&!b.isZero();){var degreeDiff=
b.getDegree()-a.getDegree(),scale=temp.multiply(b.getCoefficient(b.getDegree()),rLastLast);t=t.addOrSubtract(temp.buildMonomial(degreeDiff,scale));b=b.addOrSubtract(a.multiplyByMonomial(degreeDiff,scale))}t=t.multiply(tLast).addOrSubtract(tLastLast);if(b.getDegree()>=a.getDegree())throw new IllegalStateException_1.default("Division algorithm failed to reduce polynomial?");}R=t.getCoefficient(0);if(0===R)throw new ReedSolomonException_1.default("sigmaTilde(0) was zero");R=temp.inverse(R);temp=t.multiplyScalar(R);
R=b.multiplyScalar(R);return[temp,R]};ReedSolomonDecoder.prototype.findErrorLocations=function(errorLocator){var numErrors=errorLocator.getDegree();if(1===numErrors)return Int32Array.from([errorLocator.getCoefficient(1)]);for(var result=new Int32Array(numErrors),e=0,field=this.field,i=1;i<field.getSize()&&e<numErrors;i++)0===errorLocator.evaluateAt(i)&&(result[e]=field.inverse(i),e++);if(e!==numErrors)throw new ReedSolomonException_1.default("Error locator degree does not match number of roots");
return result};ReedSolomonDecoder.prototype.findErrorMagnitudes=function(errorEvaluator,errorLocations){for(var s=errorLocations.length,result=new Int32Array(s),field=this.field,i=0;i<s;i++){for(var xiInverse=field.inverse(errorLocations[i]),denominator=1,j=0;j<s;j++)if(i!==j){var term=field.multiply(errorLocations[j],xiInverse);denominator=field.multiply(denominator,0===(term&1)?term|1:term&-2)}result[i]=field.multiply(errorEvaluator.evaluateAt(xiInverse),field.inverse(denominator));0!==field.getGeneratorBase()&&
(result[i]=field.multiply(result[i],xiInverse))}return result};return ReedSolomonDecoder}();exports.default=global}
//# sourceMappingURL=module$node_modules$$zxing$library$cjs$core$common$reedsolomon$ReedSolomonDecoder.js.map
