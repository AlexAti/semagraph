shadow$provide.module$node_modules$$zxing$library$cjs$core$common$BitMatrix=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});var BitArray_1=require("module$node_modules$$zxing$library$cjs$core$common$BitArray"),System_1=require("module$node_modules$$zxing$library$cjs$core$util$System"),Arrays_1=require("module$node_modules$$zxing$library$cjs$core$util$Arrays"),StringBuilder_1=require("module$node_modules$$zxing$library$cjs$core$util$StringBuilder"),IllegalArgumentException_1=
require("module$node_modules$$zxing$library$cjs$core$IllegalArgumentException");global=function(){function BitMatrix(width,height,rowSize,bits){this.width=width;this.height=height;this.rowSize=rowSize;this.bits=bits;if(void 0===height||null===height)height=width;this.height=height;if(1>width||1>height)throw new IllegalArgumentException_1.default("Both dimensions must be greater than 0");if(void 0===rowSize||null===rowSize)rowSize=Math.floor((width+31)/32);this.rowSize=rowSize;if(void 0===bits||null===
bits)this.bits=new Int32Array(this.rowSize*this.height)}BitMatrix.parseFromBooleanArray=function(image){for(var height=image.length,width=image[0].length,bits=new BitMatrix(width,height),i=0;i<height;i++)for(var imageI=image[i],j=0;j<width;j++)imageI[j]&&bits.set(j,i);return bits};BitMatrix.parseFromString=function(stringRepresentation,setString,unsetString){if(null===stringRepresentation)throw new IllegalArgumentException_1.default("stringRepresentation cannot be null");for(var bits=Array(stringRepresentation.length),
bitsPos=0,rowStartPos=0,rowLength=-1,nRows=0,pos=0;pos<stringRepresentation.length;)if("\n"===stringRepresentation.charAt(pos)||"\r"===stringRepresentation.charAt(pos)){if(bitsPos>rowStartPos){if(-1===rowLength)rowLength=bitsPos-rowStartPos;else if(bitsPos-rowStartPos!==rowLength)throw new IllegalArgumentException_1.default("row lengths do not match");rowStartPos=bitsPos;nRows++}pos++}else if(stringRepresentation.substring(pos,pos+setString.length)===setString)pos+=setString.length,bits[bitsPos]=
!0,bitsPos++;else if(stringRepresentation.substring(pos,pos+unsetString.length)===unsetString)pos+=unsetString.length,bits[bitsPos]=!1,bitsPos++;else throw new IllegalArgumentException_1.default("illegal character encountered: "+stringRepresentation.substring(pos));if(bitsPos>rowStartPos){if(-1===rowLength)rowLength=bitsPos-rowStartPos;else if(bitsPos-rowStartPos!==rowLength)throw new IllegalArgumentException_1.default("row lengths do not match");nRows++}stringRepresentation=new BitMatrix(rowLength,
nRows);for(setString=0;setString<bitsPos;setString++)bits[setString]&&stringRepresentation.set(Math.floor(setString%rowLength),Math.floor(setString/rowLength));return stringRepresentation};BitMatrix.prototype.get=function(x,y){return 0!==(this.bits[y*this.rowSize+Math.floor(x/32)]>>>(x&31)&1)};BitMatrix.prototype.set=function(x,y){this.bits[y*this.rowSize+Math.floor(x/32)]|=1<<(x&31)&4294967295};BitMatrix.prototype.unset=function(x,y){this.bits[y*this.rowSize+Math.floor(x/32)]&=~(1<<(x&31)&4294967295)};
BitMatrix.prototype.flip=function(x,y){this.bits[y*this.rowSize+Math.floor(x/32)]^=1<<(x&31)&4294967295};BitMatrix.prototype.xor=function(mask){if(this.width!==mask.getWidth()||this.height!==mask.getHeight()||this.rowSize!==mask.getRowSize())throw new IllegalArgumentException_1.default("input matrix dimensions do not match");for(var rowArray=new BitArray_1.default(Math.floor(this.width/32)+1),rowSize=this.rowSize,bits=this.bits,y=0,height=this.height;y<height;y++)for(var offset=y*rowSize,row=mask.getRow(y,
rowArray).getBitArray(),x=0;x<rowSize;x++)bits[offset+x]^=row[x]};BitMatrix.prototype.clear=function(){for(var bits=this.bits,max=bits.length,i=0;i<max;i++)bits[i]=0};BitMatrix.prototype.setRegion=function(left,top,width,height){if(0>top||0>left)throw new IllegalArgumentException_1.default("Left and top must be nonnegative");if(1>height||1>width)throw new IllegalArgumentException_1.default("Height and width must be at least 1");width=left+width;height=top+height;if(height>this.height||width>this.width)throw new IllegalArgumentException_1.default("The region must fit inside the matrix");
for(var rowSize=this.rowSize,bits=this.bits;top<height;top++)for(var offset=top*rowSize,x=left;x<width;x++)bits[offset+Math.floor(x/32)]|=1<<(x&31)&4294967295};BitMatrix.prototype.getRow=function(y,row){null===row||void 0===row||row.getSize()<this.width?row=new BitArray_1.default(this.width):row.clear();var rowSize=this.rowSize,bits=this.bits;y*=rowSize;for(var x=0;x<rowSize;x++)row.setBulk(32*x,bits[y+x]);return row};BitMatrix.prototype.setRow=function(y,row){System_1.default.arraycopy(row.getBitArray(),
0,this.bits,y*this.rowSize,this.rowSize)};BitMatrix.prototype.rotate180=function(){var width=this.getWidth(),height=this.getHeight(),topRow=new BitArray_1.default(width);width=new BitArray_1.default(width);for(var i=0,length_1=Math.floor((height+1)/2);i<length_1;i++)topRow=this.getRow(i,topRow),width=this.getRow(height-1-i,width),topRow.reverse(),width.reverse(),this.setRow(i,width),this.setRow(height-1-i,topRow)};BitMatrix.prototype.getEnclosingRectangle=function(){for(var height=this.height,rowSize=
this.rowSize,bits=this.bits,left=this.width,top=height,right=-1,bottom=-1,y=0;y<height;y++)for(var x32=0;x32<rowSize;x32++){var theBits=bits[y*rowSize+x32];if(0!==theBits){y<top&&(top=y);y>bottom&&(bottom=y);if(32*x32<left){for(var bit=0;0===(theBits<<31-bit&4294967295);)bit++;32*x32+bit<left&&(left=32*x32+bit)}if(32*x32+31>right){for(bit=31;0===theBits>>>bit;)bit--;32*x32+bit>right&&(right=32*x32+bit)}}}return right<left||bottom<top?null:Int32Array.from([left,top,right-left+1,bottom-top+1])};BitMatrix.prototype.getTopLeftOnBit=
function(){for(var rowSize=this.rowSize,bits=this.bits,bitsOffset=0;bitsOffset<bits.length&&0===bits[bitsOffset];)bitsOffset++;if(bitsOffset===bits.length)return null;bits=bits[bitsOffset];for(var bit=0;0===(bits<<31-bit&4294967295);)bit++;return Int32Array.from([bitsOffset%rowSize*32+bit,bitsOffset/rowSize])};BitMatrix.prototype.getBottomRightOnBit=function(){for(var rowSize=this.rowSize,bits=this.bits,bitsOffset=bits.length-1;0<=bitsOffset&&0===bits[bitsOffset];)bitsOffset--;if(0>bitsOffset)return null;
var y=Math.floor(bitsOffset/rowSize);rowSize=32*Math.floor(bitsOffset%rowSize);bits=bits[bitsOffset];for(bitsOffset=31;0===bits>>>bitsOffset;)bitsOffset--;return Int32Array.from([rowSize+bitsOffset,y])};BitMatrix.prototype.getWidth=function(){return this.width};BitMatrix.prototype.getHeight=function(){return this.height};BitMatrix.prototype.getRowSize=function(){return this.rowSize};BitMatrix.prototype.equals=function(o){return o instanceof BitMatrix?this.width===o.width&&this.height===o.height&&
this.rowSize===o.rowSize&&Arrays_1.default.equals(this.bits,o.bits):!1};BitMatrix.prototype.hashCode=function(){var hash=this.width;hash=31*hash+this.width;hash=31*hash+this.height;hash=31*hash+this.rowSize;return hash=31*hash+Arrays_1.default.hashCode(this.bits)};BitMatrix.prototype.toString=function(setString,unsetString,lineSeparator){void 0===setString&&(setString="X ");void 0===unsetString&&(unsetString="  ");void 0===lineSeparator&&(lineSeparator="\n");return this.buildToString(setString,unsetString,
lineSeparator)};BitMatrix.prototype.buildToString=function(setString,unsetString,lineSeparator){for(var result=new StringBuilder_1.default,y=0,height=this.height;y<height;y++){for(var x=0,width=this.width;x<width;x++)result.append(this.get(x,y)?setString:unsetString);result.append(lineSeparator)}return result.toString()};BitMatrix.prototype.clone=function(){return new BitMatrix(this.width,this.height,this.rowSize,this.bits.slice())};return BitMatrix}();exports.default=global}
//# sourceMappingURL=module$node_modules$$zxing$library$cjs$core$common$BitMatrix.js.map
