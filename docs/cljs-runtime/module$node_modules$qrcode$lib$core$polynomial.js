shadow$provide.module$node_modules$qrcode$lib$core$polynomial=function(global,require,module,exports){const GF=require("module$node_modules$qrcode$lib$core$galois_field");exports.mul=function(p1,p2){const coeff=new Uint8Array(p1.length+p2.length-1);for(let i=0;i<p1.length;i++)for(let j=0;j<p2.length;j++)coeff[i+j]^=GF.mul(p1[i],p2[j]);return coeff};exports.mod=function(divident,divisor){for(divident=new Uint8Array(divident);0<=divident.length-divisor.length;){var coeff=divident[0];for(let i=0;i<divisor.length;i++)divident[i]^=
GF.mul(divisor[i],coeff);for(coeff=0;coeff<divident.length&&0===divident[coeff];)coeff++;divident=divident.slice(coeff)}return divident};exports.generateECPolynomial=function(degree){let poly=new Uint8Array([1]);for(let i=0;i<degree;i++)poly=exports.mul(poly,new Uint8Array([1,GF.exp(i)]));return poly}}
//# sourceMappingURL=module$node_modules$qrcode$lib$core$polynomial.js.map
