shadow$provide.module$node_modules$$zxing$library$cjs$core$qrcode$decoder$BitMatrixParser=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});var Version_1=require("module$node_modules$$zxing$library$cjs$core$qrcode$decoder$Version"),FormatInformation_1=require("module$node_modules$$zxing$library$cjs$core$qrcode$decoder$FormatInformation"),DataMask_1=require("module$node_modules$$zxing$library$cjs$core$qrcode$decoder$DataMask"),FormatException_1=require("module$node_modules$$zxing$library$cjs$core$FormatException");
global=function(){function BitMatrixParser(bitMatrix){var dimension=bitMatrix.getHeight();if(21>dimension||1!==(dimension&3))throw new FormatException_1.default;this.bitMatrix=bitMatrix}BitMatrixParser.prototype.readFormatInformation=function(){if(null!==this.parsedFormatInfo&&void 0!==this.parsedFormatInfo)return this.parsedFormatInfo;for(var formatInfoBits1=0,i=0;6>i;i++)formatInfoBits1=this.copyBit(i,8,formatInfoBits1);formatInfoBits1=this.copyBit(7,8,formatInfoBits1);formatInfoBits1=this.copyBit(8,
8,formatInfoBits1);formatInfoBits1=this.copyBit(8,7,formatInfoBits1);for(i=5;0<=i;i--)formatInfoBits1=this.copyBit(8,i,formatInfoBits1);var dimension=this.bitMatrix.getHeight(),formatInfoBits2=0,jMin=dimension-7;for(i=dimension-1;i>=jMin;i--)formatInfoBits2=this.copyBit(8,i,formatInfoBits2);for(i=dimension-8;i<dimension;i++)formatInfoBits2=this.copyBit(i,8,formatInfoBits2);this.parsedFormatInfo=FormatInformation_1.default.decodeFormatInformation(formatInfoBits1,formatInfoBits2);if(null!==this.parsedFormatInfo)return this.parsedFormatInfo;
throw new FormatException_1.default;};BitMatrixParser.prototype.readVersion=function(){if(null!==this.parsedVersion&&void 0!==this.parsedVersion)return this.parsedVersion;var dimension=this.bitMatrix.getHeight(),provisionalVersion=Math.floor((dimension-17)/4);if(6>=provisionalVersion)return Version_1.default.getVersionForNumber(provisionalVersion);var versionBits=0;provisionalVersion=dimension-11;for(var j=5;0<=j;j--)for(var i=dimension-9;i>=provisionalVersion;i--)versionBits=this.copyBit(i,j,versionBits);
versionBits=Version_1.default.decodeVersionInformation(versionBits);if(null!==versionBits&&versionBits.getDimensionForVersion()===dimension)return this.parsedVersion=versionBits;versionBits=0;for(i=5;0<=i;i--)for(j=dimension-9;j>=provisionalVersion;j--)versionBits=this.copyBit(i,j,versionBits);versionBits=Version_1.default.decodeVersionInformation(versionBits);if(null!==versionBits&&versionBits.getDimensionForVersion()===dimension)return this.parsedVersion=versionBits;throw new FormatException_1.default;
};BitMatrixParser.prototype.copyBit=function(i,j,versionBits){return(this.isMirror?this.bitMatrix.get(j,i):this.bitMatrix.get(i,j))?versionBits<<1|1:versionBits<<1};BitMatrixParser.prototype.readCodewords=function(){var formatInfo=this.readFormatInformation(),version=this.readVersion(),dataMask=DataMask_1.default.values.get(formatInfo.getDataMask());formatInfo=this.bitMatrix.getHeight();dataMask.unmaskBitMatrix(this.bitMatrix,formatInfo);dataMask=version.buildFunctionPattern();for(var readingUp=!0,
result=new Uint8Array(version.getTotalCodewords()),resultOffset=0,currentByte=0,bitsRead=0,j=formatInfo-1;0<j;j-=2){6===j&&j--;for(var count=0;count<formatInfo;count++)for(var i=readingUp?formatInfo-1-count:count,col=0;2>col;col++)dataMask.get(j-col,i)||(bitsRead++,currentByte<<=1,this.bitMatrix.get(j-col,i)&&(currentByte|=1),8===bitsRead&&(result[resultOffset++]=currentByte,currentByte=bitsRead=0));readingUp=!readingUp}if(resultOffset!==version.getTotalCodewords())throw new FormatException_1.default;
return result};BitMatrixParser.prototype.remask=function(){if(null!==this.parsedFormatInfo){var dataMask=DataMask_1.default.values[this.parsedFormatInfo.getDataMask()],dimension=this.bitMatrix.getHeight();dataMask.unmaskBitMatrix(this.bitMatrix,dimension)}};BitMatrixParser.prototype.setMirror=function(isMirror){this.parsedFormatInfo=this.parsedVersion=null;this.isMirror=isMirror};BitMatrixParser.prototype.mirror=function(){for(var bitMatrix=this.bitMatrix,x=0,width=bitMatrix.getWidth();x<width;x++)for(var y=
x+1,height=bitMatrix.getHeight();y<height;y++)bitMatrix.get(x,y)!==bitMatrix.get(y,x)&&(bitMatrix.flip(y,x),bitMatrix.flip(x,y))};return BitMatrixParser}();exports.default=global}
//# sourceMappingURL=module$node_modules$$zxing$library$cjs$core$qrcode$decoder$BitMatrixParser.js.map
