{
"version":3,
"file":"module$node_modules$$zxing$library$cjs$core$common$StringUtils.js",
"lineCount":9,
"mappings":"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",
"sources":["node_modules/@zxing/library/cjs/core/common/StringUtils.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$zxing$library$cjs$core$common$StringUtils\"] = function(global,require,module,exports) {\n\"use strict\";\n/*\n * Copyright (C) 2010 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/*namespace com.google.zxing.common {*/\n/*import java.nio.charset.Charset;*/\n/*import java.util.Map;*/\nvar DecodeHintType_1 = require(\"../DecodeHintType\");\nvar CharacterSetECI_1 = require(\"./CharacterSetECI\");\nvar StringEncoding_1 = require(\"../util/StringEncoding\");\n/**\n * Common string-related functions.\n *\n * @author Sean Owen\n * @author Alex Dupre\n */\nvar StringUtils = /** @class */ (function () {\n    function StringUtils() {\n    }\n    // SHIFT_JIS.equalsIgnoreCase(PLATFORM_DEFAULT_ENCODING) ||\n    // EUC_JP.equalsIgnoreCase(PLATFORM_DEFAULT_ENCODING);\n    StringUtils.castAsNonUtf8Char = function (code, encoding) {\n        if (encoding === void 0) { encoding = null; }\n        // ISO 8859-1 is the Java default as UTF-8 is JavaScripts\n        // you can see this method as a Java version of String.fromCharCode\n        var e = encoding ? encoding.getName() : this.ISO88591;\n        // use passed format (fromCharCode will return UTF8 encoding)\n        return StringEncoding_1.default.decode(new Uint8Array([code]), e);\n    };\n    /**\n     * @param bytes bytes encoding a string, whose encoding should be guessed\n     * @param hints decode hints if applicable\n     * @return name of guessed encoding; at the moment will only guess one of:\n     *  {@link #SHIFT_JIS}, {@link #UTF8}, {@link #ISO88591}, or the platform\n     *  default encoding if none of these can possibly be correct\n     */\n    StringUtils.guessEncoding = function (bytes, hints) {\n        if (hints !== null && hints !== undefined && undefined !== hints.get(DecodeHintType_1.default.CHARACTER_SET)) {\n            return hints.get(DecodeHintType_1.default.CHARACTER_SET).toString();\n        }\n        // For now, merely tries to distinguish ISO-8859-1, UTF-8 and Shift_JIS,\n        // which should be by far the most common encodings.\n        var length = bytes.length;\n        var canBeISO88591 = true;\n        var canBeShiftJIS = true;\n        var canBeUTF8 = true;\n        var utf8BytesLeft = 0;\n        // int utf8LowChars = 0\n        var utf2BytesChars = 0;\n        var utf3BytesChars = 0;\n        var utf4BytesChars = 0;\n        var sjisBytesLeft = 0;\n        // int sjisLowChars = 0\n        var sjisKatakanaChars = 0;\n        // int sjisDoubleBytesChars = 0\n        var sjisCurKatakanaWordLength = 0;\n        var sjisCurDoubleBytesWordLength = 0;\n        var sjisMaxKatakanaWordLength = 0;\n        var sjisMaxDoubleBytesWordLength = 0;\n        // int isoLowChars = 0\n        // int isoHighChars = 0\n        var isoHighOther = 0;\n        var utf8bom = bytes.length > 3 &&\n            bytes[0] === /*(byte) */ 0xEF &&\n            bytes[1] === /*(byte) */ 0xBB &&\n            bytes[2] === /*(byte) */ 0xBF;\n        for (var i = 0; i < length && (canBeISO88591 || canBeShiftJIS || canBeUTF8); i++) {\n            var value = bytes[i] & 0xFF;\n            // UTF-8 stuff\n            if (canBeUTF8) {\n                if (utf8BytesLeft > 0) {\n                    if ((value & 0x80) === 0) {\n                        canBeUTF8 = false;\n                    }\n                    else {\n                        utf8BytesLeft--;\n                    }\n                }\n                else if ((value & 0x80) !== 0) {\n                    if ((value & 0x40) === 0) {\n                        canBeUTF8 = false;\n                    }\n                    else {\n                        utf8BytesLeft++;\n                        if ((value & 0x20) === 0) {\n                            utf2BytesChars++;\n                        }\n                        else {\n                            utf8BytesLeft++;\n                            if ((value & 0x10) === 0) {\n                                utf3BytesChars++;\n                            }\n                            else {\n                                utf8BytesLeft++;\n                                if ((value & 0x08) === 0) {\n                                    utf4BytesChars++;\n                                }\n                                else {\n                                    canBeUTF8 = false;\n                                }\n                            }\n                        }\n                    }\n                } // else {\n                // utf8LowChars++\n                // }\n            }\n            // ISO-8859-1 stuff\n            if (canBeISO88591) {\n                if (value > 0x7F && value < 0xA0) {\n                    canBeISO88591 = false;\n                }\n                else if (value > 0x9F) {\n                    if (value < 0xC0 || value === 0xD7 || value === 0xF7) {\n                        isoHighOther++;\n                    } // else {\n                    // isoHighChars++\n                    // }\n                } // else {\n                // isoLowChars++\n                // }\n            }\n            // Shift_JIS stuff\n            if (canBeShiftJIS) {\n                if (sjisBytesLeft > 0) {\n                    if (value < 0x40 || value === 0x7F || value > 0xFC) {\n                        canBeShiftJIS = false;\n                    }\n                    else {\n                        sjisBytesLeft--;\n                    }\n                }\n                else if (value === 0x80 || value === 0xA0 || value > 0xEF) {\n                    canBeShiftJIS = false;\n                }\n                else if (value > 0xA0 && value < 0xE0) {\n                    sjisKatakanaChars++;\n                    sjisCurDoubleBytesWordLength = 0;\n                    sjisCurKatakanaWordLength++;\n                    if (sjisCurKatakanaWordLength > sjisMaxKatakanaWordLength) {\n                        sjisMaxKatakanaWordLength = sjisCurKatakanaWordLength;\n                    }\n                }\n                else if (value > 0x7F) {\n                    sjisBytesLeft++;\n                    // sjisDoubleBytesChars++\n                    sjisCurKatakanaWordLength = 0;\n                    sjisCurDoubleBytesWordLength++;\n                    if (sjisCurDoubleBytesWordLength > sjisMaxDoubleBytesWordLength) {\n                        sjisMaxDoubleBytesWordLength = sjisCurDoubleBytesWordLength;\n                    }\n                }\n                else {\n                    // sjisLowChars++\n                    sjisCurKatakanaWordLength = 0;\n                    sjisCurDoubleBytesWordLength = 0;\n                }\n            }\n        }\n        if (canBeUTF8 && utf8BytesLeft > 0) {\n            canBeUTF8 = false;\n        }\n        if (canBeShiftJIS && sjisBytesLeft > 0) {\n            canBeShiftJIS = false;\n        }\n        // Easy -- if there is BOM or at least 1 valid not-single byte character (and no evidence it can't be UTF-8), done\n        if (canBeUTF8 && (utf8bom || utf2BytesChars + utf3BytesChars + utf4BytesChars > 0)) {\n            return StringUtils.UTF8;\n        }\n        // Easy -- if assuming Shift_JIS or at least 3 valid consecutive not-ascii characters (and no evidence it can't be), done\n        if (canBeShiftJIS && (StringUtils.ASSUME_SHIFT_JIS || sjisMaxKatakanaWordLength >= 3 || sjisMaxDoubleBytesWordLength >= 3)) {\n            return StringUtils.SHIFT_JIS;\n        }\n        // Distinguishing Shift_JIS and ISO-8859-1 can be a little tough for short words. The crude heuristic is:\n        // - If we saw\n        //   - only two consecutive katakana chars in the whole text, or\n        //   - at least 10% of bytes that could be \"upper\" not-alphanumeric Latin1,\n        // - then we conclude Shift_JIS, else ISO-8859-1\n        if (canBeISO88591 && canBeShiftJIS) {\n            return (sjisMaxKatakanaWordLength === 2 && sjisKatakanaChars === 2) || isoHighOther * 10 >= length\n                ? StringUtils.SHIFT_JIS : StringUtils.ISO88591;\n        }\n        // Otherwise, try in order ISO-8859-1, Shift JIS, UTF-8 and fall back to default platform encoding\n        if (canBeISO88591) {\n            return StringUtils.ISO88591;\n        }\n        if (canBeShiftJIS) {\n            return StringUtils.SHIFT_JIS;\n        }\n        if (canBeUTF8) {\n            return StringUtils.UTF8;\n        }\n        // Otherwise, we take a wild guess with platform encoding\n        return StringUtils.PLATFORM_DEFAULT_ENCODING;\n    };\n    /**\n     *\n     * @see https://stackoverflow.com/a/13439711/4367683\n     *\n     * @param append The new string to append.\n     * @param args Argumets values to be formated.\n     */\n    StringUtils.format = function (append) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        var i = -1;\n        function callback(exp, p0, p1, p2, p3, p4) {\n            if (exp === '%%')\n                return '%';\n            if (args[++i] === undefined)\n                return undefined;\n            exp = p2 ? parseInt(p2.substr(1)) : undefined;\n            var base = p3 ? parseInt(p3.substr(1)) : undefined;\n            var val;\n            switch (p4) {\n                case 's':\n                    val = args[i];\n                    break;\n                case 'c':\n                    val = args[i][0];\n                    break;\n                case 'f':\n                    val = parseFloat(args[i]).toFixed(exp);\n                    break;\n                case 'p':\n                    val = parseFloat(args[i]).toPrecision(exp);\n                    break;\n                case 'e':\n                    val = parseFloat(args[i]).toExponential(exp);\n                    break;\n                case 'x':\n                    val = parseInt(args[i]).toString(base ? base : 16);\n                    break;\n                case 'd':\n                    val = parseFloat(parseInt(args[i], base ? base : 10).toPrecision(exp)).toFixed(0);\n                    break;\n            }\n            val = typeof val === 'object' ? JSON.stringify(val) : (+val).toString(base);\n            var size = parseInt(p1); /* padding size */\n            var ch = p1 && (p1[0] + '') === '0' ? '0' : ' '; /* isnull? */\n            while (val.length < size)\n                val = p0 !== undefined ? val + ch : ch + val; /* isminus? */\n            return val;\n        }\n        var regex = /%(-)?(0?[0-9]+)?([.][0-9]+)?([#][0-9]+)?([scfpexd%])/g;\n        return append.replace(regex, callback);\n    };\n    /**\n     *\n     */\n    StringUtils.getBytes = function (str, encoding) {\n        return StringEncoding_1.default.encode(str, encoding);\n    };\n    /**\n     * Returns the charcode at the specified index or at index zero.\n     */\n    StringUtils.getCharCode = function (str, index) {\n        if (index === void 0) { index = 0; }\n        return str.charCodeAt(index);\n    };\n    /**\n     * Returns char for given charcode\n     */\n    StringUtils.getCharAt = function (charCode) {\n        return String.fromCharCode(charCode);\n    };\n    StringUtils.SHIFT_JIS = CharacterSetECI_1.default.SJIS.getName(); // \"SJIS\"\n    StringUtils.GB2312 = 'GB2312';\n    StringUtils.ISO88591 = CharacterSetECI_1.default.ISO8859_1.getName(); // \"ISO8859_1\"\n    StringUtils.EUC_JP = 'EUC_JP';\n    StringUtils.UTF8 = CharacterSetECI_1.default.UTF8.getName(); // \"UTF8\"\n    StringUtils.PLATFORM_DEFAULT_ENCODING = StringUtils.UTF8; // \"UTF8\"//Charset.defaultCharset().name()\n    StringUtils.ASSUME_SHIFT_JIS = false;\n    return StringUtils;\n}());\nexports.default = StringUtils;\n//# sourceMappingURL=StringUtils.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","DecodeHintType_1","CharacterSetECI_1","StringEncoding_1","StringUtils","castAsNonUtf8Char","StringUtils.castAsNonUtf8Char","code","encoding","e","getName","ISO88591","default","decode","Uint8Array","guessEncoding","StringUtils.guessEncoding","bytes","hints","undefined","get","CHARACTER_SET","toString","length","canBeISO88591","canBeShiftJIS","canBeUTF8","utf8BytesLeft","utf2BytesChars","utf3BytesChars","utf4BytesChars","sjisBytesLeft","sjisKatakanaChars","sjisCurKatakanaWordLength","sjisCurDoubleBytesWordLength","sjisMaxKatakanaWordLength","sjisMaxDoubleBytesWordLength","isoHighOther","utf8bom","i","UTF8","ASSUME_SHIFT_JIS","SHIFT_JIS","PLATFORM_DEFAULT_ENCODING","format","StringUtils.format","append","args","_i","arguments","replace","regex","callback","exp","p0","p1","p2","p3","p4","parseInt","substr","base","val","parseFloat","toFixed","toPrecision","toExponential","JSON","stringify","size","ch","getBytes","StringUtils.getBytes","str","encode","getCharCode","StringUtils.getCharCode","index","charCodeAt","getCharAt","StringUtils.getCharAt","charCode","String","fromCharCode","SJIS","GB2312","ISO8859_1","EUC_JP"]
}
