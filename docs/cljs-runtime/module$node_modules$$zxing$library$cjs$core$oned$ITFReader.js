shadow$provide.module$node_modules$$zxing$library$cjs$core$oned$ITFReader=function(global,require,module,exports){var __extends=this&&this.__extends||function(){var extendStatics=function(d$jscomp$0,b$jscomp$0){extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b}||function(d,b){for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p])};return extendStatics(d$jscomp$0,b$jscomp$0)};return function(d,b){function __(){this.constructor=d}extendStatics(d,b);d.prototype=
null===b?Object.create(b):(__.prototype=b.prototype,new __)}}(),__values=this&&this.__values||function(o){var s="function"===typeof Symbol&&Symbol.iterator,m=s&&o[s],i=0;if(m)return m.call(o);if(o&&"number"===typeof o.length)return{next:function(){o&&i>=o.length&&(o=void 0);return{value:o&&o[i++],done:!o}}};throw new TypeError(s?"Object is not iterable.":"Symbol.iterator is not defined.");};Object.defineProperty(exports,"__esModule",{value:!0});var BarcodeFormat_1=require("module$node_modules$$zxing$library$cjs$core$BarcodeFormat"),
DecodeHintType_1=require("module$node_modules$$zxing$library$cjs$core$DecodeHintType"),FormatException_1=require("module$node_modules$$zxing$library$cjs$core$FormatException"),NotFoundException_1=require("module$node_modules$$zxing$library$cjs$core$NotFoundException"),Result_1=require("module$node_modules$$zxing$library$cjs$core$Result"),ResultPoint_1=require("module$node_modules$$zxing$library$cjs$core$ResultPoint"),StringBuilder_1=require("module$node_modules$$zxing$library$cjs$core$util$StringBuilder"),
System_1=require("module$node_modules$$zxing$library$cjs$core$util$System"),OneDReader_1=require("module$node_modules$$zxing$library$cjs$core$oned$OneDReader");global=function(_super){function ITFReader(){var _this=null!==_super&&_super.apply(this,arguments)||this;_this.narrowLineWidth=-1;return _this}__extends(ITFReader,_super);ITFReader.prototype.decodeRow=function(rowNumber,row,hints){var _a,startRange=this.decodeStart(row),endRange=this.decodeEnd(row),result=new StringBuilder_1.default;ITFReader.decodeMiddle(row,
startRange[1],endRange[0],result);row=result.toString();result=null;null!=hints&&(result=hints.get(DecodeHintType_1.default.ALLOWED_LENGTHS));null==result&&(result=ITFReader.DEFAULT_ALLOWED_LENGTHS);hints=row.length;var lengthOK=!1,maxAllowedLength=0;try{for(var allowedLengths_1=__values(result),allowedLengths_1_1=allowedLengths_1.next();!allowedLengths_1_1.done;allowedLengths_1_1=allowedLengths_1.next()){var value=allowedLengths_1_1.value;if(hints===value){lengthOK=!0;break}value>maxAllowedLength&&
(maxAllowedLength=value)}}catch(e_1_1){var e_1={error:e_1_1}}finally{try{allowedLengths_1_1&&!allowedLengths_1_1.done&&(_a=allowedLengths_1.return)&&_a.call(allowedLengths_1)}finally{if(e_1)throw e_1.error;}}!lengthOK&&hints>maxAllowedLength&&(lengthOK=!0);if(!lengthOK)throw new FormatException_1.default;rowNumber=[new ResultPoint_1.default(startRange[1],rowNumber),new ResultPoint_1.default(endRange[0],rowNumber)];return new Result_1.default(row,null,0,rowNumber,BarcodeFormat_1.default.ITF,(new Date).getTime())};
ITFReader.decodeMiddle=function(row,payloadStart,payloadEnd,resultString){var counterDigitPair=new Int32Array(10),counterBlack=new Int32Array(5),counterWhite=new Int32Array(5);counterDigitPair.fill(0);counterBlack.fill(0);for(counterWhite.fill(0);payloadStart<payloadEnd;){OneDReader_1.default.recordPattern(row,payloadStart,counterDigitPair);for(var k=0;5>k;k++){var twoK=2*k;counterBlack[k]=counterDigitPair[twoK];counterWhite[k]=counterDigitPair[twoK+1]}k=ITFReader.decodeDigit(counterBlack);resultString.append(k.toString());
k=this.decodeDigit(counterWhite);resultString.append(k.toString());counterDigitPair.forEach(function(counterDigit){payloadStart+=counterDigit})}};ITFReader.prototype.decodeStart=function(row){var endStart=ITFReader.skipWhiteSpace(row);endStart=ITFReader.findGuardPattern(row,endStart,ITFReader.START_PATTERN);this.narrowLineWidth=(endStart[1]-endStart[0])/4;this.validateQuietZone(row,endStart[0]);return endStart};ITFReader.prototype.validateQuietZone=function(row,startPattern){var quietCount=10*this.narrowLineWidth;
quietCount=quietCount<startPattern?quietCount:startPattern;for(--startPattern;0<quietCount&&0<=startPattern&&!row.get(startPattern);startPattern--)quietCount--;if(0!==quietCount)throw new NotFoundException_1.default;};ITFReader.skipWhiteSpace=function(row){var width=row.getSize();row=row.getNextSet(0);if(row===width)throw new NotFoundException_1.default;return row};ITFReader.prototype.decodeEnd=function(row){row.reverse();try{var endStart=ITFReader.skipWhiteSpace(row),endPattern=void 0;try{endPattern=
ITFReader.findGuardPattern(row,endStart,ITFReader.END_PATTERN_REVERSED[0])}catch(error){error instanceof NotFoundException_1.default&&(endPattern=ITFReader.findGuardPattern(row,endStart,ITFReader.END_PATTERN_REVERSED[1]))}this.validateQuietZone(row,endPattern[0]);var temp=endPattern[0];endPattern[0]=row.getSize()-endPattern[1];endPattern[1]=row.getSize()-temp;return endPattern}finally{row.reverse()}};ITFReader.findGuardPattern=function(row,rowOffset,pattern){var patternLength=pattern.length,counters=
new Int32Array(patternLength),width=row.getSize(),isWhite=!1,counterPosition=0,patternStart=rowOffset;for(counters.fill(0);rowOffset<width;rowOffset++)if(row.get(rowOffset)!==isWhite)counters[counterPosition]++;else{if(counterPosition===patternLength-1){if(OneDReader_1.default.patternMatchVariance(counters,pattern,ITFReader.MAX_INDIVIDUAL_VARIANCE)<ITFReader.MAX_AVG_VARIANCE)return[patternStart,rowOffset];patternStart+=counters[0]+counters[1];System_1.default.arraycopy(counters,2,counters,0,counterPosition-
1);counters[counterPosition-1]=0;counters[counterPosition]=0;counterPosition--}else counterPosition++;counters[counterPosition]=1;isWhite=!isWhite}throw new NotFoundException_1.default;};ITFReader.decodeDigit=function(counters){for(var bestVariance=ITFReader.MAX_AVG_VARIANCE,bestMatch=-1,max=ITFReader.PATTERNS.length,i=0;i<max;i++){var variance=OneDReader_1.default.patternMatchVariance(counters,ITFReader.PATTERNS[i],ITFReader.MAX_INDIVIDUAL_VARIANCE);variance<bestVariance?(bestVariance=variance,bestMatch=
i):variance===bestVariance&&(bestMatch=-1)}if(0<=bestMatch)return bestMatch%10;throw new NotFoundException_1.default;};ITFReader.PATTERNS=[Int32Array.from([1,1,2,2,1]),Int32Array.from([2,1,1,1,2]),Int32Array.from([1,2,1,1,2]),Int32Array.from([2,2,1,1,1]),Int32Array.from([1,1,2,1,2]),Int32Array.from([2,1,2,1,1]),Int32Array.from([1,2,2,1,1]),Int32Array.from([1,1,1,2,2]),Int32Array.from([2,1,1,2,1]),Int32Array.from([1,2,1,2,1]),Int32Array.from([1,1,3,3,1]),Int32Array.from([3,1,1,1,3]),Int32Array.from([1,
3,1,1,3]),Int32Array.from([3,3,1,1,1]),Int32Array.from([1,1,3,1,3]),Int32Array.from([3,1,3,1,1]),Int32Array.from([1,3,3,1,1]),Int32Array.from([1,1,1,3,3]),Int32Array.from([3,1,1,3,1]),Int32Array.from([1,3,1,3,1])];ITFReader.MAX_AVG_VARIANCE=.38;ITFReader.MAX_INDIVIDUAL_VARIANCE=.5;ITFReader.DEFAULT_ALLOWED_LENGTHS=[6,8,10,12,14];ITFReader.START_PATTERN=Int32Array.from([1,1,1,1]);ITFReader.END_PATTERN_REVERSED=[Int32Array.from([1,1,2]),Int32Array.from([1,1,3])];return ITFReader}(OneDReader_1.default);
exports.default=global}
//# sourceMappingURL=module$node_modules$$zxing$library$cjs$core$oned$ITFReader.js.map
