{
"version":3,
"file":"module$node_modules$$zxing$library$cjs$core$oned$rss$expanded$decoders$AI01weightDecoder.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,wFAAA,CAA6G,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAErJ,IAAIC,UAAa,IAAbA,EAAqB,IAAKA,CAAAA,SAA1BA,EAAyC,QAAS,EAAG,CACrD,IAAIC,cAAgBA,QAAS,CAACC,UAAD,CAAIC,UAAJ,CAAO,CAChCF,aAAA,CAAgBG,MAAOC,CAAAA,cAAvB,EACK,CAAEC,UAAW,EAAb,CADL,UACkCC,MADlC,EAC2C,QAAS,CAACL,CAAD,CAAIC,CAAJ,CAAO,CAAED,CAAEI,CAAAA,SAAF,CAAcH,CAAhB,CAD3D,EAEI,QAAS,CAACD,CAAD,CAAIC,CAAJ,CAAO,CAAE,IAAKK,IAAIA,CAAT,GAAcL,EAAd,CAAqBA,CAAEM,CAAAA,cAAF,CAAiBD,CAAjB,CAAJ,GAAyBN,CAAA,CAAEM,CAAF,CAAzB,CAAgCL,CAAA,CAAEK,CAAF,CAAhC,CAAnB,CACpB,OAAOP,cAAA,CAAcC,UAAd,CAAiBC,UAAjB,CAJyB,CAMpC,OAAO,SAAS,CAACD,CAAD,CAAIC,CAAJ,CAAO,CAEnBO,QAASA,GAAE,EAAG,CAAE,IAAKC,CAAAA,WAAL,CAAmBT,CAArB;AADdD,aAAA,CAAcC,CAAd,CAAiBC,CAAjB,CAEAD,EAAEU,CAAAA,SAAF,CAAoB,IAAN,GAAAT,CAAA,CAAaC,MAAOS,CAAAA,MAAP,CAAcV,CAAd,CAAb,EAAiCO,EAAGE,CAAAA,SAAH,CAAeT,CAAES,CAAAA,SAAjB,CAA4B,IAAIF,EAAjE,CAHK,CAP8B,CAAb,EAa5CN,OAAOU,CAAAA,cAAP,CAAsBf,OAAtB,CAA+B,YAA/B,CAA6C,CAAEgB,MAAO,CAAA,CAAT,CAA7C,CAEIC,OAAAA,CAAmC,QAAS,CAACC,MAAD,CAAS,CAErDD,QAASA,kBAAiB,CAACE,WAAD,CAAc,CACpC,MAAOD,OAAOE,CAAAA,IAAP,CAAY,IAAZ,CAAkBD,WAAlB,CAAP,EAAyC,IADL,CADxClB,SAAA,CAAUgB,iBAAV,CAA6BC,MAA7B,CAIAD,kBAAkBJ,CAAAA,SAAUQ,CAAAA,sBAA5B,CAAqDC,QAAS,CAACC,GAAD,CAAMC,UAAN,CAAkBC,UAAlB,CAA8B,CACpFC,UAAAA,CAAwB,IAAKC,CAAAA,iBAAL,EAAyBC,CAAAA,+BAAzB,CAAyDJ,UAAzD,CAAqEC,UAArE,CAC5B,KAAKI,CAAAA,aAAL,CAAmBN,GAAnB,CAAwBG,UAAxB,CACII;UAAAA,CAAgB,IAAKC,CAAAA,WAAL,CAAiBL,UAAjB,CAChBM,WAAAA,CAAiB,GACrB,KAAK,IAAIC,EAAI,CAAb,CAAoB,CAApB,CAAgBA,CAAhB,CAAuB,EAAEA,CAAzB,CAC2C,CAGvC,GAHIH,UAGJ,CAHoBE,UAGpB,EAFIT,GAAIW,CAAAA,MAAJ,CAAW,GAAX,CAEJ,CAAAF,UAAA,EAAkB,EAEtBT,IAAIW,CAAAA,MAAJ,CAAWJ,UAAX,CAXwF,CAa5F,OAAOb,kBAlB8C,CAAlB,CADnBnB,OAAAqC,CAAQ,oFAARA,CAoBJC,CAAAA,OAnBuB,CAoBvCpC,QAAQoC,CAAAA,OAAR,CAAkBnB,MArCmI;",
"sources":["node_modules/@zxing/library/cjs/core/oned/rss/expanded/decoders/AI01weightDecoder.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$zxing$library$cjs$core$oned$rss$expanded$decoders$AI01weightDecoder\"] = function(global,require,module,exports) {\n\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar AI01decoder_1 = require(\"./AI01decoder\");\nvar AI01weightDecoder = /** @class */ (function (_super) {\n    __extends(AI01weightDecoder, _super);\n    function AI01weightDecoder(information) {\n        return _super.call(this, information) || this;\n    }\n    AI01weightDecoder.prototype.encodeCompressedWeight = function (buf, currentPos, weightSize) {\n        var originalWeightNumeric = this.getGeneralDecoder().extractNumericValueFromBitArray(currentPos, weightSize);\n        this.addWeightCode(buf, originalWeightNumeric);\n        var weightNumeric = this.checkWeight(originalWeightNumeric);\n        var currentDivisor = 100000;\n        for (var i = 0; i < 5; ++i) {\n            if (weightNumeric / currentDivisor === 0) {\n                buf.append('0');\n            }\n            currentDivisor /= 10;\n        }\n        buf.append(weightNumeric);\n    };\n    return AI01weightDecoder;\n}(AI01decoder_1.default));\nexports.default = AI01weightDecoder;\n//# sourceMappingURL=AI01weightDecoder.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","defineProperty","value","AI01weightDecoder","_super","information","call","encodeCompressedWeight","AI01weightDecoder.prototype.encodeCompressedWeight","buf","currentPos","weightSize","originalWeightNumeric","getGeneralDecoder","extractNumericValueFromBitArray","addWeightCode","weightNumeric","checkWeight","currentDivisor","i","append","AI01decoder_1","default"]
}
