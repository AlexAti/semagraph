shadow$provide.module$node_modules$$zxing$library$cjs$core$datamatrix$detector$Detector=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});var WhiteRectangleDetector_1=require("module$node_modules$$zxing$library$cjs$core$common$detector$WhiteRectangleDetector"),DetectorResult_1=require("module$node_modules$$zxing$library$cjs$core$common$DetectorResult"),GridSamplerInstance_1=require("module$node_modules$$zxing$library$cjs$core$common$GridSamplerInstance"),
NotFoundException_1=require("module$node_modules$$zxing$library$cjs$core$NotFoundException"),ResultPoint_1=require("module$node_modules$$zxing$library$cjs$core$ResultPoint");global=function(){function Detector(image){this.image=image;this.rectangleDetector=new WhiteRectangleDetector_1.default(this.image)}Detector.prototype.detect=function(){var cornerPoints=this.rectangleDetector.detect(),points=this.detectSolid1(cornerPoints);points=this.detectSolid2(points);points[3]=this.correctTopRight(points);
if(!points[3])throw new NotFoundException_1.default;points=this.shiftToModuleCenter(points);cornerPoints=points[0];var bottomLeft=points[1],bottomRight=points[2];points=points[3];var dimensionTop=this.transitionsBetween(cornerPoints,points)+1,dimensionRight=this.transitionsBetween(bottomRight,points)+1;1===(dimensionTop&1)&&(dimensionTop+=1);1===(dimensionRight&1)&&(dimensionRight+=1);4*dimensionTop<7*dimensionRight&&4*dimensionRight<7*dimensionTop&&(dimensionTop=dimensionRight=Math.max(dimensionTop,
dimensionRight));dimensionTop=Detector.sampleGrid(this.image,cornerPoints,bottomLeft,bottomRight,points,dimensionTop,dimensionRight);return new DetectorResult_1.default(dimensionTop,[cornerPoints,bottomLeft,bottomRight,points])};Detector.shiftPoint=function(point,to,div){var x=(to.getX()-point.getX())/(div+1);to=(to.getY()-point.getY())/(div+1);return new ResultPoint_1.default(point.getX()+x,point.getY()+to)};Detector.moveAway=function(point,fromX,fromY){var x=point.getX();point=point.getY();return new ResultPoint_1.default(x<
fromX?x-1:x+1,point<fromY?point-1:point+1)};Detector.prototype.detectSolid1=function(cornerPoints){var pointA=cornerPoints[0],pointB=cornerPoints[1],pointC=cornerPoints[3];cornerPoints=cornerPoints[2];var trAB=this.transitionsBetween(pointA,pointB),trBC=this.transitionsBetween(pointB,pointC),trCD=this.transitionsBetween(pointC,cornerPoints),trDA=this.transitionsBetween(cornerPoints,pointA),points=[cornerPoints,pointA,pointB,pointC];trAB>trBC&&(trAB=trBC,points[0]=pointA,points[1]=pointB,points[2]=
pointC,points[3]=cornerPoints);trAB>trCD&&(trAB=trCD,points[0]=pointB,points[1]=pointC,points[2]=cornerPoints,points[3]=pointA);trAB>trDA&&(points[0]=pointC,points[1]=cornerPoints,points[2]=pointA,points[3]=pointB);return points};Detector.prototype.detectSolid2=function(points){var pointA=points[0],pointB=points[1],pointC=points[2],pointD=points[3],tr=this.transitionsBetween(pointA,pointD),pointBs=Detector.shiftPoint(pointB,pointC,4*(tr+1));tr=Detector.shiftPoint(pointC,pointB,4*(tr+1));pointBs=this.transitionsBetween(pointBs,
pointA);tr=this.transitionsBetween(tr,pointD);pointBs<tr?(points[0]=pointA,points[1]=pointB,points[2]=pointC,points[3]=pointD):(points[0]=pointB,points[1]=pointC,points[2]=pointD,points[3]=pointA);return points};Detector.prototype.correctTopRight=function(points){var pointA=points[0],pointB=points[1],pointC=points[2],pointD=points[3],trTop=this.transitionsBetween(pointA,pointD),trRight=this.transitionsBetween(pointB,pointD);points=Detector.shiftPoint(pointA,pointB,4*(trRight+1));var pointCs=Detector.shiftPoint(pointC,
pointB,4*(trTop+1));trTop=this.transitionsBetween(points,pointD);trRight=this.transitionsBetween(pointCs,pointD);pointC=new ResultPoint_1.default(pointD.getX()+(pointC.getX()-pointB.getX())/(trTop+1),pointD.getY()+(pointC.getY()-pointB.getY())/(trTop+1));pointA=new ResultPoint_1.default(pointD.getX()+(pointA.getX()-pointB.getX())/(trRight+1),pointD.getY()+(pointA.getY()-pointB.getY())/(trRight+1));if(!this.isValid(pointC))return this.isValid(pointA)?pointA:null;if(!this.isValid(pointA))return pointC;
pointB=this.transitionsBetween(points,pointC)+this.transitionsBetween(pointCs,pointC);points=this.transitionsBetween(points,pointA)+this.transitionsBetween(pointCs,pointA);return pointB>points?pointC:pointA};Detector.prototype.shiftToModuleCenter=function(points){var pointA=points[0],pointB=points[1],pointC=points[2],pointD=points[3];points=this.transitionsBetween(pointA,pointD)+1;var dimV=this.transitionsBetween(pointC,pointD)+1,pointAs=Detector.shiftPoint(pointA,pointB,4*dimV),pointCs=Detector.shiftPoint(pointC,
pointB,4*points);points=this.transitionsBetween(pointAs,pointD)+1;dimV=this.transitionsBetween(pointCs,pointD)+1;1===(points&1)&&(points+=1);1===(dimV&1)&&(dimV+=1);pointAs=(pointA.getX()+pointB.getX()+pointC.getX()+pointD.getX())/4;pointCs=(pointA.getY()+pointB.getY()+pointC.getY()+pointD.getY())/4;pointA=Detector.moveAway(pointA,pointAs,pointCs);pointB=Detector.moveAway(pointB,pointAs,pointCs);pointC=Detector.moveAway(pointC,pointAs,pointCs);pointD=Detector.moveAway(pointD,pointAs,pointCs);pointAs=
Detector.shiftPoint(pointA,pointB,4*dimV);pointAs=Detector.shiftPoint(pointAs,pointD,4*points);var pointBs=Detector.shiftPoint(pointB,pointA,4*dimV);pointBs=Detector.shiftPoint(pointBs,pointC,4*points);pointCs=Detector.shiftPoint(pointC,pointD,4*dimV);pointCs=Detector.shiftPoint(pointCs,pointB,4*points);pointB=Detector.shiftPoint(pointD,pointC,4*dimV);pointB=Detector.shiftPoint(pointB,pointA,4*points);return[pointAs,pointBs,pointCs,pointB]};Detector.prototype.isValid=function(p){return 0<=p.getX()&&
p.getX()<this.image.getWidth()&&0<p.getY()&&p.getY()<this.image.getHeight()};Detector.sampleGrid=function(image,topLeft,bottomLeft,bottomRight,topRight,dimensionX,dimensionY){return GridSamplerInstance_1.default.getInstance().sampleGrid(image,dimensionX,dimensionY,.5,.5,dimensionX-.5,.5,dimensionX-.5,dimensionY-.5,.5,dimensionY-.5,topLeft.getX(),topLeft.getY(),topRight.getX(),topRight.getY(),bottomRight.getX(),bottomRight.getY(),bottomLeft.getX(),bottomLeft.getY())};Detector.prototype.transitionsBetween=
function(from,to){var fromX=Math.trunc(from.getX()),fromY=Math.trunc(from.getY());from=Math.trunc(to.getX());to=Math.trunc(to.getY());var steep=Math.abs(to-fromY)>Math.abs(from-fromX);if(steep){var temp=fromX;fromX=fromY;fromY=temp;temp=from;from=to;to=temp}temp=Math.abs(from-fromX);for(var dy=Math.abs(to-fromY),error=-temp/2,ystep=fromY<to?1:-1,xstep=fromX<from?1:-1,transitions=0,inBlack=this.image.get(steep?fromY:fromX,steep?fromX:fromY);fromX!==from;fromX+=xstep){var isBlack=this.image.get(steep?
fromY:fromX,steep?fromX:fromY);isBlack!==inBlack&&(transitions++,inBlack=isBlack);error+=dy;if(0<error){if(fromY===to)break;fromY+=ystep;error-=temp}}return transitions};return Detector}();exports.default=global}
//# sourceMappingURL=module$node_modules$$zxing$library$cjs$core$datamatrix$detector$Detector.js.map
