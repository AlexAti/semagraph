{
"version":3,
"file":"module$node_modules$qrcode$lib$core$alphanumeric_data.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,qDAAA,CAA0E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAmBlHC,QAASA,iBAAiB,CAACC,IAAD,CAAO,CAC/B,IAAKC,CAAAA,IAAL,CAAYC,IAAKC,CAAAA,YACjB,KAAKH,CAAAA,IAAL,CAAYA,IAFmB,CAlBjC,MAAME,KAAON,OAAA,CAAQ,0CAAR,CAAb,CAWMQ,gBAAkB,+CAAA,CAAA,KAAA,CAAA,EAAA,CAYxBL,iBAAiBM,CAAAA,aAAjB,CAAiCC,QAAuB,CAACC,MAAD,CAAS,CAC/D,MAAO,GAAP,CAAYC,IAAKC,CAAAA,KAAL,CAAWF,MAAX,CAAoB,CAApB,CAAZ,CAA0CA,MAA1C,CAAmD,CAAnD,CAAqC,CAD0B,CAIjER,iBAAiBW,CAAAA,SAAUC,CAAAA,SAA3B,CAAuCC,QAAmB,EAAG,CAC3D,MAAO,KAAKZ,CAAAA,IAAKO,CAAAA,MAD0C,CAI7DR,iBAAiBW,CAAAA,SAAUL,CAAAA,aAA3B;AAA2CQ,QAAuB,EAAG,CACnE,MAAOd,iBAAiBM,CAAAA,aAAjB,CAA+B,IAAKL,CAAAA,IAAKO,CAAAA,MAAzC,CAD4D,CAIrER,iBAAiBW,CAAAA,SAAUI,CAAAA,KAA3B,CAAmCC,QAAe,CAACC,SAAD,CAAY,CAC5D,IAAIC,CAIJ,KAAKA,CAAL,CAAS,CAAT,CAAYA,CAAZ,CAAgB,CAAhB,EAAqB,IAAKjB,CAAAA,IAAKO,CAAAA,MAA/B,CAAuCU,CAAvC,EAA4C,CAA5C,CAA+C,CAE7C,IAAIC,MAAgD,EAAhDA,CAAQd,eAAgBe,CAAAA,OAAhB,CAAwB,IAAKnB,CAAAA,IAAL,CAAUiB,CAAV,CAAxB,CAGZC,MAAA,EAASd,eAAgBe,CAAAA,OAAhB,CAAwB,IAAKnB,CAAAA,IAAL,CAAUiB,CAAV,CAAc,CAAd,CAAxB,CAGTD,UAAUI,CAAAA,GAAV,CAAcF,KAAd,CAAqB,EAArB,CAR6C,CAa3C,IAAKlB,CAAAA,IAAKO,CAAAA,MAAd,CAAuB,CAAvB,EACES,SAAUI,CAAAA,GAAV,CAAchB,eAAgBe,CAAAA,OAAhB,CAAwB,IAAKnB,CAAAA,IAAL,CAAUiB,CAAV,CAAxB,CAAd,CAAqD,CAArD,CAnB0D,CAuB9DpB,OAAOC,CAAAA,OAAP,CAAiBC,gBA3DiG;",
"sources":["node_modules/qrcode/lib/core/alphanumeric-data.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$qrcode$lib$core$alphanumeric_data\"] = function(global,require,module,exports) {\nconst Mode = require('./mode')\n\n/**\n * Array of characters available in alphanumeric mode\n *\n * As per QR Code specification, to each character\n * is assigned a value from 0 to 44 which in this case coincides\n * with the array index\n *\n * @type {Array}\n */\nconst ALPHA_NUM_CHARS = [\n  '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n  'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',\n  'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',\n  ' ', '$', '%', '*', '+', '-', '.', '/', ':'\n]\n\nfunction AlphanumericData (data) {\n  this.mode = Mode.ALPHANUMERIC\n  this.data = data\n}\n\nAlphanumericData.getBitsLength = function getBitsLength (length) {\n  return 11 * Math.floor(length / 2) + 6 * (length % 2)\n}\n\nAlphanumericData.prototype.getLength = function getLength () {\n  return this.data.length\n}\n\nAlphanumericData.prototype.getBitsLength = function getBitsLength () {\n  return AlphanumericData.getBitsLength(this.data.length)\n}\n\nAlphanumericData.prototype.write = function write (bitBuffer) {\n  let i\n\n  // Input data characters are divided into groups of two characters\n  // and encoded as 11-bit binary codes.\n  for (i = 0; i + 2 <= this.data.length; i += 2) {\n    // The character value of the first character is multiplied by 45\n    let value = ALPHA_NUM_CHARS.indexOf(this.data[i]) * 45\n\n    // The character value of the second digit is added to the product\n    value += ALPHA_NUM_CHARS.indexOf(this.data[i + 1])\n\n    // The sum is then stored as 11-bit binary number\n    bitBuffer.put(value, 11)\n  }\n\n  // If the number of input data characters is not a multiple of two,\n  // the character value of the final character is encoded as a 6-bit binary number.\n  if (this.data.length % 2) {\n    bitBuffer.put(ALPHA_NUM_CHARS.indexOf(this.data[i]), 6)\n  }\n}\n\nmodule.exports = AlphanumericData\n\n};"],
"names":["shadow$provide","global","require","module","exports","AlphanumericData","data","mode","Mode","ALPHANUMERIC","ALPHA_NUM_CHARS","getBitsLength","AlphanumericData.getBitsLength","length","Math","floor","prototype","getLength","AlphanumericData.prototype.getLength","AlphanumericData.prototype.getBitsLength","write","AlphanumericData.prototype.write","bitBuffer","i","value","indexOf","put"]
}
