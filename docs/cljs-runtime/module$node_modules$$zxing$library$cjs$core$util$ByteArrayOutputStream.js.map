{
"version":3,
"file":"module$node_modules$$zxing$library$cjs$core$util$ByteArrayOutputStream.js",
"lineCount":7,
"mappings":"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",
"sources":["node_modules/@zxing/library/cjs/core/util/ByteArrayOutputStream.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$zxing$library$cjs$core$util$ByteArrayOutputStream\"] = function(global,require,module,exports) {\n\"use strict\";\n/*\n * Copyright (c) 1994, 2010, Oracle and/or its affiliates. All rights reserved.\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n *\n * This code is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License version 2 only, as\n * published by the Free Software Foundation.  Oracle designates this\n * particular file as subject to the \"Classpath\" exception as provided\n * by Oracle in the LICENSE file that accompanied this code.\n *\n * This code is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n * version 2 for more details (a copy is included in the LICENSE file that\n * accompanied this code).\n *\n * You should have received a copy of the GNU General Public License version\n * 2 along with this work; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n *\n * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n * or visit www.oracle.com if you need additional information or have any\n * questions.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// package java.io;\n// import java.util.Arrays;\nvar Arrays_1 = require(\"./Arrays\");\nvar OutputStream_1 = require(\"./OutputStream\");\nvar Integer_1 = require(\"./Integer\");\nvar IllegalArgumentException_1 = require(\"../IllegalArgumentException\");\nvar OutOfMemoryError_1 = require(\"../OutOfMemoryError\");\nvar System_1 = require(\"./System\");\nvar IndexOutOfBoundsException_1 = require(\"../IndexOutOfBoundsException\");\n/**\n * This class implements an output stream in which the data is\n * written into a byte array. The buffer automatically grows as data\n * is written to it.\n * The data can be retrieved using <code>toByteArray()</code> and\n * <code>toString()</code>.\n * <p>\n * Closing a <tt>ByteArrayOutputStream</tt> has no effect. The methods in\n * this class can be called after the stream has been closed without\n * generating an <tt>IOException</tt>.\n *\n * @author  Arthur van Hoff\n * @since   JDK1.0\n */\nvar ByteArrayOutputStream = /** @class */ (function (_super) {\n    __extends(ByteArrayOutputStream, _super);\n    /**\n     * Creates a new byte array output stream. The buffer capacity is\n     * initially 32 bytes, though its size increases if necessary.\n     */\n    // public constructor() {\n    //     this(32);\n    // }\n    /**\n     * Creates a new byte array output stream, with a buffer capacity of\n     * the specified size, in bytes.\n     *\n     * @param   size   the initial size.\n     * @exception  IllegalArgumentException if size is negative.\n     */\n    function ByteArrayOutputStream(size) {\n        if (size === void 0) { size = 32; }\n        var _this = _super.call(this) || this;\n        /**\n         * The number of valid bytes in the buffer.\n         */\n        _this.count = 0;\n        if (size < 0) {\n            throw new IllegalArgumentException_1.default('Negative initial size: '\n                + size);\n        }\n        _this.buf = new Uint8Array(size);\n        return _this;\n    }\n    /**\n     * Increases the capacity if necessary to ensure that it can hold\n     * at least the number of elements specified by the minimum\n     * capacity argument.\n     *\n     * @param minCapacity the desired minimum capacity\n     * @throws OutOfMemoryError if {@code minCapacity < 0}.  This is\n     * interpreted as a request for the unsatisfiably large capacity\n     * {@code (long) Integer.MAX_VALUE + (minCapacity - Integer.MAX_VALUE)}.\n     */\n    ByteArrayOutputStream.prototype.ensureCapacity = function (minCapacity) {\n        // overflow-conscious code\n        if (minCapacity - this.buf.length > 0)\n            this.grow(minCapacity);\n    };\n    /**\n     * Increases the capacity to ensure that it can hold at least the\n     * number of elements specified by the minimum capacity argument.\n     *\n     * @param minCapacity the desired minimum capacity\n     */\n    ByteArrayOutputStream.prototype.grow = function (minCapacity) {\n        // overflow-conscious code\n        var oldCapacity = this.buf.length;\n        var newCapacity = oldCapacity << 1;\n        if (newCapacity - minCapacity < 0)\n            newCapacity = minCapacity;\n        if (newCapacity < 0) {\n            if (minCapacity < 0) // overflow\n                throw new OutOfMemoryError_1.default();\n            newCapacity = Integer_1.default.MAX_VALUE;\n        }\n        this.buf = Arrays_1.default.copyOfUint8Array(this.buf, newCapacity);\n    };\n    /**\n     * Writes the specified byte to this byte array output stream.\n     *\n     * @param   b   the byte to be written.\n     */\n    ByteArrayOutputStream.prototype.write = function (b) {\n        this.ensureCapacity(this.count + 1);\n        this.buf[this.count] = /*(byte)*/ b;\n        this.count += 1;\n    };\n    /**\n     * Writes <code>len</code> bytes from the specified byte array\n     * starting at offset <code>off</code> to this byte array output stream.\n     *\n     * @param   b     the data.\n     * @param   off   the start offset in the data.\n     * @param   len   the number of bytes to write.\n     */\n    ByteArrayOutputStream.prototype.writeBytesOffset = function (b, off, len) {\n        if ((off < 0) || (off > b.length) || (len < 0) ||\n            ((off + len) - b.length > 0)) {\n            throw new IndexOutOfBoundsException_1.default();\n        }\n        this.ensureCapacity(this.count + len);\n        System_1.default.arraycopy(b, off, this.buf, this.count, len);\n        this.count += len;\n    };\n    /**\n     * Writes the complete contents of this byte array output stream to\n     * the specified output stream argument, as if by calling the output\n     * stream's write method using <code>out.write(buf, 0, count)</code>.\n     *\n     * @param      out   the output stream to which to write the data.\n     * @exception  IOException  if an I/O error occurs.\n     */\n    ByteArrayOutputStream.prototype.writeTo = function (out) {\n        out.writeBytesOffset(this.buf, 0, this.count);\n    };\n    /**\n     * Resets the <code>count</code> field of this byte array output\n     * stream to zero, so that all currently accumulated output in the\n     * output stream is discarded. The output stream can be used again,\n     * reusing the already allocated buffer space.\n     *\n     * @see     java.io.ByteArrayInputStream#count\n     */\n    ByteArrayOutputStream.prototype.reset = function () {\n        this.count = 0;\n    };\n    /**\n     * Creates a newly allocated byte array. Its size is the current\n     * size of this output stream and the valid contents of the buffer\n     * have been copied into it.\n     *\n     * @return  the current contents of this output stream, as a byte array.\n     * @see     java.io.ByteArrayOutputStream#size()\n     */\n    ByteArrayOutputStream.prototype.toByteArray = function () {\n        return Arrays_1.default.copyOfUint8Array(this.buf, this.count);\n    };\n    /**\n     * Returns the current size of the buffer.\n     *\n     * @return  the value of the <code>count</code> field, which is the number\n     *          of valid bytes in this output stream.\n     * @see     java.io.ByteArrayOutputStream#count\n     */\n    ByteArrayOutputStream.prototype.size = function () {\n        return this.count;\n    };\n    ByteArrayOutputStream.prototype.toString = function (param) {\n        if (!param) {\n            return this.toString_void();\n        }\n        if (typeof param === 'string') {\n            return this.toString_string(param);\n        }\n        return this.toString_number(param);\n    };\n    /**\n     * Converts the buffer's contents into a string decoding bytes using the\n     * platform's default character set. The length of the new <tt>String</tt>\n     * is a function of the character set, and hence may not be equal to the\n     * size of the buffer.\n     *\n     * <p> This method always replaces malformed-input and unmappable-character\n     * sequences with the default replacement string for the platform's\n     * default character set. The {@linkplain java.nio.charset.CharsetDecoder}\n     * class should be used when more control over the decoding process is\n     * required.\n     *\n     * @return String decoded from the buffer's contents.\n     * @since  JDK1.1\n     */\n    ByteArrayOutputStream.prototype.toString_void = function () {\n        return new String(this.buf /*, 0, this.count*/).toString();\n    };\n    /**\n     * Converts the buffer's contents into a string by decoding the bytes using\n     * the specified {@link java.nio.charset.Charset charsetName}. The length of\n     * the new <tt>String</tt> is a function of the charset, and hence may not be\n     * equal to the length of the byte array.\n     *\n     * <p> This method always replaces malformed-input and unmappable-character\n     * sequences with this charset's default replacement string. The {@link\n     * java.nio.charset.CharsetDecoder} class should be used when more control\n     * over the decoding process is required.\n     *\n     * @param  charsetName  the name of a supported\n     *              {@linkplain java.nio.charset.Charset </code>charset<code>}\n     * @return String decoded from the buffer's contents.\n     * @exception  UnsupportedEncodingException\n     *             If the named charset is not supported\n     * @since   JDK1.1\n     */\n    ByteArrayOutputStream.prototype.toString_string = function (charsetName) {\n        return new String(this.buf /*, 0, this.count, charsetName*/).toString();\n    };\n    /**\n     * Creates a newly allocated string. Its size is the current size of\n     * the output stream and the valid contents of the buffer have been\n     * copied into it. Each character <i>c</i> in the resulting string is\n     * constructed from the corresponding element <i>b</i> in the byte\n     * array such that:\n     * <blockquote><pre>\n     *     c == (char)(((hibyte &amp; 0xff) &lt;&lt; 8) | (b &amp; 0xff))\n     * </pre></blockquote>\n     *\n     * @deprecated This method does not properly convert bytes into characters.\n     * As of JDK&nbsp;1.1, the preferred way to do this is via the\n     * <code>toString(String enc)</code> method, which takes an encoding-name\n     * argument, or the <code>toString()</code> method, which uses the\n     * platform's default character encoding.\n     *\n     * @param      hibyte    the high byte of each resulting Unicode character.\n     * @return     the current contents of the output stream, as a string.\n     * @see        java.io.ByteArrayOutputStream#size()\n     * @see        java.io.ByteArrayOutputStream#toString(String)\n     * @see        java.io.ByteArrayOutputStream#toString()\n     */\n    // @Deprecated\n    ByteArrayOutputStream.prototype.toString_number = function (hibyte) {\n        return new String(this.buf /*, hibyte, 0, this.count*/).toString();\n    };\n    /**\n     * Closing a <tt>ByteArrayOutputStream</tt> has no effect. The methods in\n     * this class can be called after the stream has been closed without\n     * generating an <tt>IOException</tt>.\n     * <p>\n     *\n     * @throws IOException\n     */\n    ByteArrayOutputStream.prototype.close = function () {\n    };\n    return ByteArrayOutputStream;\n}(OutputStream_1.default));\nexports.default = ByteArrayOutputStream;\n//# sourceMappingURL=ByteArrayOutputStream.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","defineProperty","value","Arrays_1","OutputStream_1","Integer_1","IllegalArgumentException_1","OutOfMemoryError_1","System_1","IndexOutOfBoundsException_1","ByteArrayOutputStream","_super","size","_this","call","count","default","buf","Uint8Array","ensureCapacity","ByteArrayOutputStream.prototype.ensureCapacity","minCapacity","length","grow","ByteArrayOutputStream.prototype.grow","newCapacity","MAX_VALUE","copyOfUint8Array","write","ByteArrayOutputStream.prototype.write","writeBytesOffset","ByteArrayOutputStream.prototype.writeBytesOffset","off","len","arraycopy","writeTo","ByteArrayOutputStream.prototype.writeTo","out","reset","ByteArrayOutputStream.prototype.reset","toByteArray","ByteArrayOutputStream.prototype.toByteArray","ByteArrayOutputStream.prototype.size","toString","ByteArrayOutputStream.prototype.toString","param","toString_string","toString_number","toString_void","ByteArrayOutputStream.prototype.toString_void","String","ByteArrayOutputStream.prototype.toString_string","charsetName","ByteArrayOutputStream.prototype.toString_number","hibyte","close","ByteArrayOutputStream.prototype.close"]
}
