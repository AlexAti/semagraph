{
"version":3,
"file":"module$node_modules$encode_utf8$index.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,qCAAA,CAA0D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGlGD,MAAOC,CAAAA,OAAP,CAAiBC,QAAoB,CAACC,KAAD,CAAQ,CAI3C,IAHA,IAAIC,OAAS,EAAb,CACIC,KAAOF,KAAMG,CAAAA,MADjB,CAGSC,MAAQ,CAAjB,CAAoBA,KAApB,CAA4BF,IAA5B,CAAkCE,KAAA,EAAlC,CAA2C,CACzC,IAAIC,MAAQL,KAAMM,CAAAA,UAAN,CAAiBF,KAAjB,CAEZ,IAAa,KAAb,EAAIC,KAAJ,EAAgC,KAAhC,EAAuBA,KAAvB,EAA0CH,IAA1C,CAAiDE,KAAjD,CAAyD,CAAzD,CAA4D,CAC1D,IAAIG,OAASP,KAAMM,CAAAA,UAAN,CAAiBF,KAAjB,CAAyB,CAAzB,CAEC,MAAd,EAAIG,MAAJ,EAAkC,KAAlC,EAAwBA,MAAxB,GAEEF,KACA,CAD2B,IAC3B,EADSA,KACT,CADiB,KACjB,EADmCE,MACnC,CAD4C,KAC5C,CADqD,KACrD,CAAAH,KAAA,EAAS,CAHX,CAH0D,CAWhD,GAAZ,CAAIC,KAAJ,CACEJ,MAAOO,CAAAA,IAAP,CAAYH,KAAZ,CADF,CAMY,IAAZ,CAAIA,KAAJ,EACEJ,MAAOO,CAAAA,IAAP,CAAaH,KAAb,EAAsB,CAAtB,CAA2B,GAA3B,CACA,CAAAJ,MAAOO,CAAAA,IAAP,CAAaH,KAAb,CAAqB,EAArB,CAA2B,GAA3B,CAFF,EAOY,KAAZ,CAAIA,KAAJ,EAAgC,KAAhC;AAAuBA,KAAvB,EAAkD,KAAlD,CAA0CA,KAA1C,EACEJ,MAAOO,CAAAA,IAAP,CAAaH,KAAb,EAAsB,EAAtB,CAA4B,GAA5B,CAEA,CADAJ,MAAOO,CAAAA,IAAP,CAAcH,KAAd,EAAuB,CAAvB,CAA4B,EAA5B,CAAkC,GAAlC,CACA,CAAAJ,MAAOO,CAAAA,IAAP,CAAaH,KAAb,CAAqB,EAArB,CAA2B,GAA3B,CAHF,EAQa,KAAb,EAAIA,KAAJ,EAAiC,OAAjC,EAAwBA,KAAxB,EACEJ,MAAOO,CAAAA,IAAP,CAAaH,KAAb,EAAsB,EAAtB,CAA4B,GAA5B,CAGA,CAFAJ,MAAOO,CAAAA,IAAP,CAAcH,KAAd,EAAuB,EAAvB,CAA6B,EAA7B,CAAmC,GAAnC,CAEA,CADAJ,MAAOO,CAAAA,IAAP,CAAcH,KAAd,EAAuB,CAAvB,CAA4B,EAA5B,CAAkC,GAAlC,CACA,CAAAJ,MAAOO,CAAAA,IAAP,CAAaH,KAAb,CAAqB,EAArB,CAA2B,GAA3B,CAJF,EASAJ,MAAOO,CAAAA,IAAP,CAAY,GAAZ,CAAkB,GAAlB,CAAwB,GAAxB,CA5CyC,CA+C3C,MAA8BC,CAAvB,IAAIC,UAAJ,CAAeT,MAAf,CAAuBQ,EAAAA,MAnDa,CAHqD;",
"sources":["node_modules/encode-utf8/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$encode_utf8$index\"] = function(global,require,module,exports) {\n'use strict'\n\nmodule.exports = function encodeUtf8 (input) {\n  var result = []\n  var size = input.length\n\n  for (var index = 0; index < size; index++) {\n    var point = input.charCodeAt(index)\n\n    if (point >= 0xD800 && point <= 0xDBFF && size > index + 1) {\n      var second = input.charCodeAt(index + 1)\n\n      if (second >= 0xDC00 && second <= 0xDFFF) {\n        // https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n        point = (point - 0xD800) * 0x400 + second - 0xDC00 + 0x10000\n        index += 1\n      }\n    }\n\n    // US-ASCII\n    if (point < 0x80) {\n      result.push(point)\n      continue\n    }\n\n    // 2-byte UTF-8\n    if (point < 0x800) {\n      result.push((point >> 6) | 192)\n      result.push((point & 63) | 128)\n      continue\n    }\n\n    // 3-byte UTF-8\n    if (point < 0xD800 || (point >= 0xE000 && point < 0x10000)) {\n      result.push((point >> 12) | 224)\n      result.push(((point >> 6) & 63) | 128)\n      result.push((point & 63) | 128)\n      continue\n    }\n\n    // 4-byte UTF-8\n    if (point >= 0x10000 && point <= 0x10FFFF) {\n      result.push((point >> 18) | 240)\n      result.push(((point >> 12) & 63) | 128)\n      result.push(((point >> 6) & 63) | 128)\n      result.push((point & 63) | 128)\n      continue\n    }\n\n    // Invalid character\n    result.push(0xEF, 0xBF, 0xBD)\n  }\n\n  return new Uint8Array(result).buffer\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","module.exports","input","result","size","length","index","point","charCodeAt","second","push","buffer","Uint8Array"]
}
