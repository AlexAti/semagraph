{
"version":3,
"file":"module$node_modules$qrcode$lib$core$version.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/qrcode/lib/core/version.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$qrcode$lib$core$version\"] = function(global,require,module,exports) {\nconst Utils = require('./utils')\nconst ECCode = require('./error-correction-code')\nconst ECLevel = require('./error-correction-level')\nconst Mode = require('./mode')\nconst VersionCheck = require('./version-check')\n\n// Generator polynomial used to encode version information\nconst G18 = (1 << 12) | (1 << 11) | (1 << 10) | (1 << 9) | (1 << 8) | (1 << 5) | (1 << 2) | (1 << 0)\nconst G18_BCH = Utils.getBCHDigit(G18)\n\nfunction getBestVersionForDataLength (mode, length, errorCorrectionLevel) {\n  for (let currentVersion = 1; currentVersion <= 40; currentVersion++) {\n    if (length <= exports.getCapacity(currentVersion, errorCorrectionLevel, mode)) {\n      return currentVersion\n    }\n  }\n\n  return undefined\n}\n\nfunction getReservedBitsCount (mode, version) {\n  // Character count indicator + mode indicator bits\n  return Mode.getCharCountIndicator(mode, version) + 4\n}\n\nfunction getTotalBitsFromDataArray (segments, version) {\n  let totalBits = 0\n\n  segments.forEach(function (data) {\n    const reservedBits = getReservedBitsCount(data.mode, version)\n    totalBits += reservedBits + data.getBitsLength()\n  })\n\n  return totalBits\n}\n\nfunction getBestVersionForMixedData (segments, errorCorrectionLevel) {\n  for (let currentVersion = 1; currentVersion <= 40; currentVersion++) {\n    const length = getTotalBitsFromDataArray(segments, currentVersion)\n    if (length <= exports.getCapacity(currentVersion, errorCorrectionLevel, Mode.MIXED)) {\n      return currentVersion\n    }\n  }\n\n  return undefined\n}\n\n/**\n * Returns version number from a value.\n * If value is not a valid version, returns defaultValue\n *\n * @param  {Number|String} value        QR Code version\n * @param  {Number}        defaultValue Fallback value\n * @return {Number}                     QR Code version number\n */\nexports.from = function from (value, defaultValue) {\n  if (VersionCheck.isValid(value)) {\n    return parseInt(value, 10)\n  }\n\n  return defaultValue\n}\n\n/**\n * Returns how much data can be stored with the specified QR code version\n * and error correction level\n *\n * @param  {Number} version              QR Code version (1-40)\n * @param  {Number} errorCorrectionLevel Error correction level\n * @param  {Mode}   mode                 Data mode\n * @return {Number}                      Quantity of storable data\n */\nexports.getCapacity = function getCapacity (version, errorCorrectionLevel, mode) {\n  if (!VersionCheck.isValid(version)) {\n    throw new Error('Invalid QR Code version')\n  }\n\n  // Use Byte mode as default\n  if (typeof mode === 'undefined') mode = Mode.BYTE\n\n  // Total codewords for this QR code version (Data + Error correction)\n  const totalCodewords = Utils.getSymbolTotalCodewords(version)\n\n  // Total number of error correction codewords\n  const ecTotalCodewords = ECCode.getTotalCodewordsCount(version, errorCorrectionLevel)\n\n  // Total number of data codewords\n  const dataTotalCodewordsBits = (totalCodewords - ecTotalCodewords) * 8\n\n  if (mode === Mode.MIXED) return dataTotalCodewordsBits\n\n  const usableBits = dataTotalCodewordsBits - getReservedBitsCount(mode, version)\n\n  // Return max number of storable codewords\n  switch (mode) {\n    case Mode.NUMERIC:\n      return Math.floor((usableBits / 10) * 3)\n\n    case Mode.ALPHANUMERIC:\n      return Math.floor((usableBits / 11) * 2)\n\n    case Mode.KANJI:\n      return Math.floor(usableBits / 13)\n\n    case Mode.BYTE:\n    default:\n      return Math.floor(usableBits / 8)\n  }\n}\n\n/**\n * Returns the minimum version needed to contain the amount of data\n *\n * @param  {Segment} data                    Segment of data\n * @param  {Number} [errorCorrectionLevel=H] Error correction level\n * @param  {Mode} mode                       Data mode\n * @return {Number}                          QR Code version\n */\nexports.getBestVersionForData = function getBestVersionForData (data, errorCorrectionLevel) {\n  let seg\n\n  const ecl = ECLevel.from(errorCorrectionLevel, ECLevel.M)\n\n  if (Array.isArray(data)) {\n    if (data.length > 1) {\n      return getBestVersionForMixedData(data, ecl)\n    }\n\n    if (data.length === 0) {\n      return 1\n    }\n\n    seg = data[0]\n  } else {\n    seg = data\n  }\n\n  return getBestVersionForDataLength(seg.mode, seg.getLength(), ecl)\n}\n\n/**\n * Returns version information with relative error correction bits\n *\n * The version information is included in QR Code symbols of version 7 or larger.\n * It consists of an 18-bit sequence containing 6 data bits,\n * with 12 error correction bits calculated using the (18, 6) Golay code.\n *\n * @param  {Number} version QR Code version\n * @return {Number}         Encoded version info bits\n */\nexports.getEncodedBits = function getEncodedBits (version) {\n  if (!VersionCheck.isValid(version) || version < 7) {\n    throw new Error('Invalid QR Code version')\n  }\n\n  let d = version << 12\n\n  while (Utils.getBCHDigit(d) - G18_BCH >= 0) {\n    d ^= (G18 << (Utils.getBCHDigit(d) - G18_BCH))\n  }\n\n  return (version << 12) | d\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","getTotalBitsFromDataArray","segments","version","totalBits","forEach","data","reservedBits","Mode","getCharCountIndicator","mode","getBitsLength","Utils","ECCode","ECLevel","VersionCheck","G18_BCH","getBCHDigit","G18","from","exports.from","value","defaultValue","isValid","parseInt","getCapacity","exports.getCapacity","errorCorrectionLevel","Error","BYTE","totalCodewords","getSymbolTotalCodewords","ecTotalCodewords","getTotalCodewordsCount","dataTotalCodewordsBits","MIXED","usableBits","NUMERIC","Math","floor","ALPHANUMERIC","KANJI","getBestVersionForData","exports.getBestVersionForData","seg","ecl","M","Array","isArray","length","currentVersion","undefined","getLength","getEncodedBits","exports.getEncodedBits","d"]
}
