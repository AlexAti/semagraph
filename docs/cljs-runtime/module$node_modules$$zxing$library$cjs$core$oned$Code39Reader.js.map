{
"version":3,
"file":"module$node_modules$$zxing$library$cjs$core$oned$Code39Reader.js",
"lineCount":16,
"mappings":"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",
"sources":["node_modules/@zxing/library/cjs/core/oned/Code39Reader.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$zxing$library$cjs$core$oned$Code39Reader\"] = function(global,require,module,exports) {\n\"use strict\";\n/*\n * Copyright 2008 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/*namespace com.google.zxing.oned {*/\nvar BarcodeFormat_1 = require(\"../BarcodeFormat\");\nvar ChecksumException_1 = require(\"../ChecksumException\");\nvar FormatException_1 = require(\"../FormatException\");\nvar NotFoundException_1 = require(\"../NotFoundException\");\nvar OneDReader_1 = require(\"./OneDReader\");\nvar Result_1 = require(\"../Result\");\nvar ResultPoint_1 = require(\"../ResultPoint\");\n/**\n * <p>Decodes Code 39 barcodes. Supports \"Full ASCII Code 39\" if USE_CODE_39_EXTENDED_MODE is set.</p>\n *\n * @author Sean Owen\n * @see Code93Reader\n */\nvar Code39Reader = /** @class */ (function (_super) {\n    __extends(Code39Reader, _super);\n    /**\n     * Creates a reader that assumes all encoded data is data, and does not treat the final\n     * character as a check digit. It will not decoded \"extended Code 39\" sequences.\n     */\n    // public Code39Reader() {\n    //   this(false);\n    // }\n    /**\n     * Creates a reader that can be configured to check the last character as a check digit.\n     * It will not decoded \"extended Code 39\" sequences.\n     *\n     * @param usingCheckDigit if true, treat the last data character as a check digit, not\n     * data, and verify that the checksum passes.\n     */\n    // public Code39Reader(boolean usingCheckDigit) {\n    //   this(usingCheckDigit, false);\n    // }\n    /**\n     * Creates a reader that can be configured to check the last character as a check digit,\n     * or optionally attempt to decode \"extended Code 39\" sequences that are used to encode\n     * the full ASCII character set.\n     *\n     * @param usingCheckDigit if true, treat the last data character as a check digit, not\n     * data, and verify that the checksum passes.\n     * @param extendedMode if true, will attempt to decode extended Code 39 sequences in the\n     * text.\n     */\n    function Code39Reader(usingCheckDigit, extendedMode) {\n        if (usingCheckDigit === void 0) { usingCheckDigit = false; }\n        if (extendedMode === void 0) { extendedMode = false; }\n        var _this = _super.call(this) || this;\n        _this.usingCheckDigit = usingCheckDigit;\n        _this.extendedMode = extendedMode;\n        _this.decodeRowResult = '';\n        _this.counters = new Int32Array(9);\n        return _this;\n    }\n    Code39Reader.prototype.decodeRow = function (rowNumber, row, hints) {\n        var e_1, _a, e_2, _b;\n        var theCounters = this.counters;\n        theCounters.fill(0);\n        this.decodeRowResult = '';\n        var start = Code39Reader.findAsteriskPattern(row, theCounters);\n        // Read off white space\n        var nextStart = row.getNextSet(start[1]);\n        var end = row.getSize();\n        var decodedChar;\n        var lastStart;\n        do {\n            Code39Reader.recordPattern(row, nextStart, theCounters);\n            var pattern = Code39Reader.toNarrowWidePattern(theCounters);\n            if (pattern < 0) {\n                throw new NotFoundException_1.default();\n            }\n            decodedChar = Code39Reader.patternToChar(pattern);\n            this.decodeRowResult += decodedChar;\n            lastStart = nextStart;\n            try {\n                for (var theCounters_1 = (e_1 = void 0, __values(theCounters)), theCounters_1_1 = theCounters_1.next(); !theCounters_1_1.done; theCounters_1_1 = theCounters_1.next()) {\n                    var counter = theCounters_1_1.value;\n                    nextStart += counter;\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (theCounters_1_1 && !theCounters_1_1.done && (_a = theCounters_1.return)) _a.call(theCounters_1);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n            // Read off white space\n            nextStart = row.getNextSet(nextStart);\n        } while (decodedChar !== '*');\n        this.decodeRowResult = this.decodeRowResult.substring(0, this.decodeRowResult.length - 1); // remove asterisk\n        // Look for whitespace after pattern:\n        var lastPatternSize = 0;\n        try {\n            for (var theCounters_2 = __values(theCounters), theCounters_2_1 = theCounters_2.next(); !theCounters_2_1.done; theCounters_2_1 = theCounters_2.next()) {\n                var counter = theCounters_2_1.value;\n                lastPatternSize += counter;\n            }\n        }\n        catch (e_2_1) { e_2 = { error: e_2_1 }; }\n        finally {\n            try {\n                if (theCounters_2_1 && !theCounters_2_1.done && (_b = theCounters_2.return)) _b.call(theCounters_2);\n            }\n            finally { if (e_2) throw e_2.error; }\n        }\n        var whiteSpaceAfterEnd = nextStart - lastStart - lastPatternSize;\n        // If 50% of last pattern size, following last pattern, is not whitespace, fail\n        // (but if it's whitespace to the very end of the image, that's OK)\n        if (nextStart !== end && (whiteSpaceAfterEnd * 2) < lastPatternSize) {\n            throw new NotFoundException_1.default();\n        }\n        if (this.usingCheckDigit) {\n            var max = this.decodeRowResult.length - 1;\n            var total = 0;\n            for (var i = 0; i < max; i++) {\n                total += Code39Reader.ALPHABET_STRING.indexOf(this.decodeRowResult.charAt(i));\n            }\n            if (this.decodeRowResult.charAt(max) !== Code39Reader.ALPHABET_STRING.charAt(total % 43)) {\n                throw new ChecksumException_1.default();\n            }\n            this.decodeRowResult = this.decodeRowResult.substring(0, max);\n        }\n        if (this.decodeRowResult.length === 0) {\n            // false positive\n            throw new NotFoundException_1.default();\n        }\n        var resultString;\n        if (this.extendedMode) {\n            resultString = Code39Reader.decodeExtended(this.decodeRowResult);\n        }\n        else {\n            resultString = this.decodeRowResult;\n        }\n        var left = (start[1] + start[0]) / 2.0;\n        var right = lastStart + lastPatternSize / 2.0;\n        return new Result_1.default(resultString, null, 0, [new ResultPoint_1.default(left, rowNumber), new ResultPoint_1.default(right, rowNumber)], BarcodeFormat_1.default.CODE_39, new Date().getTime());\n    };\n    Code39Reader.findAsteriskPattern = function (row, counters) {\n        var width = row.getSize();\n        var rowOffset = row.getNextSet(0);\n        var counterPosition = 0;\n        var patternStart = rowOffset;\n        var isWhite = false;\n        var patternLength = counters.length;\n        for (var i = rowOffset; i < width; i++) {\n            if (row.get(i) !== isWhite) {\n                counters[counterPosition]++;\n            }\n            else {\n                if (counterPosition === patternLength - 1) {\n                    // Look for whitespace before start pattern, >= 50% of width of start pattern\n                    if (this.toNarrowWidePattern(counters) === Code39Reader.ASTERISK_ENCODING &&\n                        row.isRange(Math.max(0, patternStart - Math.floor((i - patternStart) / 2)), patternStart, false)) {\n                        return [patternStart, i];\n                    }\n                    patternStart += counters[0] + counters[1];\n                    counters.copyWithin(0, 2, 2 + counterPosition - 1);\n                    counters[counterPosition - 1] = 0;\n                    counters[counterPosition] = 0;\n                    counterPosition--;\n                }\n                else {\n                    counterPosition++;\n                }\n                counters[counterPosition] = 1;\n                isWhite = !isWhite;\n            }\n        }\n        throw new NotFoundException_1.default();\n    };\n    // For efficiency, returns -1 on failure. Not throwing here saved as many as 700 exceptions\n    // per image when using some of our blackbox images.\n    Code39Reader.toNarrowWidePattern = function (counters) {\n        var e_3, _a;\n        var numCounters = counters.length;\n        var maxNarrowCounter = 0;\n        var wideCounters;\n        do {\n            var minCounter = 0x7fffffff;\n            try {\n                for (var counters_1 = (e_3 = void 0, __values(counters)), counters_1_1 = counters_1.next(); !counters_1_1.done; counters_1_1 = counters_1.next()) {\n                    var counter = counters_1_1.value;\n                    if (counter < minCounter && counter > maxNarrowCounter) {\n                        minCounter = counter;\n                    }\n                }\n            }\n            catch (e_3_1) { e_3 = { error: e_3_1 }; }\n            finally {\n                try {\n                    if (counters_1_1 && !counters_1_1.done && (_a = counters_1.return)) _a.call(counters_1);\n                }\n                finally { if (e_3) throw e_3.error; }\n            }\n            maxNarrowCounter = minCounter;\n            wideCounters = 0;\n            var totalWideCountersWidth = 0;\n            var pattern = 0;\n            for (var i = 0; i < numCounters; i++) {\n                var counter = counters[i];\n                if (counter > maxNarrowCounter) {\n                    pattern |= 1 << (numCounters - 1 - i);\n                    wideCounters++;\n                    totalWideCountersWidth += counter;\n                }\n            }\n            if (wideCounters === 3) {\n                // Found 3 wide counters, but are they close enough in width?\n                // We can perform a cheap, conservative check to see if any individual\n                // counter is more than 1.5 times the average:\n                for (var i = 0; i < numCounters && wideCounters > 0; i++) {\n                    var counter = counters[i];\n                    if (counter > maxNarrowCounter) {\n                        wideCounters--;\n                        // totalWideCountersWidth = 3 * average, so this checks if counter >= 3/2 * average\n                        if ((counter * 2) >= totalWideCountersWidth) {\n                            return -1;\n                        }\n                    }\n                }\n                return pattern;\n            }\n        } while (wideCounters > 3);\n        return -1;\n    };\n    Code39Reader.patternToChar = function (pattern) {\n        for (var i = 0; i < Code39Reader.CHARACTER_ENCODINGS.length; i++) {\n            if (Code39Reader.CHARACTER_ENCODINGS[i] === pattern) {\n                return Code39Reader.ALPHABET_STRING.charAt(i);\n            }\n        }\n        if (pattern === Code39Reader.ASTERISK_ENCODING) {\n            return '*';\n        }\n        throw new NotFoundException_1.default();\n    };\n    Code39Reader.decodeExtended = function (encoded) {\n        var length = encoded.length;\n        var decoded = '';\n        for (var i = 0; i < length; i++) {\n            var c = encoded.charAt(i);\n            if (c === '+' || c === '$' || c === '%' || c === '/') {\n                var next = encoded.charAt(i + 1);\n                var decodedChar = '\\0';\n                switch (c) {\n                    case '+':\n                        // +A to +Z map to a to z\n                        if (next >= 'A' && next <= 'Z') {\n                            decodedChar = String.fromCharCode(next.charCodeAt(0) + 32);\n                        }\n                        else {\n                            throw new FormatException_1.default();\n                        }\n                        break;\n                    case '$':\n                        // $A to $Z map to control codes SH to SB\n                        if (next >= 'A' && next <= 'Z') {\n                            decodedChar = String.fromCharCode(next.charCodeAt(0) - 64);\n                        }\n                        else {\n                            throw new FormatException_1.default();\n                        }\n                        break;\n                    case '%':\n                        // %A to %E map to control codes ESC to US\n                        if (next >= 'A' && next <= 'E') {\n                            decodedChar = String.fromCharCode(next.charCodeAt(0) - 38);\n                        }\n                        else if (next >= 'F' && next <= 'J') {\n                            decodedChar = String.fromCharCode(next.charCodeAt(0) - 11);\n                        }\n                        else if (next >= 'K' && next <= 'O') {\n                            decodedChar = String.fromCharCode(next.charCodeAt(0) + 16);\n                        }\n                        else if (next >= 'P' && next <= 'T') {\n                            decodedChar = String.fromCharCode(next.charCodeAt(0) + 43);\n                        }\n                        else if (next === 'U') {\n                            decodedChar = '\\0';\n                        }\n                        else if (next === 'V') {\n                            decodedChar = '@';\n                        }\n                        else if (next === 'W') {\n                            decodedChar = '`';\n                        }\n                        else if (next === 'X' || next === 'Y' || next === 'Z') {\n                            decodedChar = '\\x7f';\n                        }\n                        else {\n                            throw new FormatException_1.default();\n                        }\n                        break;\n                    case '/':\n                        // /A to /O map to ! to , and /Z maps to :\n                        if (next >= 'A' && next <= 'O') {\n                            decodedChar = String.fromCharCode(next.charCodeAt(0) - 32);\n                        }\n                        else if (next === 'Z') {\n                            decodedChar = ':';\n                        }\n                        else {\n                            throw new FormatException_1.default();\n                        }\n                        break;\n                }\n                decoded += decodedChar;\n                // bump up i again since we read two characters\n                i++;\n            }\n            else {\n                decoded += c;\n            }\n        }\n        return decoded;\n    };\n    Code39Reader.ALPHABET_STRING = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%';\n    /**\n     * These represent the encodings of characters, as patterns of wide and narrow bars.\n     * The 9 least-significant bits of each int correspond to the pattern of wide and narrow,\n     * with 1s representing \"wide\" and 0s representing narrow.\n     */\n    Code39Reader.CHARACTER_ENCODINGS = [\n        0x034, 0x121, 0x061, 0x160, 0x031, 0x130, 0x070, 0x025, 0x124, 0x064,\n        0x109, 0x049, 0x148, 0x019, 0x118, 0x058, 0x00D, 0x10C, 0x04C, 0x01C,\n        0x103, 0x043, 0x142, 0x013, 0x112, 0x052, 0x007, 0x106, 0x046, 0x016,\n        0x181, 0x0C1, 0x1C0, 0x091, 0x190, 0x0D0, 0x085, 0x184, 0x0C4, 0x0A8,\n        0x0A2, 0x08A, 0x02A // /-%\n    ];\n    Code39Reader.ASTERISK_ENCODING = 0x094;\n    return Code39Reader;\n}(OneDReader_1.default));\nexports.default = Code39Reader;\n//# sourceMappingURL=Code39Reader.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__values","o","s","Symbol","iterator","m","i","call","length","next","value","done","TypeError","defineProperty","BarcodeFormat_1","ChecksumException_1","FormatException_1","NotFoundException_1","OneDReader_1","Result_1","ResultPoint_1","Code39Reader","_super","usingCheckDigit","extendedMode","_this","decodeRowResult","counters","Int32Array","decodeRow","Code39Reader.prototype.decodeRow","rowNumber","row","hints","e_1","_a","_b","theCounters","fill","start","findAsteriskPattern","nextStart","getNextSet","end","getSize","recordPattern","pattern","toNarrowWidePattern","default","decodedChar","patternToChar","lastStart","theCounters_1","theCounters_1_1","counter","e_1_1","error","return","substring","lastPatternSize","theCounters_2","theCounters_2_1","e_2_1","e_2","max","total","ALPHABET_STRING","indexOf","charAt","resultString","decodeExtended","right","CODE_39","getTime","Date","Code39Reader.findAsteriskPattern","width","rowOffset","counterPosition","patternStart","isWhite","patternLength","get","ASTERISK_ENCODING","isRange","Math","floor","copyWithin","Code39Reader.toNarrowWidePattern","e_3","numCounters","maxNarrowCounter","minCounter","counters_1","counters_1_1","e_3_1","totalWideCountersWidth","wideCounters","Code39Reader.patternToChar","CHARACTER_ENCODINGS","Code39Reader.decodeExtended","encoded","decoded","c","String","fromCharCode","charCodeAt"]
}
