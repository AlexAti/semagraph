{
"version":3,
"file":"module$node_modules$$zxing$library$cjs$core$common$BitMatrix.js",
"lineCount":15,
"mappings":"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",
"sources":["node_modules/@zxing/library/cjs/core/common/BitMatrix.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$zxing$library$cjs$core$common$BitMatrix\"] = function(global,require,module,exports) {\n\"use strict\";\n/*\n * Copyright 2007 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/*namespace com.google.zxing.common {*/\n/*import java.util.Arrays;*/\nvar BitArray_1 = require(\"./BitArray\");\nvar System_1 = require(\"../util/System\");\nvar Arrays_1 = require(\"../util/Arrays\");\nvar StringBuilder_1 = require(\"../util/StringBuilder\");\nvar IllegalArgumentException_1 = require(\"../IllegalArgumentException\");\n/**\n * <p>Represents a 2D matrix of bits. In function arguments below, and throughout the common\n * module, x is the column position, and y is the row position. The ordering is always x, y.\n * The origin is at the top-left.</p>\n *\n * <p>Internally the bits are represented in a 1-D array of 32-bit ints. However, each row begins\n * with a new int. This is done intentionally so that we can copy out a row into a BitArray very\n * efficiently.</p>\n *\n * <p>The ordering of bits is row-major. Within each int, the least significant bits are used first,\n * meaning they represent lower x values. This is compatible with BitArray's implementation.</p>\n *\n * @author Sean Owen\n * @author dswitkin@google.com (Daniel Switkin)\n */\nvar BitMatrix /*implements Cloneable*/ = /** @class */ (function () {\n    /**\n     * Creates an empty square {@link BitMatrix}.\n     *\n     * @param dimension height and width\n     */\n    // public constructor(dimension: number /*int*/) {\n    //   this(dimension, dimension)\n    // }\n    /**\n     * Creates an empty {@link BitMatrix}.\n     *\n     * @param width bit matrix width\n     * @param height bit matrix height\n     */\n    // public constructor(width: number /*int*/, height: number /*int*/) {\n    //   if (width < 1 || height < 1) {\n    //     throw new IllegalArgumentException(\"Both dimensions must be greater than 0\")\n    //   }\n    //   this.width = width\n    //   this.height = height\n    //   this.rowSize = (width + 31) / 32\n    //   bits = new int[rowSize * height];\n    // }\n    function BitMatrix(width /*int*/, height /*int*/, rowSize /*int*/, bits) {\n        this.width = width;\n        this.height = height;\n        this.rowSize = rowSize;\n        this.bits = bits;\n        if (undefined === height || null === height) {\n            height = width;\n        }\n        this.height = height;\n        if (width < 1 || height < 1) {\n            throw new IllegalArgumentException_1.default('Both dimensions must be greater than 0');\n        }\n        if (undefined === rowSize || null === rowSize) {\n            rowSize = Math.floor((width + 31) / 32);\n        }\n        this.rowSize = rowSize;\n        if (undefined === bits || null === bits) {\n            this.bits = new Int32Array(this.rowSize * this.height);\n        }\n    }\n    /**\n     * Interprets a 2D array of booleans as a {@link BitMatrix}, where \"true\" means an \"on\" bit.\n     *\n     * @function parse\n     * @param image bits of the image, as a row-major 2D array. Elements are arrays representing rows\n     * @return {@link BitMatrix} representation of image\n     */\n    BitMatrix.parseFromBooleanArray = function (image) {\n        var height = image.length;\n        var width = image[0].length;\n        var bits = new BitMatrix(width, height);\n        for (var i = 0; i < height; i++) {\n            var imageI = image[i];\n            for (var j = 0; j < width; j++) {\n                if (imageI[j]) {\n                    bits.set(j, i);\n                }\n            }\n        }\n        return bits;\n    };\n    /**\n     *\n     * @function parse\n     * @param stringRepresentation\n     * @param setString\n     * @param unsetString\n     */\n    BitMatrix.parseFromString = function (stringRepresentation, setString, unsetString) {\n        if (stringRepresentation === null) {\n            throw new IllegalArgumentException_1.default('stringRepresentation cannot be null');\n        }\n        var bits = new Array(stringRepresentation.length);\n        var bitsPos = 0;\n        var rowStartPos = 0;\n        var rowLength = -1;\n        var nRows = 0;\n        var pos = 0;\n        while (pos < stringRepresentation.length) {\n            if (stringRepresentation.charAt(pos) === '\\n' ||\n                stringRepresentation.charAt(pos) === '\\r') {\n                if (bitsPos > rowStartPos) {\n                    if (rowLength === -1) {\n                        rowLength = bitsPos - rowStartPos;\n                    }\n                    else if (bitsPos - rowStartPos !== rowLength) {\n                        throw new IllegalArgumentException_1.default('row lengths do not match');\n                    }\n                    rowStartPos = bitsPos;\n                    nRows++;\n                }\n                pos++;\n            }\n            else if (stringRepresentation.substring(pos, pos + setString.length) === setString) {\n                pos += setString.length;\n                bits[bitsPos] = true;\n                bitsPos++;\n            }\n            else if (stringRepresentation.substring(pos, pos + unsetString.length) === unsetString) {\n                pos += unsetString.length;\n                bits[bitsPos] = false;\n                bitsPos++;\n            }\n            else {\n                throw new IllegalArgumentException_1.default('illegal character encountered: ' + stringRepresentation.substring(pos));\n            }\n        }\n        // no EOL at end?\n        if (bitsPos > rowStartPos) {\n            if (rowLength === -1) {\n                rowLength = bitsPos - rowStartPos;\n            }\n            else if (bitsPos - rowStartPos !== rowLength) {\n                throw new IllegalArgumentException_1.default('row lengths do not match');\n            }\n            nRows++;\n        }\n        var matrix = new BitMatrix(rowLength, nRows);\n        for (var i = 0; i < bitsPos; i++) {\n            if (bits[i]) {\n                matrix.set(Math.floor(i % rowLength), Math.floor(i / rowLength));\n            }\n        }\n        return matrix;\n    };\n    /**\n     * <p>Gets the requested bit, where true means black.</p>\n     *\n     * @param x The horizontal component (i.e. which column)\n     * @param y The vertical component (i.e. which row)\n     * @return value of given bit in matrix\n     */\n    BitMatrix.prototype.get = function (x /*int*/, y /*int*/) {\n        var offset = y * this.rowSize + Math.floor(x / 32);\n        return ((this.bits[offset] >>> (x & 0x1f)) & 1) !== 0;\n    };\n    /**\n     * <p>Sets the given bit to true.</p>\n     *\n     * @param x The horizontal component (i.e. which column)\n     * @param y The vertical component (i.e. which row)\n     */\n    BitMatrix.prototype.set = function (x /*int*/, y /*int*/) {\n        var offset = y * this.rowSize + Math.floor(x / 32);\n        this.bits[offset] |= (1 << (x & 0x1f)) & 0xFFFFFFFF;\n    };\n    BitMatrix.prototype.unset = function (x /*int*/, y /*int*/) {\n        var offset = y * this.rowSize + Math.floor(x / 32);\n        this.bits[offset] &= ~((1 << (x & 0x1f)) & 0xFFFFFFFF);\n    };\n    /**\n     * <p>Flips the given bit.</p>\n     *\n     * @param x The horizontal component (i.e. which column)\n     * @param y The vertical component (i.e. which row)\n     */\n    BitMatrix.prototype.flip = function (x /*int*/, y /*int*/) {\n        var offset = y * this.rowSize + Math.floor(x / 32);\n        this.bits[offset] ^= ((1 << (x & 0x1f)) & 0xFFFFFFFF);\n    };\n    /**\n     * Exclusive-or (XOR): Flip the bit in this {@code BitMatrix} if the corresponding\n     * mask bit is set.\n     *\n     * @param mask XOR mask\n     */\n    BitMatrix.prototype.xor = function (mask) {\n        if (this.width !== mask.getWidth() || this.height !== mask.getHeight()\n            || this.rowSize !== mask.getRowSize()) {\n            throw new IllegalArgumentException_1.default('input matrix dimensions do not match');\n        }\n        var rowArray = new BitArray_1.default(Math.floor(this.width / 32) + 1);\n        var rowSize = this.rowSize;\n        var bits = this.bits;\n        for (var y = 0, height = this.height; y < height; y++) {\n            var offset = y * rowSize;\n            var row = mask.getRow(y, rowArray).getBitArray();\n            for (var x = 0; x < rowSize; x++) {\n                bits[offset + x] ^= row[x];\n            }\n        }\n    };\n    /**\n     * Clears all bits (sets to false).\n     */\n    BitMatrix.prototype.clear = function () {\n        var bits = this.bits;\n        var max = bits.length;\n        for (var i = 0; i < max; i++) {\n            bits[i] = 0;\n        }\n    };\n    /**\n     * <p>Sets a square region of the bit matrix to true.</p>\n     *\n     * @param left The horizontal position to begin at (inclusive)\n     * @param top The vertical position to begin at (inclusive)\n     * @param width The width of the region\n     * @param height The height of the region\n     */\n    BitMatrix.prototype.setRegion = function (left /*int*/, top /*int*/, width /*int*/, height /*int*/) {\n        if (top < 0 || left < 0) {\n            throw new IllegalArgumentException_1.default('Left and top must be nonnegative');\n        }\n        if (height < 1 || width < 1) {\n            throw new IllegalArgumentException_1.default('Height and width must be at least 1');\n        }\n        var right = left + width;\n        var bottom = top + height;\n        if (bottom > this.height || right > this.width) {\n            throw new IllegalArgumentException_1.default('The region must fit inside the matrix');\n        }\n        var rowSize = this.rowSize;\n        var bits = this.bits;\n        for (var y = top; y < bottom; y++) {\n            var offset = y * rowSize;\n            for (var x = left; x < right; x++) {\n                bits[offset + Math.floor(x / 32)] |= ((1 << (x & 0x1f)) & 0xFFFFFFFF);\n            }\n        }\n    };\n    /**\n     * A fast method to retrieve one row of data from the matrix as a BitArray.\n     *\n     * @param y The row to retrieve\n     * @param row An optional caller-allocated BitArray, will be allocated if null or too small\n     * @return The resulting BitArray - this reference should always be used even when passing\n     *         your own row\n     */\n    BitMatrix.prototype.getRow = function (y /*int*/, row) {\n        if (row === null || row === undefined || row.getSize() < this.width) {\n            row = new BitArray_1.default(this.width);\n        }\n        else {\n            row.clear();\n        }\n        var rowSize = this.rowSize;\n        var bits = this.bits;\n        var offset = y * rowSize;\n        for (var x = 0; x < rowSize; x++) {\n            row.setBulk(x * 32, bits[offset + x]);\n        }\n        return row;\n    };\n    /**\n     * @param y row to set\n     * @param row {@link BitArray} to copy from\n     */\n    BitMatrix.prototype.setRow = function (y /*int*/, row) {\n        System_1.default.arraycopy(row.getBitArray(), 0, this.bits, y * this.rowSize, this.rowSize);\n    };\n    /**\n     * Modifies this {@code BitMatrix} to represent the same but rotated 180 degrees\n     */\n    BitMatrix.prototype.rotate180 = function () {\n        var width = this.getWidth();\n        var height = this.getHeight();\n        var topRow = new BitArray_1.default(width);\n        var bottomRow = new BitArray_1.default(width);\n        for (var i = 0, length_1 = Math.floor((height + 1) / 2); i < length_1; i++) {\n            topRow = this.getRow(i, topRow);\n            bottomRow = this.getRow(height - 1 - i, bottomRow);\n            topRow.reverse();\n            bottomRow.reverse();\n            this.setRow(i, bottomRow);\n            this.setRow(height - 1 - i, topRow);\n        }\n    };\n    /**\n     * This is useful in detecting the enclosing rectangle of a 'pure' barcode.\n     *\n     * @return {@code left,top,width,height} enclosing rectangle of all 1 bits, or null if it is all white\n     */\n    BitMatrix.prototype.getEnclosingRectangle = function () {\n        var width = this.width;\n        var height = this.height;\n        var rowSize = this.rowSize;\n        var bits = this.bits;\n        var left = width;\n        var top = height;\n        var right = -1;\n        var bottom = -1;\n        for (var y = 0; y < height; y++) {\n            for (var x32 = 0; x32 < rowSize; x32++) {\n                var theBits = bits[y * rowSize + x32];\n                if (theBits !== 0) {\n                    if (y < top) {\n                        top = y;\n                    }\n                    if (y > bottom) {\n                        bottom = y;\n                    }\n                    if (x32 * 32 < left) {\n                        var bit = 0;\n                        while (((theBits << (31 - bit)) & 0xFFFFFFFF) === 0) {\n                            bit++;\n                        }\n                        if ((x32 * 32 + bit) < left) {\n                            left = x32 * 32 + bit;\n                        }\n                    }\n                    if (x32 * 32 + 31 > right) {\n                        var bit = 31;\n                        while ((theBits >>> bit) === 0) {\n                            bit--;\n                        }\n                        if ((x32 * 32 + bit) > right) {\n                            right = x32 * 32 + bit;\n                        }\n                    }\n                }\n            }\n        }\n        if (right < left || bottom < top) {\n            return null;\n        }\n        return Int32Array.from([left, top, right - left + 1, bottom - top + 1]);\n    };\n    /**\n     * This is useful in detecting a corner of a 'pure' barcode.\n     *\n     * @return {@code x,y} coordinate of top-left-most 1 bit, or null if it is all white\n     */\n    BitMatrix.prototype.getTopLeftOnBit = function () {\n        var rowSize = this.rowSize;\n        var bits = this.bits;\n        var bitsOffset = 0;\n        while (bitsOffset < bits.length && bits[bitsOffset] === 0) {\n            bitsOffset++;\n        }\n        if (bitsOffset === bits.length) {\n            return null;\n        }\n        var y = bitsOffset / rowSize;\n        var x = (bitsOffset % rowSize) * 32;\n        var theBits = bits[bitsOffset];\n        var bit = 0;\n        while (((theBits << (31 - bit)) & 0xFFFFFFFF) === 0) {\n            bit++;\n        }\n        x += bit;\n        return Int32Array.from([x, y]);\n    };\n    BitMatrix.prototype.getBottomRightOnBit = function () {\n        var rowSize = this.rowSize;\n        var bits = this.bits;\n        var bitsOffset = bits.length - 1;\n        while (bitsOffset >= 0 && bits[bitsOffset] === 0) {\n            bitsOffset--;\n        }\n        if (bitsOffset < 0) {\n            return null;\n        }\n        var y = Math.floor(bitsOffset / rowSize);\n        var x = Math.floor(bitsOffset % rowSize) * 32;\n        var theBits = bits[bitsOffset];\n        var bit = 31;\n        while ((theBits >>> bit) === 0) {\n            bit--;\n        }\n        x += bit;\n        return Int32Array.from([x, y]);\n    };\n    /**\n     * @return The width of the matrix\n     */\n    BitMatrix.prototype.getWidth = function () {\n        return this.width;\n    };\n    /**\n     * @return The height of the matrix\n     */\n    BitMatrix.prototype.getHeight = function () {\n        return this.height;\n    };\n    /**\n     * @return The row size of the matrix\n     */\n    BitMatrix.prototype.getRowSize = function () {\n        return this.rowSize;\n    };\n    /*@Override*/\n    BitMatrix.prototype.equals = function (o) {\n        if (!(o instanceof BitMatrix)) {\n            return false;\n        }\n        var other = o;\n        return this.width === other.width && this.height === other.height && this.rowSize === other.rowSize &&\n            Arrays_1.default.equals(this.bits, other.bits);\n    };\n    /*@Override*/\n    BitMatrix.prototype.hashCode = function () {\n        var hash = this.width;\n        hash = 31 * hash + this.width;\n        hash = 31 * hash + this.height;\n        hash = 31 * hash + this.rowSize;\n        hash = 31 * hash + Arrays_1.default.hashCode(this.bits);\n        return hash;\n    };\n    /**\n     * @return string representation using \"X\" for set and \" \" for unset bits\n     */\n    /*@Override*/\n    // public toString(): string {\n    //   return toString(\": \"X, \"  \")\n    // }\n    /**\n     * @param setString representation of a set bit\n     * @param unsetString representation of an unset bit\n     * @return string representation of entire matrix utilizing given strings\n     */\n    // public toString(setString: string = \"X \", unsetString: string = \"  \"): string {\n    //   return this.buildToString(setString, unsetString, \"\\n\")\n    // }\n    /**\n     * @param setString representation of a set bit\n     * @param unsetString representation of an unset bit\n     * @param lineSeparator newline character in string representation\n     * @return string representation of entire matrix utilizing given strings and line separator\n     * @deprecated call {@link #toString(String,String)} only, which uses \\n line separator always\n     */\n    // @Deprecated\n    BitMatrix.prototype.toString = function (setString, unsetString, lineSeparator) {\n        if (setString === void 0) { setString = 'X '; }\n        if (unsetString === void 0) { unsetString = '  '; }\n        if (lineSeparator === void 0) { lineSeparator = '\\n'; }\n        return this.buildToString(setString, unsetString, lineSeparator);\n    };\n    BitMatrix.prototype.buildToString = function (setString, unsetString, lineSeparator) {\n        var result = new StringBuilder_1.default();\n        // result.append(lineSeparator);\n        for (var y = 0, height = this.height; y < height; y++) {\n            for (var x = 0, width = this.width; x < width; x++) {\n                result.append(this.get(x, y) ? setString : unsetString);\n            }\n            result.append(lineSeparator);\n        }\n        return result.toString();\n    };\n    /*@Override*/\n    BitMatrix.prototype.clone = function () {\n        return new BitMatrix(this.width, this.height, this.rowSize, this.bits.slice());\n    };\n    return BitMatrix;\n}());\nexports.default = BitMatrix;\n//# sourceMappingURL=BitMatrix.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","BitArray_1","System_1","Arrays_1","StringBuilder_1","IllegalArgumentException_1","BitMatrix","width","height","rowSize","bits","undefined","default","Math","floor","Int32Array","parseFromBooleanArray","BitMatrix.parseFromBooleanArray","image","length","i","imageI","j","set","parseFromString","BitMatrix.parseFromString","stringRepresentation","setString","unsetString","Array","bitsPos","rowStartPos","rowLength","nRows","pos","charAt","substring","matrix","prototype","get","BitMatrix.prototype.get","x","y","BitMatrix.prototype.set","unset","BitMatrix.prototype.unset","flip","BitMatrix.prototype.flip","xor","BitMatrix.prototype.xor","mask","getWidth","getHeight","getRowSize","rowArray","offset","row","getRow","getBitArray","clear","BitMatrix.prototype.clear","max","setRegion","BitMatrix.prototype.setRegion","left","top","right","bottom","BitMatrix.prototype.getRow","getSize","setBulk","setRow","BitMatrix.prototype.setRow","arraycopy","rotate180","BitMatrix.prototype.rotate180","topRow","bottomRow","length_1","reverse","getEnclosingRectangle","BitMatrix.prototype.getEnclosingRectangle","x32","theBits","bit","from","getTopLeftOnBit","BitMatrix.prototype.getTopLeftOnBit","bitsOffset","getBottomRightOnBit","BitMatrix.prototype.getBottomRightOnBit","BitMatrix.prototype.getWidth","BitMatrix.prototype.getHeight","BitMatrix.prototype.getRowSize","equals","BitMatrix.prototype.equals","o","hashCode","BitMatrix.prototype.hashCode","hash","toString","BitMatrix.prototype.toString","lineSeparator","buildToString","BitMatrix.prototype.buildToString","result","append","clone","BitMatrix.prototype.clone","slice"]
}
