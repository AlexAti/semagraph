{
"version":3,
"file":"module$node_modules$$zxing$library$cjs$core$qrcode$QRCodeWriter.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/@zxing/library/cjs/core/qrcode/QRCodeWriter.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$zxing$library$cjs$core$qrcode$QRCodeWriter\"] = function(global,require,module,exports) {\n\"use strict\";\n/*\n * Copyright 2008 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/*namespace com.google.zxing.qrcode {*/\nvar BarcodeFormat_1 = require(\"../BarcodeFormat\");\nvar EncodeHintType_1 = require(\"../EncodeHintType\");\nvar BitMatrix_1 = require(\"../common/BitMatrix\");\nvar ErrorCorrectionLevel_1 = require(\"./decoder/ErrorCorrectionLevel\");\nvar Encoder_1 = require(\"./encoder/Encoder\");\nvar IllegalArgumentException_1 = require(\"../IllegalArgumentException\");\nvar IllegalStateException_1 = require(\"../IllegalStateException\");\n/*import java.util.Map;*/\n/**\n * This object renders a QR Code as a BitMatrix 2D array of greyscale values.\n *\n * @author dswitkin@google.com (Daniel Switkin)\n */\nvar QRCodeWriter = /** @class */ (function () {\n    function QRCodeWriter() {\n    }\n    /*@Override*/\n    // public encode(contents: string, format: BarcodeFormat, width: number /*int*/, height: number /*int*/): BitMatrix\n    //     /*throws WriterException */ {\n    //   return encode(contents, format, width, height, null)\n    // }\n    /*@Override*/\n    QRCodeWriter.prototype.encode = function (contents, format, width /*int*/, height /*int*/, hints) {\n        if (contents.length === 0) {\n            throw new IllegalArgumentException_1.default('Found empty contents');\n        }\n        if (format !== BarcodeFormat_1.default.QR_CODE) {\n            throw new IllegalArgumentException_1.default('Can only encode QR_CODE, but got ' + format);\n        }\n        if (width < 0 || height < 0) {\n            throw new IllegalArgumentException_1.default(\"Requested dimensions are too small: \" + width + \"x\" + height);\n        }\n        var errorCorrectionLevel = ErrorCorrectionLevel_1.default.L;\n        var quietZone = QRCodeWriter.QUIET_ZONE_SIZE;\n        if (hints !== null) {\n            if (undefined !== hints.get(EncodeHintType_1.default.ERROR_CORRECTION)) {\n                errorCorrectionLevel = ErrorCorrectionLevel_1.default.fromString(hints.get(EncodeHintType_1.default.ERROR_CORRECTION).toString());\n            }\n            if (undefined !== hints.get(EncodeHintType_1.default.MARGIN)) {\n                quietZone = Number.parseInt(hints.get(EncodeHintType_1.default.MARGIN).toString(), 10);\n            }\n        }\n        var code = Encoder_1.default.encode(contents, errorCorrectionLevel, hints);\n        return QRCodeWriter.renderResult(code, width, height, quietZone);\n    };\n    // Note that the input matrix uses 0 == white, 1 == black, while the output matrix uses\n    // 0 == black, 255 == white (i.e. an 8 bit greyscale bitmap).\n    QRCodeWriter.renderResult = function (code, width /*int*/, height /*int*/, quietZone /*int*/) {\n        var input = code.getMatrix();\n        if (input === null) {\n            throw new IllegalStateException_1.default();\n        }\n        var inputWidth = input.getWidth();\n        var inputHeight = input.getHeight();\n        var qrWidth = inputWidth + (quietZone * 2);\n        var qrHeight = inputHeight + (quietZone * 2);\n        var outputWidth = Math.max(width, qrWidth);\n        var outputHeight = Math.max(height, qrHeight);\n        var multiple = Math.min(Math.floor(outputWidth / qrWidth), Math.floor(outputHeight / qrHeight));\n        // Padding includes both the quiet zone and the extra white pixels to accommodate the requested\n        // dimensions. For example, if input is 25x25 the QR will be 33x33 including the quiet zone.\n        // If the requested size is 200x160, the multiple will be 4, for a QR of 132x132. These will\n        // handle all the padding from 100x100 (the actual QR) up to 200x160.\n        var leftPadding = Math.floor((outputWidth - (inputWidth * multiple)) / 2);\n        var topPadding = Math.floor((outputHeight - (inputHeight * multiple)) / 2);\n        var output = new BitMatrix_1.default(outputWidth, outputHeight);\n        for (var inputY = 0, outputY = topPadding; inputY < inputHeight; inputY++, outputY += multiple) {\n            // Write the contents of this row of the barcode\n            for (var inputX = 0, outputX = leftPadding; inputX < inputWidth; inputX++, outputX += multiple) {\n                if (input.get(inputX, inputY) === 1) {\n                    output.setRegion(outputX, outputY, multiple, multiple);\n                }\n            }\n        }\n        return output;\n    };\n    QRCodeWriter.QUIET_ZONE_SIZE = 4;\n    return QRCodeWriter;\n}());\nexports.default = QRCodeWriter;\n//# sourceMappingURL=QRCodeWriter.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","BarcodeFormat_1","EncodeHintType_1","BitMatrix_1","ErrorCorrectionLevel_1","Encoder_1","IllegalArgumentException_1","IllegalStateException_1","QRCodeWriter","prototype","encode","QRCodeWriter.prototype.encode","contents","format","width","height","hints","length","default","QR_CODE","errorCorrectionLevel","L","quietZone","QUIET_ZONE_SIZE","undefined","get","ERROR_CORRECTION","fromString","toString","MARGIN","Number","parseInt","code","renderResult","QRCodeWriter.renderResult","input","getMatrix","inputWidth","getWidth","inputHeight","getHeight","qrWidth","qrHeight","outputWidth","Math","max","outputHeight","multiple","min","floor","leftPadding","topPadding","output","inputY","outputY","inputX","outputX","setRegion"]
}
