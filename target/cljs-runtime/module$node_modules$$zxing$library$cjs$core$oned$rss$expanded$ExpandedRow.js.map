{
"version":3,
"file":"module$node_modules$$zxing$library$cjs$core$oned$rss$expanded$ExpandedRow.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,yEAAA,CAA8F,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAEtIC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAAEG,MAAO,CAAA,CAAT,CAA7C,CACIC,OAAAA,CAA6B,QAAS,EAAG,CACzCA,QAASA,YAAW,CAACC,KAAD,CAAQC,SAAR,CAAmBC,WAAnB,CAAgC,CAChD,IAAKF,CAAAA,KAAL,CAAaA,KACb,KAAKC,CAAAA,SAAL,CAAiBA,SACjB,KAAKC,CAAAA,WAAL,CAAmBA,WAH6B,CAKpDH,WAAYI,CAAAA,SAAUC,CAAAA,QAAtB,CAAiCC,QAAS,EAAG,CACzC,MAAO,KAAKL,CAAAA,KAD6B,CAG7CD,YAAYI,CAAAA,SAAUG,CAAAA,YAAtB,CAAqCC,QAAS,EAAG,CAC7C,MAAO,KAAKN,CAAAA,SADiC,CAGjDF,YAAYI,CAAAA,SAAUK,CAAAA,UAAtB,CAAmCC,QAAS,EAAG,CAC3C,MAAO,KAAKP,CAAAA,WAD+B,CAI/CH;WAAYI,CAAAA,SAAUO,CAAAA,YAAtB,CAAqCC,QAAS,CAACC,UAAD,CAAa,CACvD,MAAO,KAAKC,CAAAA,eAAL,CAAqB,IAArB,CAA2BD,UAA3B,CADgD,CAI3Db,YAAYI,CAAAA,SAAUW,CAAAA,QAAtB,CAAiCC,QAAS,EAAG,CACzC,MAAO,IAAP,CAAc,IAAKf,CAAAA,KAAnB,CAA2B,IADc,CAQ7CD,YAAYI,CAAAA,SAAUa,CAAAA,MAAtB,CAA+BC,QAAS,CAACC,EAAD,CAAKC,EAAL,CAAS,CAC7C,MAAMD,GAAN,WAAoBnB,YAApB,CAGO,IAAKc,CAAAA,eAAL,CAAqBK,EAArB,CAAyBC,EAAzB,CAHP,EAGuCD,EAAGhB,CAAAA,WAH1C,GAG0DiB,EAAGjB,CAAAA,WAH7D,CACW,CAAA,CAFkC,CAMjDH,YAAYI,CAAAA,SAAUU,CAAAA,eAAtB,CAAwCO,QAAS,CAACC,KAAD,CAAQC,KAAR,CAAe,CAC5D,GAAKD,KAAL,EAAeC,KAAf,CAAA,CAEA,IAAIC,MACJF,MAAMG,CAAAA,OAAN,CAAc,QAAS,CAACC,EAAD,CAAKC,CAAL,CAAQ,CAC3BJ,KAAME,CAAAA,OAAN,CAAc,QAAS,CAACG,EAAD,CAAK,CACpBF,EAAGG,CAAAA,WAAH,EAAiBC,CAAAA,QAAjB,EAAJ,GAAoCF,EAAGC,CAAAA,WAAH,EAAiBC,CAAAA,QAAjB,EAApC;AAAmEJ,EAAGK,CAAAA,YAAH,EAAkBD,CAAAA,QAAlB,EAAnE,GAAoGF,EAAGG,CAAAA,YAAH,EAAkBD,CAAAA,QAAlB,EAApG,EAAoIJ,EAAGM,CAAAA,eAAH,EAAqBF,CAAAA,QAArB,EAApI,GAAwKF,EAAGI,CAAAA,eAAH,EAAqBF,CAAAA,QAArB,EAAxK,GACIN,MADJ,CACa,CAAA,CADb,CADwB,CAA5B,CAD2B,CAA/B,CAOA,OAAOA,OAVP,CAD4D,CAahE,OAAOxB,YA/CkC,CAAZ,EAiDjCJ,QAAQqC,CAAAA,OAAR,CAAkBjC,MApDoH;",
"sources":["node_modules/@zxing/library/cjs/core/oned/rss/expanded/ExpandedRow.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$zxing$library$cjs$core$oned$rss$expanded$ExpandedRow\"] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ExpandedRow = /** @class */ (function () {\n    function ExpandedRow(pairs, rowNumber, wasReversed) {\n        this.pairs = pairs;\n        this.rowNumber = rowNumber;\n        this.wasReversed = wasReversed;\n    }\n    ExpandedRow.prototype.getPairs = function () {\n        return this.pairs;\n    };\n    ExpandedRow.prototype.getRowNumber = function () {\n        return this.rowNumber;\n    };\n    ExpandedRow.prototype.isReversed = function () {\n        return this.wasReversed;\n    };\n    // check implementation\n    ExpandedRow.prototype.isEquivalent = function (otherPairs) {\n        return this.checkEqualitity(this, otherPairs);\n    };\n    // @Override\n    ExpandedRow.prototype.toString = function () {\n        return '{ ' + this.pairs + ' }';\n    };\n    /**\n     * Two rows are equal if they contain the same pairs in the same order.\n     */\n    // @Override\n    // check implementation\n    ExpandedRow.prototype.equals = function (o1, o2) {\n        if (!(o1 instanceof ExpandedRow)) {\n            return false;\n        }\n        return this.checkEqualitity(o1, o2) && o1.wasReversed === o2.wasReversed;\n    };\n    ExpandedRow.prototype.checkEqualitity = function (pair1, pair2) {\n        if (!pair1 || !pair2)\n            return;\n        var result;\n        pair1.forEach(function (e1, i) {\n            pair2.forEach(function (e2) {\n                if (e1.getLeftChar().getValue() === e2.getLeftChar().getValue() && e1.getRightChar().getValue() === e2.getRightChar().getValue() && e1.getFinderPatter().getValue() === e2.getFinderPatter().getValue()) {\n                    result = true;\n                }\n            });\n        });\n        return result;\n    };\n    return ExpandedRow;\n}());\nexports.default = ExpandedRow;\n//# sourceMappingURL=ExpandedRow.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","ExpandedRow","pairs","rowNumber","wasReversed","prototype","getPairs","ExpandedRow.prototype.getPairs","getRowNumber","ExpandedRow.prototype.getRowNumber","isReversed","ExpandedRow.prototype.isReversed","isEquivalent","ExpandedRow.prototype.isEquivalent","otherPairs","checkEqualitity","toString","ExpandedRow.prototype.toString","equals","ExpandedRow.prototype.equals","o1","o2","ExpandedRow.prototype.checkEqualitity","pair1","pair2","result","forEach","e1","i","e2","getLeftChar","getValue","getRightChar","getFinderPatter","default"]
}
