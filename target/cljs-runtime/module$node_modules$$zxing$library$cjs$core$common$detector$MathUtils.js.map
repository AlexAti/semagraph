{
"version":3,
"file":"module$node_modules$$zxing$library$cjs$core$common$detector$MathUtils.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,qEAAA,CAA0F,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAiBlIC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAAEG,MAAO,CAAA,CAAT,CAA7C,CAKIC,OAAAA,CAA2B,QAAS,EAAG,CACvCA,QAASA,UAAS,EAAG,EAWrBA,SAAUC,CAAAA,KAAV,CAAkBC,QAAS,CAACC,CAAD,CAAc,CAGrC,MAAIA,EAAJ,EAASC,MAAOC,CAAAA,gBAAhB,CACWD,MAAOC,CAAAA,gBADlB,CAEIF,CAAJ,EAASC,MAAOE,CAAAA,gBAAhB,CACWF,MAAOE,CAAAA,gBADlB,CAEmBH,CAFnB,EAE4B,CAAJ,CAAAA,CAAA,CAAU,CAAC,EAAX,CAAiB,EAFzC,EAEiD,CAPZ,CAiBzCH,UAAUO,CAAAA,QAAV,CAAqBC,QAAS,CAACC,EAAD,CAAmBC,EAAnB,CAAqCC,EAArC,CAAuDC,EAAvD,CAAyE,CACvFH,EAARI,EAAaF,EACLD,GAARI,EAAaF,EACjB,OAAoBG,KAAKC,CAAAA,IAAL,CAAUH,EAAV,CAAkBA,EAAlB,CAA0BC,EAA1B,CAAkCA,EAAlC,CAH+E,CAqBvGd,UAAUiB,CAAAA,GAAV,CAAgBC,QAAS,CAACC,KAAD,CAAQ,CAE7B,IADA,IAAIC;AAAQ,CAAZ,CACSC,EAAI,CADb,CACgBC,SAAWH,KAAMI,CAAAA,MAAjC,CAAyCF,CAAzC,GAA+CC,QAA/C,CAAyDD,CAAA,EAAzD,CAEID,KAAA,EADQD,KAAAK,CAAMH,CAANG,CAGZ,OAAOJ,MANsB,CAQjC,OAAOpB,UA1DgC,CAAZ,EA4D/BJ,QAAQ6B,CAAAA,OAAR,CAAkBzB,MAlFgH;",
"sources":["node_modules/@zxing/library/cjs/core/common/detector/MathUtils.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$zxing$library$cjs$core$common$detector$MathUtils\"] = function(global,require,module,exports) {\n\"use strict\";\n/*\n * Copyright 2012 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/*namespace com.google.zxing.common.detector {*/\n/**\n * General math-related and numeric utility functions.\n */\nvar MathUtils = /** @class */ (function () {\n    function MathUtils() {\n    }\n    /**\n     * Ends up being a bit faster than {@link Math#round(float)}. This merely rounds its\n     * argument to the nearest int, where x.5 rounds up to x+1. Semantics of this shortcut\n     * differ slightly from {@link Math#round(float)} in that half rounds down for negative\n     * values. -2.5 rounds to -3, not -2. For purposes here it makes no difference.\n     *\n     * @param d real value to round\n     * @return nearest {@code int}\n     */\n    MathUtils.round = function (d /*float*/) {\n        if (NaN === d)\n            return 0;\n        if (d <= Number.MIN_SAFE_INTEGER)\n            return Number.MIN_SAFE_INTEGER;\n        if (d >= Number.MAX_SAFE_INTEGER)\n            return Number.MAX_SAFE_INTEGER;\n        return /*(int) */ (d + (d < 0.0 ? -0.5 : 0.5)) | 0;\n    };\n    // TYPESCRIPTPORT: maybe remove round method and call directly Math.round, it looks like it doesn't make sense for js\n    /**\n     * @param aX point A x coordinate\n     * @param aY point A y coordinate\n     * @param bX point B x coordinate\n     * @param bY point B y coordinate\n     * @return Euclidean distance between points A and B\n     */\n    MathUtils.distance = function (aX /*float|int*/, aY /*float|int*/, bX /*float|int*/, bY /*float|int*/) {\n        var xDiff = aX - bX;\n        var yDiff = aY - bY;\n        return /*(float) */ Math.sqrt(xDiff * xDiff + yDiff * yDiff);\n    };\n    /**\n     * @param aX point A x coordinate\n     * @param aY point A y coordinate\n     * @param bX point B x coordinate\n     * @param bY point B y coordinate\n     * @return Euclidean distance between points A and B\n     */\n    // public static distance(aX: number /*int*/, aY: number /*int*/, bX: number /*int*/, bY: number /*int*/): float {\n    //   const xDiff = aX - bX\n    //   const yDiff = aY - bY\n    //   return (float) Math.sqrt(xDiff * xDiff + yDiff * yDiff);\n    // }\n    /**\n     * @param array values to sum\n     * @return sum of values in array\n     */\n    MathUtils.sum = function (array) {\n        var count = 0;\n        for (var i = 0, length_1 = array.length; i !== length_1; i++) {\n            var a = array[i];\n            count += a;\n        }\n        return count;\n    };\n    return MathUtils;\n}());\nexports.default = MathUtils;\n//# sourceMappingURL=MathUtils.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","MathUtils","round","MathUtils.round","d","Number","MIN_SAFE_INTEGER","MAX_SAFE_INTEGER","distance","MathUtils.distance","aX","aY","bX","bY","xDiff","yDiff","Math","sqrt","sum","MathUtils.sum","array","count","i","length_1","length","a","default"]
}
