{
"version":3,
"file":"module$node_modules$$zxing$library$cjs$core$aztec$encoder$Encoder.js",
"lineCount":20,
"mappings":"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",
"sources":["node_modules/@zxing/library/cjs/core/aztec/encoder/Encoder.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$zxing$library$cjs$core$aztec$encoder$Encoder\"] = function(global,require,module,exports) {\n\"use strict\";\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar BitArray_1 = require(\"../../common/BitArray\");\nvar IllegalArgumentException_1 = require(\"../../IllegalArgumentException\");\nvar StringUtils_1 = require(\"../../common/StringUtils\");\nvar BitMatrix_1 = require(\"../../common/BitMatrix\");\nvar AztecCode_1 = require(\"./AztecCode\");\nvar ReedSolomonEncoder_1 = require(\"../../common/reedsolomon/ReedSolomonEncoder\");\nvar GenericGF_1 = require(\"../../common/reedsolomon/GenericGF\");\nvar HighLevelEncoder_1 = require(\"./HighLevelEncoder\");\nvar Integer_1 = require(\"../../util/Integer\");\n/*\n * Copyright 2013 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// package com.google.zxing.aztec.encoder;\n// import com.google.zxing.common.BitArray;\n// import com.google.zxing.common.BitMatrix;\n// import com.google.zxing.common.reedsolomon.GenericGF;\n// import com.google.zxing.common.reedsolomon.ReedSolomonEncoder;\n/**\n * Generates Aztec 2D barcodes.\n *\n * @author Rustam Abdullaev\n */\nvar Encoder = /** @class */ (function () {\n    function Encoder() {\n    }\n    /**\n     * Encodes the given binary content as an Aztec symbol\n     *\n     * @param data input data string\n     * @return Aztec symbol matrix with metadata\n     */\n    Encoder.encodeBytes = function (data) {\n        return Encoder.encode(data, Encoder.DEFAULT_EC_PERCENT, Encoder.DEFAULT_AZTEC_LAYERS);\n    };\n    /**\n     * Encodes the given binary content as an Aztec symbol\n     *\n     * @param data input data string\n     * @param minECCPercent minimal percentage of error check words (According to ISO/IEC 24778:2008,\n     *                      a minimum of 23% + 3 words is recommended)\n     * @param userSpecifiedLayers if non-zero, a user-specified value for the number of layers\n     * @return Aztec symbol matrix with metadata\n     */\n    Encoder.encode = function (data, minECCPercent, userSpecifiedLayers) {\n        // High-level encode\n        var bits = new HighLevelEncoder_1.default(data).encode();\n        // stuff bits and choose symbol size\n        var eccBits = Integer_1.default.truncDivision((bits.getSize() * minECCPercent), 100) + 11;\n        var totalSizeBits = bits.getSize() + eccBits;\n        var compact;\n        var layers;\n        var totalBitsInLayer;\n        var wordSize;\n        var stuffedBits;\n        if (userSpecifiedLayers !== Encoder.DEFAULT_AZTEC_LAYERS) {\n            compact = userSpecifiedLayers < 0;\n            layers = Math.abs(userSpecifiedLayers);\n            if (layers > (compact ? Encoder.MAX_NB_BITS_COMPACT : Encoder.MAX_NB_BITS)) {\n                throw new IllegalArgumentException_1.default(StringUtils_1.default.format('Illegal value %s for layers', userSpecifiedLayers));\n            }\n            totalBitsInLayer = Encoder.totalBitsInLayer(layers, compact);\n            wordSize = Encoder.WORD_SIZE[layers];\n            var usableBitsInLayers = totalBitsInLayer - (totalBitsInLayer % wordSize);\n            stuffedBits = Encoder.stuffBits(bits, wordSize);\n            if (stuffedBits.getSize() + eccBits > usableBitsInLayers) {\n                throw new IllegalArgumentException_1.default('Data to large for user specified layer');\n            }\n            if (compact && stuffedBits.getSize() > wordSize * 64) {\n                // Compact format only allows 64 data words, though C4 can hold more words than that\n                throw new IllegalArgumentException_1.default('Data to large for user specified layer');\n            }\n        }\n        else {\n            wordSize = 0;\n            stuffedBits = null;\n            // We look at the possible table sizes in the order Compact1, Compact2, Compact3,\n            // Compact4, Normal4,...  Normal(i) for i < 4 isn't typically used since Compact(i+1)\n            // is the same size, but has more data.\n            for (var i /*int*/ = 0;; i++) {\n                if (i > Encoder.MAX_NB_BITS) {\n                    throw new IllegalArgumentException_1.default('Data too large for an Aztec code');\n                }\n                compact = i <= 3;\n                layers = compact ? i + 1 : i;\n                totalBitsInLayer = Encoder.totalBitsInLayer(layers, compact);\n                if (totalSizeBits > totalBitsInLayer) {\n                    continue;\n                }\n                // [Re]stuff the bits if this is the first opportunity, or if the\n                // wordSize has changed\n                if (stuffedBits == null || wordSize !== Encoder.WORD_SIZE[layers]) {\n                    wordSize = Encoder.WORD_SIZE[layers];\n                    stuffedBits = Encoder.stuffBits(bits, wordSize);\n                }\n                var usableBitsInLayers = totalBitsInLayer - (totalBitsInLayer % wordSize);\n                if (compact && stuffedBits.getSize() > wordSize * 64) {\n                    // Compact format only allows 64 data words, though C4 can hold more words than that\n                    continue;\n                }\n                if (stuffedBits.getSize() + eccBits <= usableBitsInLayers) {\n                    break;\n                }\n            }\n        }\n        var messageBits = Encoder.generateCheckWords(stuffedBits, totalBitsInLayer, wordSize);\n        // generate mode message\n        var messageSizeInWords = stuffedBits.getSize() / wordSize;\n        var modeMessage = Encoder.generateModeMessage(compact, layers, messageSizeInWords);\n        // allocate symbol\n        var baseMatrixSize = (compact ? 11 : 14) + layers * 4; // not including alignment lines\n        var alignmentMap = new Int32Array(baseMatrixSize);\n        var matrixSize;\n        if (compact) {\n            // no alignment marks in compact mode, alignmentMap is a no-op\n            matrixSize = baseMatrixSize;\n            for (var i /*int*/ = 0; i < alignmentMap.length; i++) {\n                alignmentMap[i] = i;\n            }\n        }\n        else {\n            matrixSize = baseMatrixSize + 1 + 2 * Integer_1.default.truncDivision((Integer_1.default.truncDivision(baseMatrixSize, 2) - 1), 15);\n            var origCenter = Integer_1.default.truncDivision(baseMatrixSize, 2);\n            var center = Integer_1.default.truncDivision(matrixSize, 2);\n            for (var i /*int*/ = 0; i < origCenter; i++) {\n                var newOffset = i + Integer_1.default.truncDivision(i, 15);\n                alignmentMap[origCenter - i - 1] = center - newOffset - 1;\n                alignmentMap[origCenter + i] = center + newOffset + 1;\n            }\n        }\n        var matrix = new BitMatrix_1.default(matrixSize);\n        // draw data bits\n        for (var i /*int*/ = 0, rowOffset = 0; i < layers; i++) {\n            var rowSize = (layers - i) * 4 + (compact ? 9 : 12);\n            for (var j /*int*/ = 0; j < rowSize; j++) {\n                var columnOffset = j * 2;\n                for (var k /*int*/ = 0; k < 2; k++) {\n                    if (messageBits.get(rowOffset + columnOffset + k)) {\n                        matrix.set(alignmentMap[i * 2 + k], alignmentMap[i * 2 + j]);\n                    }\n                    if (messageBits.get(rowOffset + rowSize * 2 + columnOffset + k)) {\n                        matrix.set(alignmentMap[i * 2 + j], alignmentMap[baseMatrixSize - 1 - i * 2 - k]);\n                    }\n                    if (messageBits.get(rowOffset + rowSize * 4 + columnOffset + k)) {\n                        matrix.set(alignmentMap[baseMatrixSize - 1 - i * 2 - k], alignmentMap[baseMatrixSize - 1 - i * 2 - j]);\n                    }\n                    if (messageBits.get(rowOffset + rowSize * 6 + columnOffset + k)) {\n                        matrix.set(alignmentMap[baseMatrixSize - 1 - i * 2 - j], alignmentMap[i * 2 + k]);\n                    }\n                }\n            }\n            rowOffset += rowSize * 8;\n        }\n        // draw mode message\n        Encoder.drawModeMessage(matrix, compact, matrixSize, modeMessage);\n        // draw alignment marks\n        if (compact) {\n            Encoder.drawBullsEye(matrix, Integer_1.default.truncDivision(matrixSize, 2), 5);\n        }\n        else {\n            Encoder.drawBullsEye(matrix, Integer_1.default.truncDivision(matrixSize, 2), 7);\n            for (var i /*int*/ = 0, j = 0; i < Integer_1.default.truncDivision(baseMatrixSize, 2) - 1; i += 15, j += 16) {\n                for (var k /*int*/ = Integer_1.default.truncDivision(matrixSize, 2) & 1; k < matrixSize; k += 2) {\n                    matrix.set(Integer_1.default.truncDivision(matrixSize, 2) - j, k);\n                    matrix.set(Integer_1.default.truncDivision(matrixSize, 2) + j, k);\n                    matrix.set(k, Integer_1.default.truncDivision(matrixSize, 2) - j);\n                    matrix.set(k, Integer_1.default.truncDivision(matrixSize, 2) + j);\n                }\n            }\n        }\n        var aztec = new AztecCode_1.default();\n        aztec.setCompact(compact);\n        aztec.setSize(matrixSize);\n        aztec.setLayers(layers);\n        aztec.setCodeWords(messageSizeInWords);\n        aztec.setMatrix(matrix);\n        return aztec;\n    };\n    Encoder.drawBullsEye = function (matrix, center, size) {\n        for (var i /*int*/ = 0; i < size; i += 2) {\n            for (var j /*int*/ = center - i; j <= center + i; j++) {\n                matrix.set(j, center - i);\n                matrix.set(j, center + i);\n                matrix.set(center - i, j);\n                matrix.set(center + i, j);\n            }\n        }\n        matrix.set(center - size, center - size);\n        matrix.set(center - size + 1, center - size);\n        matrix.set(center - size, center - size + 1);\n        matrix.set(center + size, center - size);\n        matrix.set(center + size, center - size + 1);\n        matrix.set(center + size, center + size - 1);\n    };\n    Encoder.generateModeMessage = function (compact, layers, messageSizeInWords) {\n        var modeMessage = new BitArray_1.default();\n        if (compact) {\n            modeMessage.appendBits(layers - 1, 2);\n            modeMessage.appendBits(messageSizeInWords - 1, 6);\n            modeMessage = Encoder.generateCheckWords(modeMessage, 28, 4);\n        }\n        else {\n            modeMessage.appendBits(layers - 1, 5);\n            modeMessage.appendBits(messageSizeInWords - 1, 11);\n            modeMessage = Encoder.generateCheckWords(modeMessage, 40, 4);\n        }\n        return modeMessage;\n    };\n    Encoder.drawModeMessage = function (matrix, compact, matrixSize, modeMessage) {\n        var center = Integer_1.default.truncDivision(matrixSize, 2);\n        if (compact) {\n            for (var i /*int*/ = 0; i < 7; i++) {\n                var offset = center - 3 + i;\n                if (modeMessage.get(i)) {\n                    matrix.set(offset, center - 5);\n                }\n                if (modeMessage.get(i + 7)) {\n                    matrix.set(center + 5, offset);\n                }\n                if (modeMessage.get(20 - i)) {\n                    matrix.set(offset, center + 5);\n                }\n                if (modeMessage.get(27 - i)) {\n                    matrix.set(center - 5, offset);\n                }\n            }\n        }\n        else {\n            for (var i /*int*/ = 0; i < 10; i++) {\n                var offset = center - 5 + i + Integer_1.default.truncDivision(i, 5);\n                if (modeMessage.get(i)) {\n                    matrix.set(offset, center - 7);\n                }\n                if (modeMessage.get(i + 10)) {\n                    matrix.set(center + 7, offset);\n                }\n                if (modeMessage.get(29 - i)) {\n                    matrix.set(offset, center + 7);\n                }\n                if (modeMessage.get(39 - i)) {\n                    matrix.set(center - 7, offset);\n                }\n            }\n        }\n    };\n    Encoder.generateCheckWords = function (bitArray, totalBits, wordSize) {\n        var e_1, _a;\n        // bitArray is guaranteed to be a multiple of the wordSize, so no padding needed\n        var messageSizeInWords = bitArray.getSize() / wordSize;\n        var rs = new ReedSolomonEncoder_1.default(Encoder.getGF(wordSize));\n        var totalWords = Integer_1.default.truncDivision(totalBits, wordSize);\n        var messageWords = Encoder.bitsToWords(bitArray, wordSize, totalWords);\n        rs.encode(messageWords, totalWords - messageSizeInWords);\n        var startPad = totalBits % wordSize;\n        var messageBits = new BitArray_1.default();\n        messageBits.appendBits(0, startPad);\n        try {\n            for (var _b = __values(Array.from(messageWords)), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var messageWord = _c.value /*: int*/;\n                messageBits.appendBits(messageWord, wordSize);\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        return messageBits;\n    };\n    Encoder.bitsToWords = function (stuffedBits, wordSize, totalWords) {\n        var message = new Int32Array(totalWords);\n        var i;\n        var n;\n        for (i = 0, n = stuffedBits.getSize() / wordSize; i < n; i++) {\n            var value = 0;\n            for (var j /*int*/ = 0; j < wordSize; j++) {\n                value |= stuffedBits.get(i * wordSize + j) ? (1 << wordSize - j - 1) : 0;\n            }\n            message[i] = value;\n        }\n        return message;\n    };\n    Encoder.getGF = function (wordSize) {\n        switch (wordSize) {\n            case 4:\n                return GenericGF_1.default.AZTEC_PARAM;\n            case 6:\n                return GenericGF_1.default.AZTEC_DATA_6;\n            case 8:\n                return GenericGF_1.default.AZTEC_DATA_8;\n            case 10:\n                return GenericGF_1.default.AZTEC_DATA_10;\n            case 12:\n                return GenericGF_1.default.AZTEC_DATA_12;\n            default:\n                throw new IllegalArgumentException_1.default('Unsupported word size ' + wordSize);\n        }\n    };\n    Encoder.stuffBits = function (bits, wordSize) {\n        var out = new BitArray_1.default();\n        var n = bits.getSize();\n        var mask = (1 << wordSize) - 2;\n        for (var i /*int*/ = 0; i < n; i += wordSize) {\n            var word = 0;\n            for (var j /*int*/ = 0; j < wordSize; j++) {\n                if (i + j >= n || bits.get(i + j)) {\n                    word |= 1 << (wordSize - 1 - j);\n                }\n            }\n            if ((word & mask) === mask) {\n                out.appendBits(word & mask, wordSize);\n                i--;\n            }\n            else if ((word & mask) === 0) {\n                out.appendBits(word | 1, wordSize);\n                i--;\n            }\n            else {\n                out.appendBits(word, wordSize);\n            }\n        }\n        return out;\n    };\n    Encoder.totalBitsInLayer = function (layers, compact) {\n        return ((compact ? 88 : 112) + 16 * layers) * layers;\n    };\n    Encoder.DEFAULT_EC_PERCENT = 33; // default minimal percentage of error check words\n    Encoder.DEFAULT_AZTEC_LAYERS = 0;\n    Encoder.MAX_NB_BITS = 32;\n    Encoder.MAX_NB_BITS_COMPACT = 4;\n    Encoder.WORD_SIZE = Int32Array.from([\n        4, 6, 6, 8, 8, 8, 8, 8, 8, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n        12, 12, 12, 12, 12, 12, 12, 12, 12, 12\n    ]);\n    return Encoder;\n}());\nexports.default = Encoder;\n//# sourceMappingURL=Encoder.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","__values","o","s","Symbol","iterator","m","i","call","length","next","value","done","TypeError","Object","defineProperty","BitArray_1","IllegalArgumentException_1","StringUtils_1","BitMatrix_1","AztecCode_1","ReedSolomonEncoder_1","GenericGF_1","HighLevelEncoder_1","Integer_1","Encoder","encodeBytes","Encoder.encodeBytes","data","encode","DEFAULT_EC_PERCENT","DEFAULT_AZTEC_LAYERS","Encoder.encode","minECCPercent","userSpecifiedLayers","bits","default","eccBits","truncDivision","getSize","totalSizeBits","compact","layers","Math","abs","MAX_NB_BITS_COMPACT","MAX_NB_BITS","format","totalBitsInLayer","wordSize","WORD_SIZE","usableBitsInLayers","stuffedBits","stuffBits","messageBits","generateCheckWords","messageSizeInWords","modeMessage","generateModeMessage","baseMatrixSize","alignmentMap","Int32Array","matrixSize","origCenter","center","newOffset","matrix","rowOffset","rowSize","j","columnOffset","k","get","set","drawModeMessage","drawBullsEye","aztec","setCompact","setSize","setLayers","setCodeWords","setMatrix","Encoder.drawBullsEye","size","Encoder.generateModeMessage","appendBits","Encoder.drawModeMessage","offset","Encoder.generateCheckWords","bitArray","totalBits","_a","rs","getGF","totalWords","messageWords","bitsToWords","startPad","_b","Array","from","_c","e_1_1","e_1","error","return","Encoder.bitsToWords","message","n","Encoder.getGF","AZTEC_PARAM","AZTEC_DATA_6","AZTEC_DATA_8","AZTEC_DATA_10","AZTEC_DATA_12","Encoder.stuffBits","out","mask","word","Encoder.totalBitsInLayer"]
}
