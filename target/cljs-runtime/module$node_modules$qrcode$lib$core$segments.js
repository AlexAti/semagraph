shadow$provide.module$node_modules$qrcode$lib$core$segments=function(global,require,module,exports){function getSegments(regex,mode,str){const segments=[];let result;for(;null!==(result=regex.exec(str));)segments.push({data:result[0],index:result.index,mode,length:result[0].length});return segments}function getSegmentsFromString(dataStr){const numSegs=getSegments(Regex.NUMERIC,Mode.NUMERIC,dataStr),alphaNumSegs=getSegments(Regex.ALPHANUMERIC,Mode.ALPHANUMERIC,dataStr);let byteSegs;Utils.isKanjiModeEnabled()?
(byteSegs=getSegments(Regex.BYTE,Mode.BYTE,dataStr),dataStr=getSegments(Regex.KANJI,Mode.KANJI,dataStr)):(byteSegs=getSegments(Regex.BYTE_KANJI,Mode.BYTE,dataStr),dataStr=[]);return numSegs.concat(alphaNumSegs,byteSegs,dataStr).sort(function(s1,s2){return s1.index-s2.index}).map(function(obj){return{data:obj.data,mode:obj.mode,length:obj.length}})}function getSegmentBitsLength(length,mode){switch(mode){case Mode.NUMERIC:return NumericData.getBitsLength(length);case Mode.ALPHANUMERIC:return AlphanumericData.getBitsLength(length);
case Mode.KANJI:return KanjiData.getBitsLength(length);case Mode.BYTE:return ByteData.getBitsLength(length)}}function mergeSegments(segs){return segs.reduce(function(acc,curr){const prevSeg=0<=acc.length-1?acc[acc.length-1]:null;if(prevSeg&&prevSeg.mode===curr.mode)return acc[acc.length-1].data+=curr.data,acc;acc.push(curr);return acc},[])}function buildSingleSegment(data,modesHint){const bestMode=Mode.getBestModeForData(data);modesHint=Mode.from(modesHint,bestMode);if(modesHint!==Mode.BYTE&&modesHint.bit<
bestMode.bit)throw Error('"'+data+'" cannot be encoded with mode '+Mode.toString(modesHint)+".\n Suggested mode is: "+Mode.toString(bestMode));modesHint!==Mode.KANJI||Utils.isKanjiModeEnabled()||(modesHint=Mode.BYTE);switch(modesHint){case Mode.NUMERIC:return new NumericData(data);case Mode.ALPHANUMERIC:return new AlphanumericData(data);case Mode.KANJI:return new KanjiData(data);case Mode.BYTE:return new ByteData(data)}}const Mode=require("module$node_modules$qrcode$lib$core$mode"),NumericData=require("module$node_modules$qrcode$lib$core$numeric_data"),
AlphanumericData=require("module$node_modules$qrcode$lib$core$alphanumeric_data"),ByteData=require("module$node_modules$qrcode$lib$core$byte_data"),KanjiData=require("module$node_modules$qrcode$lib$core$kanji_data"),Regex=require("module$node_modules$qrcode$lib$core$regex"),Utils=require("module$node_modules$qrcode$lib$core$utils"),dijkstra=require("module$node_modules$dijkstrajs$dijkstra");exports.fromArray=function(array){return array.reduce(function(acc,seg){"string"===typeof seg?acc.push(buildSingleSegment(seg,
null)):seg.data&&acc.push(buildSingleSegment(seg.data,seg.mode));return acc},[])};exports.fromString=function(data,version){data=getSegmentsFromString(data,Utils.isKanjiModeEnabled());var nodes=[];for(var i$jscomp$0=0;i$jscomp$0<data.length;i$jscomp$0++){var seg=data[i$jscomp$0];switch(seg.mode){case Mode.NUMERIC:nodes.push([seg,{data:seg.data,mode:Mode.ALPHANUMERIC,length:seg.length},{data:seg.data,mode:Mode.BYTE,length:seg.length}]);break;case Mode.ALPHANUMERIC:nodes.push([seg,{data:seg.data,mode:Mode.BYTE,
length:seg.length}]);break;case Mode.KANJI:nodes.push([seg,{data:seg.data,mode:Mode.BYTE,length:unescape(encodeURIComponent(seg.data)).length}]);break;case Mode.BYTE:nodes.push([{data:seg.data,mode:Mode.BYTE,length:unescape(encodeURIComponent(seg.data)).length}])}}data={};i$jscomp$0={start:{}};seg=["start"];for(let i=0;i<nodes.length;i++){const nodeGroup=nodes[i],currentNodeIds=[];for(let j=0;j<nodeGroup.length;j++){const node=nodeGroup[j],key=""+i+j;currentNodeIds.push(key);data[key]={node,lastCount:0};
i$jscomp$0[key]={};for(let n=0;n<seg.length;n++){const prevNodeId=seg[n];data[prevNodeId]&&data[prevNodeId].node.mode===node.mode?(i$jscomp$0[prevNodeId][key]=getSegmentBitsLength(data[prevNodeId].lastCount+node.length,node.mode)-getSegmentBitsLength(data[prevNodeId].lastCount,node.mode),data[prevNodeId].lastCount+=node.length):(data[prevNodeId]&&(data[prevNodeId].lastCount=node.length),i$jscomp$0[prevNodeId][key]=getSegmentBitsLength(node.length,node.mode)+4+Mode.getCharCountIndicator(node.mode,
version))}}seg=currentNodeIds}for(version=0;version<seg.length;version++)i$jscomp$0[seg[version]].end=0;version=dijkstra.find_path(i$jscomp$0,"start","end");nodes=[];for(i$jscomp$0=1;i$jscomp$0<version.length-1;i$jscomp$0++)nodes.push(data[version[i$jscomp$0]].node);return exports.fromArray(mergeSegments(nodes))};exports.rawSplit=function(data){return exports.fromArray(getSegmentsFromString(data,Utils.isKanjiModeEnabled()))}}
//# sourceMappingURL=module$node_modules$qrcode$lib$core$segments.js.map
