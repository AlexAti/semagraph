{
"version":3,
"file":"module$node_modules$$zxing$library$cjs$core$qrcode$decoder$Mode.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/@zxing/library/cjs/core/qrcode/decoder/Mode.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$zxing$library$cjs$core$qrcode$decoder$Mode\"] = function(global,require,module,exports) {\n\"use strict\";\n/*\n * Copyright 2007 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ModeValues = void 0;\nvar IllegalArgumentException_1 = require(\"../../IllegalArgumentException\");\nvar ModeValues;\n(function (ModeValues) {\n    ModeValues[ModeValues[\"TERMINATOR\"] = 0] = \"TERMINATOR\";\n    ModeValues[ModeValues[\"NUMERIC\"] = 1] = \"NUMERIC\";\n    ModeValues[ModeValues[\"ALPHANUMERIC\"] = 2] = \"ALPHANUMERIC\";\n    ModeValues[ModeValues[\"STRUCTURED_APPEND\"] = 3] = \"STRUCTURED_APPEND\";\n    ModeValues[ModeValues[\"BYTE\"] = 4] = \"BYTE\";\n    ModeValues[ModeValues[\"ECI\"] = 5] = \"ECI\";\n    ModeValues[ModeValues[\"KANJI\"] = 6] = \"KANJI\";\n    ModeValues[ModeValues[\"FNC1_FIRST_POSITION\"] = 7] = \"FNC1_FIRST_POSITION\";\n    ModeValues[ModeValues[\"FNC1_SECOND_POSITION\"] = 8] = \"FNC1_SECOND_POSITION\";\n    /** See GBT 18284-2000; \"Hanzi\" is a transliteration of this mode name. */\n    ModeValues[ModeValues[\"HANZI\"] = 9] = \"HANZI\";\n})(ModeValues = exports.ModeValues || (exports.ModeValues = {}));\n/**\n * <p>See ISO 18004:2006, 6.4.1, Tables 2 and 3. This enum encapsulates the various modes in which\n * data can be encoded to bits in the QR code standard.</p>\n *\n * @author Sean Owen\n */\nvar Mode = /** @class */ (function () {\n    function Mode(value, stringValue, characterCountBitsForVersions, bits /*int*/) {\n        this.value = value;\n        this.stringValue = stringValue;\n        this.characterCountBitsForVersions = characterCountBitsForVersions;\n        this.bits = bits;\n        Mode.FOR_BITS.set(bits, this);\n        Mode.FOR_VALUE.set(value, this);\n    }\n    /**\n     * @param bits four bits encoding a QR Code data mode\n     * @return Mode encoded by these bits\n     * @throws IllegalArgumentException if bits do not correspond to a known mode\n     */\n    Mode.forBits = function (bits /*int*/) {\n        var mode = Mode.FOR_BITS.get(bits);\n        if (undefined === mode) {\n            throw new IllegalArgumentException_1.default();\n        }\n        return mode;\n    };\n    /**\n     * @param version version in question\n     * @return number of bits used, in this QR Code symbol {@link Version}, to encode the\n     *         count of characters that will follow encoded in this Mode\n     */\n    Mode.prototype.getCharacterCountBits = function (version) {\n        var versionNumber = version.getVersionNumber();\n        var offset;\n        if (versionNumber <= 9) {\n            offset = 0;\n        }\n        else if (versionNumber <= 26) {\n            offset = 1;\n        }\n        else {\n            offset = 2;\n        }\n        return this.characterCountBitsForVersions[offset];\n    };\n    Mode.prototype.getValue = function () {\n        return this.value;\n    };\n    Mode.prototype.getBits = function () {\n        return this.bits;\n    };\n    Mode.prototype.equals = function (o) {\n        if (!(o instanceof Mode)) {\n            return false;\n        }\n        var other = o;\n        return this.value === other.value;\n    };\n    Mode.prototype.toString = function () {\n        return this.stringValue;\n    };\n    Mode.FOR_BITS = new Map();\n    Mode.FOR_VALUE = new Map();\n    Mode.TERMINATOR = new Mode(ModeValues.TERMINATOR, 'TERMINATOR', Int32Array.from([0, 0, 0]), 0x00); // Not really a mode...\n    Mode.NUMERIC = new Mode(ModeValues.NUMERIC, 'NUMERIC', Int32Array.from([10, 12, 14]), 0x01);\n    Mode.ALPHANUMERIC = new Mode(ModeValues.ALPHANUMERIC, 'ALPHANUMERIC', Int32Array.from([9, 11, 13]), 0x02);\n    Mode.STRUCTURED_APPEND = new Mode(ModeValues.STRUCTURED_APPEND, 'STRUCTURED_APPEND', Int32Array.from([0, 0, 0]), 0x03); // Not supported\n    Mode.BYTE = new Mode(ModeValues.BYTE, 'BYTE', Int32Array.from([8, 16, 16]), 0x04);\n    Mode.ECI = new Mode(ModeValues.ECI, 'ECI', Int32Array.from([0, 0, 0]), 0x07); // character counts don't apply\n    Mode.KANJI = new Mode(ModeValues.KANJI, 'KANJI', Int32Array.from([8, 10, 12]), 0x08);\n    Mode.FNC1_FIRST_POSITION = new Mode(ModeValues.FNC1_FIRST_POSITION, 'FNC1_FIRST_POSITION', Int32Array.from([0, 0, 0]), 0x05);\n    Mode.FNC1_SECOND_POSITION = new Mode(ModeValues.FNC1_SECOND_POSITION, 'FNC1_SECOND_POSITION', Int32Array.from([0, 0, 0]), 0x09);\n    /** See GBT 18284-2000; \"Hanzi\" is a transliteration of this mode name. */\n    Mode.HANZI = new Mode(ModeValues.HANZI, 'HANZI', Int32Array.from([8, 10, 12]), 0x0D);\n    return Mode;\n}());\nexports.default = Mode;\n//# sourceMappingURL=Mode.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","ModeValues","IllegalArgumentException_1","Mode","stringValue","characterCountBitsForVersions","bits","FOR_BITS","set","FOR_VALUE","forBits","Mode.forBits","mode","get","undefined","default","prototype","getCharacterCountBits","Mode.prototype.getCharacterCountBits","version","versionNumber","getVersionNumber","offset","getValue","Mode.prototype.getValue","getBits","Mode.prototype.getBits","equals","Mode.prototype.equals","o","toString","Mode.prototype.toString","Map","TERMINATOR","Int32Array","from","NUMERIC","ALPHANUMERIC","STRUCTURED_APPEND","BYTE","ECI","KANJI","FNC1_FIRST_POSITION","FNC1_SECOND_POSITION","HANZI"]
}
