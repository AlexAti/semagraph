{
"version":3,
"file":"module$node_modules$$zxing$library$cjs$core$qrcode$encoder$MatrixUtil.js",
"lineCount":19,
"mappings":"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",
"sources":["node_modules/@zxing/library/cjs/core/qrcode/encoder/MatrixUtil.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$zxing$library$cjs$core$qrcode$encoder$MatrixUtil\"] = function(global,require,module,exports) {\n\"use strict\";\n/*\n * Copyright 2008 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/*namespace com.google.zxing.qrcode.encoder {*/\nvar BitArray_1 = require(\"../../common/BitArray\");\nvar Integer_1 = require(\"../../util/Integer\");\nvar QRCode_1 = require(\"./QRCode\");\nvar MaskUtil_1 = require(\"./MaskUtil\");\nvar WriterException_1 = require(\"../../WriterException\");\nvar IllegalArgumentException_1 = require(\"../../IllegalArgumentException\");\n/**\n * @author satorux@google.com (Satoru Takabayashi) - creator\n * @author dswitkin@google.com (Daniel Switkin) - ported from C++\n */\nvar MatrixUtil = /** @class */ (function () {\n    function MatrixUtil() {\n        // do nothing\n    }\n    // Set all cells to -1 (TYPESCRIPTPORT: 255).  -1 (TYPESCRIPTPORT: 255) means that the cell is empty (not set yet).\n    //\n    // JAVAPORT: We shouldn't need to do this at all. The code should be rewritten to begin encoding\n    // with the ByteMatrix initialized all to zero.\n    MatrixUtil.clearMatrix = function (matrix) {\n        // TYPESCRIPTPORT: we use UintArray se changed here from -1 to 255\n        matrix.clear(/*(byte) */ /*-1*/ 255);\n    };\n    // Build 2D matrix of QR Code from \"dataBits\" with \"ecLevel\", \"version\" and \"getMaskPattern\". On\n    // success, store the result in \"matrix\" and return true.\n    MatrixUtil.buildMatrix = function (dataBits, ecLevel, version, maskPattern /*int*/, matrix) {\n        MatrixUtil.clearMatrix(matrix);\n        MatrixUtil.embedBasicPatterns(version, matrix);\n        // Type information appear with any version.\n        MatrixUtil.embedTypeInfo(ecLevel, maskPattern, matrix);\n        // Version info appear if version >= 7.\n        MatrixUtil.maybeEmbedVersionInfo(version, matrix);\n        // Data should be embedded at end.\n        MatrixUtil.embedDataBits(dataBits, maskPattern, matrix);\n    };\n    // Embed basic patterns. On success, modify the matrix and return true.\n    // The basic patterns are:\n    // - Position detection patterns\n    // - Timing patterns\n    // - Dark dot at the left bottom corner\n    // - Position adjustment patterns, if need be\n    MatrixUtil.embedBasicPatterns = function (version, matrix) {\n        // Let's get started with embedding big squares at corners.\n        MatrixUtil.embedPositionDetectionPatternsAndSeparators(matrix);\n        // Then, embed the dark dot at the left bottom corner.\n        MatrixUtil.embedDarkDotAtLeftBottomCorner(matrix);\n        // Position adjustment patterns appear if version >= 2.\n        MatrixUtil.maybeEmbedPositionAdjustmentPatterns(version, matrix);\n        // Timing patterns should be embedded after position adj. patterns.\n        MatrixUtil.embedTimingPatterns(matrix);\n    };\n    // Embed type information. On success, modify the matrix.\n    MatrixUtil.embedTypeInfo = function (ecLevel, maskPattern /*int*/, matrix) {\n        var typeInfoBits = new BitArray_1.default();\n        MatrixUtil.makeTypeInfoBits(ecLevel, maskPattern, typeInfoBits);\n        for (var i = 0, size = typeInfoBits.getSize(); i < size; ++i) {\n            // Place bits in LSB to MSB order.  LSB (least significant bit) is the last value in\n            // \"typeInfoBits\".\n            var bit = typeInfoBits.get(typeInfoBits.getSize() - 1 - i);\n            // Type info bits at the left top corner. See 8.9 of JISX0510:2004 (p.46).\n            var coordinates = MatrixUtil.TYPE_INFO_COORDINATES[i];\n            var x1 = coordinates[0];\n            var y1 = coordinates[1];\n            matrix.setBoolean(x1, y1, bit);\n            if (i < 8) {\n                // Right top corner.\n                var x2 = matrix.getWidth() - i - 1;\n                var y2 = 8;\n                matrix.setBoolean(x2, y2, bit);\n            }\n            else {\n                // Left bottom corner.\n                var x2 = 8;\n                var y2 = matrix.getHeight() - 7 + (i - 8);\n                matrix.setBoolean(x2, y2, bit);\n            }\n        }\n    };\n    // Embed version information if need be. On success, modify the matrix and return true.\n    // See 8.10 of JISX0510:2004 (p.47) for how to embed version information.\n    MatrixUtil.maybeEmbedVersionInfo = function (version, matrix) {\n        if (version.getVersionNumber() < 7) { // Version info is necessary if version >= 7.\n            return; // Don't need version info.\n        }\n        var versionInfoBits = new BitArray_1.default();\n        MatrixUtil.makeVersionInfoBits(version, versionInfoBits);\n        var bitIndex = 6 * 3 - 1; // It will decrease from 17 to 0.\n        for (var i = 0; i < 6; ++i) {\n            for (var j = 0; j < 3; ++j) {\n                // Place bits in LSB (least significant bit) to MSB order.\n                var bit = versionInfoBits.get(bitIndex);\n                bitIndex--;\n                // Left bottom corner.\n                matrix.setBoolean(i, matrix.getHeight() - 11 + j, bit);\n                // Right bottom corner.\n                matrix.setBoolean(matrix.getHeight() - 11 + j, i, bit);\n            }\n        }\n    };\n    // Embed \"dataBits\" using \"getMaskPattern\". On success, modify the matrix and return true.\n    // For debugging purposes, it skips masking process if \"getMaskPattern\" is -1(TYPESCRIPTPORT: 255).\n    // See 8.7 of JISX0510:2004 (p.38) for how to embed data bits.\n    MatrixUtil.embedDataBits = function (dataBits, maskPattern /*int*/, matrix) {\n        var bitIndex = 0;\n        var direction = -1;\n        // Start from the right bottom cell.\n        var x = matrix.getWidth() - 1;\n        var y = matrix.getHeight() - 1;\n        while (x > 0) {\n            // Skip the vertical timing pattern.\n            if (x === 6) {\n                x -= 1;\n            }\n            while (y >= 0 && y < matrix.getHeight()) {\n                for (var i = 0; i < 2; ++i) {\n                    var xx = x - i;\n                    // Skip the cell if it's not empty.\n                    if (!MatrixUtil.isEmpty(matrix.get(xx, y))) {\n                        continue;\n                    }\n                    var bit = void 0;\n                    if (bitIndex < dataBits.getSize()) {\n                        bit = dataBits.get(bitIndex);\n                        ++bitIndex;\n                    }\n                    else {\n                        // Padding bit. If there is no bit left, we'll fill the left cells with 0, as described\n                        // in 8.4.9 of JISX0510:2004 (p. 24).\n                        bit = false;\n                    }\n                    // Skip masking if mask_pattern is -1 (TYPESCRIPTPORT: 255).\n                    if (maskPattern !== 255 && MaskUtil_1.default.getDataMaskBit(maskPattern, xx, y)) {\n                        bit = !bit;\n                    }\n                    matrix.setBoolean(xx, y, bit);\n                }\n                y += direction;\n            }\n            direction = -direction; // Reverse the direction.\n            y += direction;\n            x -= 2; // Move to the left.\n        }\n        // All bits should be consumed.\n        if (bitIndex !== dataBits.getSize()) {\n            throw new WriterException_1.default('Not all bits consumed: ' + bitIndex + '/' + dataBits.getSize());\n        }\n    };\n    // Return the position of the most significant bit set (one: to) in the \"value\". The most\n    // significant bit is position 32. If there is no bit set, return 0. Examples:\n    // - findMSBSet(0) => 0\n    // - findMSBSet(1) => 1\n    // - findMSBSet(255) => 8\n    MatrixUtil.findMSBSet = function (value /*int*/) {\n        return 32 - Integer_1.default.numberOfLeadingZeros(value);\n    };\n    // Calculate BCH (Bose-Chaudhuri-Hocquenghem) code for \"value\" using polynomial \"poly\". The BCH\n    // code is used for encoding type information and version information.\n    // Example: Calculation of version information of 7.\n    // f(x) is created from 7.\n    //   - 7 = 000111 in 6 bits\n    //   - f(x) = x^2 + x^1 + x^0\n    // g(x) is given by the standard (p. 67)\n    //   - g(x) = x^12 + x^11 + x^10 + x^9 + x^8 + x^5 + x^2 + 1\n    // Multiply f(x) by x^(18 - 6)\n    //   - f'(x) = f(x) * x^(18 - 6)\n    //   - f'(x) = x^14 + x^13 + x^12\n    // Calculate the remainder of f'(x) / g(x)\n    //         x^2\n    //         __________________________________________________\n    //   g(x) )x^14 + x^13 + x^12\n    //         x^14 + x^13 + x^12 + x^11 + x^10 + x^7 + x^4 + x^2\n    //         --------------------------------------------------\n    //                              x^11 + x^10 + x^7 + x^4 + x^2\n    //\n    // The remainder is x^11 + x^10 + x^7 + x^4 + x^2\n    // Encode it in binary: 110010010100\n    // The return value is 0xc94 (1100 1001 0100)\n    //\n    // Since all coefficients in the polynomials are 1 or 0, we can do the calculation by bit\n    // operations. We don't care if coefficients are positive or negative.\n    MatrixUtil.calculateBCHCode = function (value /*int*/, poly /*int*/) {\n        if (poly === 0) {\n            throw new IllegalArgumentException_1.default('0 polynomial');\n        }\n        // If poly is \"1 1111 0010 0101\" (version info poly), msbSetInPoly is 13. We'll subtract 1\n        // from 13 to make it 12.\n        var msbSetInPoly = MatrixUtil.findMSBSet(poly);\n        value <<= msbSetInPoly - 1;\n        // Do the division business using exclusive-or operations.\n        while (MatrixUtil.findMSBSet(value) >= msbSetInPoly) {\n            value ^= poly << (MatrixUtil.findMSBSet(value) - msbSetInPoly);\n        }\n        // Now the \"value\" is the remainder (i.e. the BCH code)\n        return value;\n    };\n    // Make bit vector of type information. On success, store the result in \"bits\" and return true.\n    // Encode error correction level and mask pattern. See 8.9 of\n    // JISX0510:2004 (p.45) for details.\n    MatrixUtil.makeTypeInfoBits = function (ecLevel, maskPattern /*int*/, bits) {\n        if (!QRCode_1.default.isValidMaskPattern(maskPattern)) {\n            throw new WriterException_1.default('Invalid mask pattern');\n        }\n        var typeInfo = (ecLevel.getBits() << 3) | maskPattern;\n        bits.appendBits(typeInfo, 5);\n        var bchCode = MatrixUtil.calculateBCHCode(typeInfo, MatrixUtil.TYPE_INFO_POLY);\n        bits.appendBits(bchCode, 10);\n        var maskBits = new BitArray_1.default();\n        maskBits.appendBits(MatrixUtil.TYPE_INFO_MASK_PATTERN, 15);\n        bits.xor(maskBits);\n        if (bits.getSize() !== 15) { // Just in case.\n            throw new WriterException_1.default('should not happen but we got: ' + bits.getSize());\n        }\n    };\n    // Make bit vector of version information. On success, store the result in \"bits\" and return true.\n    // See 8.10 of JISX0510:2004 (p.45) for details.\n    MatrixUtil.makeVersionInfoBits = function (version, bits) {\n        bits.appendBits(version.getVersionNumber(), 6);\n        var bchCode = MatrixUtil.calculateBCHCode(version.getVersionNumber(), MatrixUtil.VERSION_INFO_POLY);\n        bits.appendBits(bchCode, 12);\n        if (bits.getSize() !== 18) { // Just in case.\n            throw new WriterException_1.default('should not happen but we got: ' + bits.getSize());\n        }\n    };\n    // Check if \"value\" is empty.\n    MatrixUtil.isEmpty = function (value /*int*/) {\n        return value === 255; // -1\n    };\n    MatrixUtil.embedTimingPatterns = function (matrix) {\n        // -8 is for skipping position detection patterns (7: size), and two horizontal/vertical\n        // separation patterns (1: size). Thus, 8 = 7 + 1.\n        for (var i = 8; i < matrix.getWidth() - 8; ++i) {\n            var bit = (i + 1) % 2;\n            // Horizontal line.\n            if (MatrixUtil.isEmpty(matrix.get(i, 6))) {\n                matrix.setNumber(i, 6, bit);\n            }\n            // Vertical line.\n            if (MatrixUtil.isEmpty(matrix.get(6, i))) {\n                matrix.setNumber(6, i, bit);\n            }\n        }\n    };\n    // Embed the lonely dark dot at left bottom corner. JISX0510:2004 (p.46)\n    MatrixUtil.embedDarkDotAtLeftBottomCorner = function (matrix) {\n        if (matrix.get(8, matrix.getHeight() - 8) === 0) {\n            throw new WriterException_1.default();\n        }\n        matrix.setNumber(8, matrix.getHeight() - 8, 1);\n    };\n    MatrixUtil.embedHorizontalSeparationPattern = function (xStart /*int*/, yStart /*int*/, matrix) {\n        for (var x = 0; x < 8; ++x) {\n            if (!MatrixUtil.isEmpty(matrix.get(xStart + x, yStart))) {\n                throw new WriterException_1.default();\n            }\n            matrix.setNumber(xStart + x, yStart, 0);\n        }\n    };\n    MatrixUtil.embedVerticalSeparationPattern = function (xStart /*int*/, yStart /*int*/, matrix) {\n        for (var y = 0; y < 7; ++y) {\n            if (!MatrixUtil.isEmpty(matrix.get(xStart, yStart + y))) {\n                throw new WriterException_1.default();\n            }\n            matrix.setNumber(xStart, yStart + y, 0);\n        }\n    };\n    MatrixUtil.embedPositionAdjustmentPattern = function (xStart /*int*/, yStart /*int*/, matrix) {\n        for (var y = 0; y < 5; ++y) {\n            var patternY = MatrixUtil.POSITION_ADJUSTMENT_PATTERN[y];\n            for (var x = 0; x < 5; ++x) {\n                matrix.setNumber(xStart + x, yStart + y, patternY[x]);\n            }\n        }\n    };\n    MatrixUtil.embedPositionDetectionPattern = function (xStart /*int*/, yStart /*int*/, matrix) {\n        for (var y = 0; y < 7; ++y) {\n            var patternY = MatrixUtil.POSITION_DETECTION_PATTERN[y];\n            for (var x = 0; x < 7; ++x) {\n                matrix.setNumber(xStart + x, yStart + y, patternY[x]);\n            }\n        }\n    };\n    // Embed position detection patterns and surrounding vertical/horizontal separators.\n    MatrixUtil.embedPositionDetectionPatternsAndSeparators = function (matrix) {\n        // Embed three big squares at corners.\n        var pdpWidth = MatrixUtil.POSITION_DETECTION_PATTERN[0].length;\n        // Left top corner.\n        MatrixUtil.embedPositionDetectionPattern(0, 0, matrix);\n        // Right top corner.\n        MatrixUtil.embedPositionDetectionPattern(matrix.getWidth() - pdpWidth, 0, matrix);\n        // Left bottom corner.\n        MatrixUtil.embedPositionDetectionPattern(0, matrix.getWidth() - pdpWidth, matrix);\n        // Embed horizontal separation patterns around the squares.\n        var hspWidth = 8;\n        // Left top corner.\n        MatrixUtil.embedHorizontalSeparationPattern(0, hspWidth - 1, matrix);\n        // Right top corner.\n        MatrixUtil.embedHorizontalSeparationPattern(matrix.getWidth() - hspWidth, hspWidth - 1, matrix);\n        // Left bottom corner.\n        MatrixUtil.embedHorizontalSeparationPattern(0, matrix.getWidth() - hspWidth, matrix);\n        // Embed vertical separation patterns around the squares.\n        var vspSize = 7;\n        // Left top corner.\n        MatrixUtil.embedVerticalSeparationPattern(vspSize, 0, matrix);\n        // Right top corner.\n        MatrixUtil.embedVerticalSeparationPattern(matrix.getHeight() - vspSize - 1, 0, matrix);\n        // Left bottom corner.\n        MatrixUtil.embedVerticalSeparationPattern(vspSize, matrix.getHeight() - vspSize, matrix);\n    };\n    // Embed position adjustment patterns if need be.\n    MatrixUtil.maybeEmbedPositionAdjustmentPatterns = function (version, matrix) {\n        if (version.getVersionNumber() < 2) { // The patterns appear if version >= 2\n            return;\n        }\n        var index = version.getVersionNumber() - 1;\n        var coordinates = MatrixUtil.POSITION_ADJUSTMENT_PATTERN_COORDINATE_TABLE[index];\n        for (var i = 0, length_1 = coordinates.length; i !== length_1; i++) {\n            var y = coordinates[i];\n            if (y >= 0) {\n                for (var j = 0; j !== length_1; j++) {\n                    var x = coordinates[j];\n                    if (x >= 0 && MatrixUtil.isEmpty(matrix.get(x, y))) {\n                        // If the cell is unset, we embed the position adjustment pattern here.\n                        // -2 is necessary since the x/y coordinates point to the center of the pattern, not the\n                        // left top corner.\n                        MatrixUtil.embedPositionAdjustmentPattern(x - 2, y - 2, matrix);\n                    }\n                }\n            }\n        }\n    };\n    MatrixUtil.POSITION_DETECTION_PATTERN = Array.from([\n        Int32Array.from([1, 1, 1, 1, 1, 1, 1]),\n        Int32Array.from([1, 0, 0, 0, 0, 0, 1]),\n        Int32Array.from([1, 0, 1, 1, 1, 0, 1]),\n        Int32Array.from([1, 0, 1, 1, 1, 0, 1]),\n        Int32Array.from([1, 0, 1, 1, 1, 0, 1]),\n        Int32Array.from([1, 0, 0, 0, 0, 0, 1]),\n        Int32Array.from([1, 1, 1, 1, 1, 1, 1]),\n    ]);\n    MatrixUtil.POSITION_ADJUSTMENT_PATTERN = Array.from([\n        Int32Array.from([1, 1, 1, 1, 1]),\n        Int32Array.from([1, 0, 0, 0, 1]),\n        Int32Array.from([1, 0, 1, 0, 1]),\n        Int32Array.from([1, 0, 0, 0, 1]),\n        Int32Array.from([1, 1, 1, 1, 1]),\n    ]);\n    // From Appendix E. Table 1, JIS0510X:2004 (71: p). The table was double-checked by komatsu.\n    MatrixUtil.POSITION_ADJUSTMENT_PATTERN_COORDINATE_TABLE = Array.from([\n        Int32Array.from([-1, -1, -1, -1, -1, -1, -1]),\n        Int32Array.from([6, 18, -1, -1, -1, -1, -1]),\n        Int32Array.from([6, 22, -1, -1, -1, -1, -1]),\n        Int32Array.from([6, 26, -1, -1, -1, -1, -1]),\n        Int32Array.from([6, 30, -1, -1, -1, -1, -1]),\n        Int32Array.from([6, 34, -1, -1, -1, -1, -1]),\n        Int32Array.from([6, 22, 38, -1, -1, -1, -1]),\n        Int32Array.from([6, 24, 42, -1, -1, -1, -1]),\n        Int32Array.from([6, 26, 46, -1, -1, -1, -1]),\n        Int32Array.from([6, 28, 50, -1, -1, -1, -1]),\n        Int32Array.from([6, 30, 54, -1, -1, -1, -1]),\n        Int32Array.from([6, 32, 58, -1, -1, -1, -1]),\n        Int32Array.from([6, 34, 62, -1, -1, -1, -1]),\n        Int32Array.from([6, 26, 46, 66, -1, -1, -1]),\n        Int32Array.from([6, 26, 48, 70, -1, -1, -1]),\n        Int32Array.from([6, 26, 50, 74, -1, -1, -1]),\n        Int32Array.from([6, 30, 54, 78, -1, -1, -1]),\n        Int32Array.from([6, 30, 56, 82, -1, -1, -1]),\n        Int32Array.from([6, 30, 58, 86, -1, -1, -1]),\n        Int32Array.from([6, 34, 62, 90, -1, -1, -1]),\n        Int32Array.from([6, 28, 50, 72, 94, -1, -1]),\n        Int32Array.from([6, 26, 50, 74, 98, -1, -1]),\n        Int32Array.from([6, 30, 54, 78, 102, -1, -1]),\n        Int32Array.from([6, 28, 54, 80, 106, -1, -1]),\n        Int32Array.from([6, 32, 58, 84, 110, -1, -1]),\n        Int32Array.from([6, 30, 58, 86, 114, -1, -1]),\n        Int32Array.from([6, 34, 62, 90, 118, -1, -1]),\n        Int32Array.from([6, 26, 50, 74, 98, 122, -1]),\n        Int32Array.from([6, 30, 54, 78, 102, 126, -1]),\n        Int32Array.from([6, 26, 52, 78, 104, 130, -1]),\n        Int32Array.from([6, 30, 56, 82, 108, 134, -1]),\n        Int32Array.from([6, 34, 60, 86, 112, 138, -1]),\n        Int32Array.from([6, 30, 58, 86, 114, 142, -1]),\n        Int32Array.from([6, 34, 62, 90, 118, 146, -1]),\n        Int32Array.from([6, 30, 54, 78, 102, 126, 150]),\n        Int32Array.from([6, 24, 50, 76, 102, 128, 154]),\n        Int32Array.from([6, 28, 54, 80, 106, 132, 158]),\n        Int32Array.from([6, 32, 58, 84, 110, 136, 162]),\n        Int32Array.from([6, 26, 54, 82, 110, 138, 166]),\n        Int32Array.from([6, 30, 58, 86, 114, 142, 170]),\n    ]);\n    // Type info cells at the left top corner.\n    MatrixUtil.TYPE_INFO_COORDINATES = Array.from([\n        Int32Array.from([8, 0]),\n        Int32Array.from([8, 1]),\n        Int32Array.from([8, 2]),\n        Int32Array.from([8, 3]),\n        Int32Array.from([8, 4]),\n        Int32Array.from([8, 5]),\n        Int32Array.from([8, 7]),\n        Int32Array.from([8, 8]),\n        Int32Array.from([7, 8]),\n        Int32Array.from([5, 8]),\n        Int32Array.from([4, 8]),\n        Int32Array.from([3, 8]),\n        Int32Array.from([2, 8]),\n        Int32Array.from([1, 8]),\n        Int32Array.from([0, 8]),\n    ]);\n    // From Appendix D in JISX0510:2004 (p. 67)\n    MatrixUtil.VERSION_INFO_POLY = 0x1f25; // 1 1111 0010 0101\n    // From Appendix C in JISX0510:2004 (p.65).\n    MatrixUtil.TYPE_INFO_POLY = 0x537;\n    MatrixUtil.TYPE_INFO_MASK_PATTERN = 0x5412;\n    return MatrixUtil;\n}());\nexports.default = MatrixUtil;\n//# sourceMappingURL=MatrixUtil.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","BitArray_1","Integer_1","QRCode_1","MaskUtil_1","WriterException_1","IllegalArgumentException_1","MatrixUtil","clearMatrix","MatrixUtil.clearMatrix","matrix","clear","buildMatrix","MatrixUtil.buildMatrix","dataBits","ecLevel","version","maskPattern","embedBasicPatterns","embedTypeInfo","maybeEmbedVersionInfo","embedDataBits","MatrixUtil.embedBasicPatterns","embedPositionDetectionPatternsAndSeparators","embedDarkDotAtLeftBottomCorner","maybeEmbedPositionAdjustmentPatterns","embedTimingPatterns","MatrixUtil.embedTypeInfo","typeInfoBits","default","makeTypeInfoBits","i","size","getSize","bit","get","coordinates","TYPE_INFO_COORDINATES","setBoolean","x1","y1","x2","getWidth","y2","getHeight","MatrixUtil.maybeEmbedVersionInfo","getVersionNumber","versionInfoBits","makeVersionInfoBits","bitIndex","j","MatrixUtil.embedDataBits","direction","x","y","xx","isEmpty","getDataMaskBit","findMSBSet","MatrixUtil.findMSBSet","numberOfLeadingZeros","calculateBCHCode","MatrixUtil.calculateBCHCode","poly","msbSetInPoly","MatrixUtil.makeTypeInfoBits","bits","isValidMaskPattern","typeInfo","getBits","appendBits","bchCode","TYPE_INFO_POLY","maskBits","TYPE_INFO_MASK_PATTERN","xor","MatrixUtil.makeVersionInfoBits","VERSION_INFO_POLY","MatrixUtil.isEmpty","MatrixUtil.embedTimingPatterns","setNumber","MatrixUtil.embedDarkDotAtLeftBottomCorner","embedHorizontalSeparationPattern","MatrixUtil.embedHorizontalSeparationPattern","xStart","yStart","embedVerticalSeparationPattern","MatrixUtil.embedVerticalSeparationPattern","embedPositionAdjustmentPattern","MatrixUtil.embedPositionAdjustmentPattern","patternY","POSITION_ADJUSTMENT_PATTERN","embedPositionDetectionPattern","MatrixUtil.embedPositionDetectionPattern","POSITION_DETECTION_PATTERN","MatrixUtil.embedPositionDetectionPatternsAndSeparators","pdpWidth","length","hspWidth","vspSize","MatrixUtil.maybeEmbedPositionAdjustmentPatterns","index","POSITION_ADJUSTMENT_PATTERN_COORDINATE_TABLE","length_1","Array","from","Int32Array"]
}
