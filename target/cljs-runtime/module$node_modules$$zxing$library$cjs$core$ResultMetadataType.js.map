{
"version":3,
"file":"module$node_modules$$zxing$library$cjs$core$ResultMetadataType.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,8DAAA,CAAmF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAiB3HC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAAEG,MAAO,CAAA,CAAT,CAA7C,CAQA,KAAIC,kBA6DD,OAAA,CAAAA,kBAAA,GAAuBA,kBAAvB,CAA4C,EAA5C,CAxDCA,OAAA,CAAmBA,MAAA,CAAA,KAAnB,CAAiD,CAAjD,CAAA,CAAsD,OAQtDA,OAAA,CAAmBA,MAAA,CAAA,WAAnB,CAAuD,CAAvD,CAAA,CAA4D,aAU5DA,OAAA,CAAmBA,MAAA,CAAA,aAAnB,CAAyD,CAAzD,CAAA,CAA8D,eAK9DA,OAAA,CAAmBA,MAAA,CAAA,sBAAnB,CAAkE,CAAlE,CAAA,CAAuE,wBAIvEA,OAAA,CAAmBA,MAAA,CAAA,YAAnB,CAAwD,CAAxD,CAAA,CAA6D,cAK7DA,OAAA,CAAmBA,MAAA,CAAA,eAAnB;AAA2D,CAA3D,CAAA,CAAgE,iBAKhEA,OAAA,CAAmBA,MAAA,CAAA,gBAAnB,CAA4D,CAA5D,CAAA,CAAiE,kBAIjEA,OAAA,CAAmBA,MAAA,CAAA,iBAAnB,CAA6D,CAA7D,CAAA,CAAkE,mBAIlEA,OAAA,CAAmBA,MAAA,CAAA,qBAAnB,CAAiE,CAAjE,CAAA,CAAsE,uBAKtEA,OAAA,CAAmBA,MAAA,CAAA,0BAAnB,CAAsE,CAAtE,CAAA,CAA2E,4BAK3EA,OAAA,CAAmBA,MAAA,CAAA,wBAAnB,CAAoE,EAApE,CAAA,CAA0E,0BAE9EJ,QAAQK,CAAAA,OAAR,CAAkBD,kBAvFyG;",
"sources":["node_modules/@zxing/library/cjs/core/ResultMetadataType.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$zxing$library$cjs$core$ResultMetadataType\"] = function(global,require,module,exports) {\n\"use strict\";\n/*\n * Copyright 2008 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/*namespace com.google.zxing {*/\n/**\n * Represents some type of metadata about the result of the decoding that the decoder\n * wishes to communicate back to the caller.\n *\n * @author Sean Owen\n */\nvar ResultMetadataType;\n(function (ResultMetadataType) {\n    /**\n     * Unspecified, application-specific metadata. Maps to an unspecified {@link Object}.\n     */\n    ResultMetadataType[ResultMetadataType[\"OTHER\"] = 0] = \"OTHER\";\n    /**\n     * Denotes the likely approximate orientation of the barcode in the image. This value\n     * is given as degrees rotated clockwise from the normal, upright orientation.\n     * For example a 1D barcode which was found by reading top-to-bottom would be\n     * said to have orientation \"90\". This key maps to an {@link Integer} whose\n     * value is in the range [0,360).\n     */\n    ResultMetadataType[ResultMetadataType[\"ORIENTATION\"] = 1] = \"ORIENTATION\";\n    /**\n     * <p>2D barcode formats typically encode text, but allow for a sort of 'byte mode'\n     * which is sometimes used to encode binary data. While {@link Result} makes available\n     * the complete raw bytes in the barcode for these formats, it does not offer the bytes\n     * from the byte segments alone.</p>\n     *\n     * <p>This maps to a {@link java.util.List} of byte arrays corresponding to the\n     * raw bytes in the byte segments in the barcode, in order.</p>\n     */\n    ResultMetadataType[ResultMetadataType[\"BYTE_SEGMENTS\"] = 2] = \"BYTE_SEGMENTS\";\n    /**\n     * Error correction level used, if applicable. The value type depends on the\n     * format, but is typically a String.\n     */\n    ResultMetadataType[ResultMetadataType[\"ERROR_CORRECTION_LEVEL\"] = 3] = \"ERROR_CORRECTION_LEVEL\";\n    /**\n     * For some periodicals, indicates the issue number as an {@link Integer}.\n     */\n    ResultMetadataType[ResultMetadataType[\"ISSUE_NUMBER\"] = 4] = \"ISSUE_NUMBER\";\n    /**\n     * For some products, indicates the suggested retail price in the barcode as a\n     * formatted {@link String}.\n     */\n    ResultMetadataType[ResultMetadataType[\"SUGGESTED_PRICE\"] = 5] = \"SUGGESTED_PRICE\";\n    /**\n     * For some products, the possible country of manufacture as a {@link String} denoting the\n     * ISO country code. Some map to multiple possible countries, like \"US/CA\".\n     */\n    ResultMetadataType[ResultMetadataType[\"POSSIBLE_COUNTRY\"] = 6] = \"POSSIBLE_COUNTRY\";\n    /**\n     * For some products, the extension text\n     */\n    ResultMetadataType[ResultMetadataType[\"UPC_EAN_EXTENSION\"] = 7] = \"UPC_EAN_EXTENSION\";\n    /**\n     * PDF417-specific metadata\n     */\n    ResultMetadataType[ResultMetadataType[\"PDF417_EXTRA_METADATA\"] = 8] = \"PDF417_EXTRA_METADATA\";\n    /**\n     * If the code format supports structured append and the current scanned code is part of one then the\n     * sequence number is given with it.\n     */\n    ResultMetadataType[ResultMetadataType[\"STRUCTURED_APPEND_SEQUENCE\"] = 9] = \"STRUCTURED_APPEND_SEQUENCE\";\n    /**\n     * If the code format supports structured append and the current scanned code is part of one then the\n     * parity is given with it.\n     */\n    ResultMetadataType[ResultMetadataType[\"STRUCTURED_APPEND_PARITY\"] = 10] = \"STRUCTURED_APPEND_PARITY\";\n})(ResultMetadataType || (ResultMetadataType = {}));\nexports.default = ResultMetadataType;\n//# sourceMappingURL=ResultMetadataType.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","ResultMetadataType","default"]
}
