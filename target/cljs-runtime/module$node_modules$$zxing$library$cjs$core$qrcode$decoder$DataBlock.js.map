{
"version":3,
"file":"module$node_modules$$zxing$library$cjs$core$qrcode$decoder$DataBlock.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/@zxing/library/cjs/core/qrcode/decoder/DataBlock.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$zxing$library$cjs$core$qrcode$decoder$DataBlock\"] = function(global,require,module,exports) {\n\"use strict\";\n/*\n * Copyright 2007 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar IllegalArgumentException_1 = require(\"../../IllegalArgumentException\");\n/**\n * <p>Encapsulates a block of data within a QR Code. QR Codes may split their data into\n * multiple blocks, each of which is a unit of data and error-correction codewords. Each\n * is represented by an instance of this class.</p>\n *\n * @author Sean Owen\n */\nvar DataBlock = /** @class */ (function () {\n    function DataBlock(numDataCodewords /*int*/, codewords) {\n        this.numDataCodewords = numDataCodewords;\n        this.codewords = codewords;\n    }\n    /**\n     * <p>When QR Codes use multiple data blocks, they are actually interleaved.\n     * That is, the first byte of data block 1 to n is written, then the second bytes, and so on. This\n     * method will separate the data into original blocks.</p>\n     *\n     * @param rawCodewords bytes as read directly from the QR Code\n     * @param version version of the QR Code\n     * @param ecLevel error-correction level of the QR Code\n     * @return DataBlocks containing original bytes, \"de-interleaved\" from representation in the\n     *         QR Code\n     */\n    DataBlock.getDataBlocks = function (rawCodewords, version, ecLevel) {\n        var e_1, _a, e_2, _b;\n        if (rawCodewords.length !== version.getTotalCodewords()) {\n            throw new IllegalArgumentException_1.default();\n        }\n        // Figure out the number and size of data blocks used by this version and\n        // error correction level\n        var ecBlocks = version.getECBlocksForLevel(ecLevel);\n        // First count the total number of data blocks\n        var totalBlocks = 0;\n        var ecBlockArray = ecBlocks.getECBlocks();\n        try {\n            for (var ecBlockArray_1 = __values(ecBlockArray), ecBlockArray_1_1 = ecBlockArray_1.next(); !ecBlockArray_1_1.done; ecBlockArray_1_1 = ecBlockArray_1.next()) {\n                var ecBlock = ecBlockArray_1_1.value;\n                totalBlocks += ecBlock.getCount();\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (ecBlockArray_1_1 && !ecBlockArray_1_1.done && (_a = ecBlockArray_1.return)) _a.call(ecBlockArray_1);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        // Now establish DataBlocks of the appropriate size and number of data codewords\n        var result = new Array(totalBlocks);\n        var numResultBlocks = 0;\n        try {\n            for (var ecBlockArray_2 = __values(ecBlockArray), ecBlockArray_2_1 = ecBlockArray_2.next(); !ecBlockArray_2_1.done; ecBlockArray_2_1 = ecBlockArray_2.next()) {\n                var ecBlock = ecBlockArray_2_1.value;\n                for (var i = 0; i < ecBlock.getCount(); i++) {\n                    var numDataCodewords = ecBlock.getDataCodewords();\n                    var numBlockCodewords = ecBlocks.getECCodewordsPerBlock() + numDataCodewords;\n                    result[numResultBlocks++] = new DataBlock(numDataCodewords, new Uint8Array(numBlockCodewords));\n                }\n            }\n        }\n        catch (e_2_1) { e_2 = { error: e_2_1 }; }\n        finally {\n            try {\n                if (ecBlockArray_2_1 && !ecBlockArray_2_1.done && (_b = ecBlockArray_2.return)) _b.call(ecBlockArray_2);\n            }\n            finally { if (e_2) throw e_2.error; }\n        }\n        // All blocks have the same amount of data, except that the last n\n        // (where n may be 0) have 1 more byte. Figure out where these start.\n        var shorterBlocksTotalCodewords = result[0].codewords.length;\n        var longerBlocksStartAt = result.length - 1;\n        // TYPESCRIPTPORT: check length is correct here\n        while (longerBlocksStartAt >= 0) {\n            var numCodewords = result[longerBlocksStartAt].codewords.length;\n            if (numCodewords === shorterBlocksTotalCodewords) {\n                break;\n            }\n            longerBlocksStartAt--;\n        }\n        longerBlocksStartAt++;\n        var shorterBlocksNumDataCodewords = shorterBlocksTotalCodewords - ecBlocks.getECCodewordsPerBlock();\n        // The last elements of result may be 1 element longer\n        // first fill out as many elements as all of them have\n        var rawCodewordsOffset = 0;\n        for (var i = 0; i < shorterBlocksNumDataCodewords; i++) {\n            for (var j = 0; j < numResultBlocks; j++) {\n                result[j].codewords[i] = rawCodewords[rawCodewordsOffset++];\n            }\n        }\n        // Fill out the last data block in the longer ones\n        for (var j = longerBlocksStartAt; j < numResultBlocks; j++) {\n            result[j].codewords[shorterBlocksNumDataCodewords] = rawCodewords[rawCodewordsOffset++];\n        }\n        // Now add in error correction blocks\n        var max = result[0].codewords.length;\n        for (var i = shorterBlocksNumDataCodewords; i < max; i++) {\n            for (var j = 0; j < numResultBlocks; j++) {\n                var iOffset = j < longerBlocksStartAt ? i : i + 1;\n                result[j].codewords[iOffset] = rawCodewords[rawCodewordsOffset++];\n            }\n        }\n        return result;\n    };\n    DataBlock.prototype.getNumDataCodewords = function () {\n        return this.numDataCodewords;\n    };\n    DataBlock.prototype.getCodewords = function () {\n        return this.codewords;\n    };\n    return DataBlock;\n}());\nexports.default = DataBlock;\n//# sourceMappingURL=DataBlock.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","__values","o","s","Symbol","iterator","m","i","call","length","next","value","done","TypeError","Object","defineProperty","IllegalArgumentException_1","DataBlock","numDataCodewords","codewords","getDataBlocks","DataBlock.getDataBlocks","rawCodewords","version","ecLevel","_a","_b","getTotalCodewords","default","ecBlocks","getECBlocksForLevel","totalBlocks","ecBlockArray","getECBlocks","ecBlockArray_1","ecBlockArray_1_1","ecBlock","getCount","e_1_1","e_1","error","return","result","Array","numResultBlocks","ecBlockArray_2","ecBlockArray_2_1","getDataCodewords","numBlockCodewords","getECCodewordsPerBlock","Uint8Array","e_2_1","e_2","shorterBlocksTotalCodewords","longerBlocksStartAt","shorterBlocksNumDataCodewords","rawCodewordsOffset","j","max","iOffset","prototype","getNumDataCodewords","DataBlock.prototype.getNumDataCodewords","getCodewords","DataBlock.prototype.getCodewords"]
}
