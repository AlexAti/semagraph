{
"version":3,
"file":"module$node_modules$$zxing$library$cjs$core$aztec$AztecReader.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/@zxing/library/cjs/core/aztec/AztecReader.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$zxing$library$cjs$core$aztec$AztecReader\"] = function(global,require,module,exports) {\n\"use strict\";\n/*\n * Copyright 2010 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Result_1 = require(\"../Result\");\nvar BarcodeFormat_1 = require(\"../BarcodeFormat\");\nvar DecodeHintType_1 = require(\"../DecodeHintType\");\nvar ResultMetadataType_1 = require(\"../ResultMetadataType\");\nvar System_1 = require(\"../util/System\");\nvar Decoder_1 = require(\"./decoder/Decoder\");\nvar Detector_1 = require(\"./detector/Detector\");\n// import java.util.List;\n// import java.util.Map;\n/**\n * This implementation can detect and decode Aztec codes in an image.\n *\n * @author David Olivier\n */\nvar AztecReader = /** @class */ (function () {\n    function AztecReader() {\n    }\n    /**\n     * Locates and decodes a Data Matrix code in an image.\n     *\n     * @return a String representing the content encoded by the Data Matrix code\n     * @throws NotFoundException if a Data Matrix code cannot be found\n     * @throws FormatException if a Data Matrix code cannot be decoded\n     */\n    AztecReader.prototype.decode = function (image, hints) {\n        if (hints === void 0) { hints = null; }\n        var exception = null;\n        var detector = new Detector_1.default(image.getBlackMatrix());\n        var points = null;\n        var decoderResult = null;\n        try {\n            var detectorResult = detector.detectMirror(false);\n            points = detectorResult.getPoints();\n            this.reportFoundResultPoints(hints, points);\n            decoderResult = new Decoder_1.default().decode(detectorResult);\n        }\n        catch (e) {\n            exception = e;\n        }\n        if (decoderResult == null) {\n            try {\n                var detectorResult = detector.detectMirror(true);\n                points = detectorResult.getPoints();\n                this.reportFoundResultPoints(hints, points);\n                decoderResult = new Decoder_1.default().decode(detectorResult);\n            }\n            catch (e) {\n                if (exception != null) {\n                    throw exception;\n                }\n                throw e;\n            }\n        }\n        var result = new Result_1.default(decoderResult.getText(), decoderResult.getRawBytes(), decoderResult.getNumBits(), points, BarcodeFormat_1.default.AZTEC, System_1.default.currentTimeMillis());\n        var byteSegments = decoderResult.getByteSegments();\n        if (byteSegments != null) {\n            result.putMetadata(ResultMetadataType_1.default.BYTE_SEGMENTS, byteSegments);\n        }\n        var ecLevel = decoderResult.getECLevel();\n        if (ecLevel != null) {\n            result.putMetadata(ResultMetadataType_1.default.ERROR_CORRECTION_LEVEL, ecLevel);\n        }\n        return result;\n    };\n    AztecReader.prototype.reportFoundResultPoints = function (hints, points) {\n        if (hints != null) {\n            var rpcb_1 = hints.get(DecodeHintType_1.default.NEED_RESULT_POINT_CALLBACK);\n            if (rpcb_1 != null) {\n                points.forEach(function (point, idx, arr) {\n                    rpcb_1.foundPossibleResultPoint(point);\n                });\n            }\n        }\n    };\n    // @Override\n    AztecReader.prototype.reset = function () {\n        // do nothing\n    };\n    return AztecReader;\n}());\nexports.default = AztecReader;\n//# sourceMappingURL=AztecReader.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","Result_1","BarcodeFormat_1","DecodeHintType_1","ResultMetadataType_1","System_1","Decoder_1","Detector_1","AztecReader","prototype","decode","AztecReader.prototype.decode","image","hints","exception","detector","default","getBlackMatrix","points","decoderResult","detectorResult","detectMirror","getPoints","reportFoundResultPoints","e","result","getText","getRawBytes","getNumBits","AZTEC","currentTimeMillis","byteSegments","getByteSegments","putMetadata","BYTE_SEGMENTS","ecLevel","getECLevel","ERROR_CORRECTION_LEVEL","AztecReader.prototype.reportFoundResultPoints","rpcb_1","get","NEED_RESULT_POINT_CALLBACK","forEach","point","idx","arr","foundPossibleResultPoint","reset","AztecReader.prototype.reset"]
}
