shadow$provide.module$node_modules$$zxing$library$cjs$core$common$HybridBinarizer=function(global,require,module,exports){var __extends=this&&this.__extends||function(){var extendStatics=function(d$jscomp$0,b$jscomp$0){extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b}||function(d,b){for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p])};return extendStatics(d$jscomp$0,b$jscomp$0)};return function(d,b){function __(){this.constructor=d}extendStatics(d,b);d.prototype=
null===b?Object.create(b):(__.prototype=b.prototype,new __)}}();Object.defineProperty(exports,"__esModule",{value:!0});global=require("module$node_modules$$zxing$library$cjs$core$common$GlobalHistogramBinarizer");var BitMatrix_1=require("module$node_modules$$zxing$library$cjs$core$common$BitMatrix");require=function(_super){function HybridBinarizer(source){source=_super.call(this,source)||this;source.matrix=null;return source}__extends(HybridBinarizer,_super);HybridBinarizer.prototype.getBlackMatrix=
function(){if(null!==this.matrix)return this.matrix;var source=this.getLuminanceSource(),width=source.getWidth(),height=source.getHeight();if(width>=HybridBinarizer.MINIMUM_DIMENSION&&height>=HybridBinarizer.MINIMUM_DIMENSION){source=source.getMatrix();var subWidth=width>>HybridBinarizer.BLOCK_SIZE_POWER;0!==(width&HybridBinarizer.BLOCK_SIZE_MASK)&&subWidth++;var subHeight=height>>HybridBinarizer.BLOCK_SIZE_POWER;0!==(height&HybridBinarizer.BLOCK_SIZE_MASK)&&subHeight++;var blackPoints=HybridBinarizer.calculateBlackPoints(source,
subWidth,subHeight,width,height),newMatrix=new BitMatrix_1.default(width,height);HybridBinarizer.calculateThresholdForBlock(source,subWidth,subHeight,width,height,blackPoints,newMatrix);this.matrix=newMatrix}else this.matrix=_super.prototype.getBlackMatrix.call(this);return this.matrix};HybridBinarizer.prototype.createBinarizer=function(source){return new HybridBinarizer(source)};HybridBinarizer.calculateThresholdForBlock=function(luminances,subWidth,subHeight,width,height,blackPoints,matrix){height-=
HybridBinarizer.BLOCK_SIZE;for(var maxXOffset=width-HybridBinarizer.BLOCK_SIZE,y=0;y<subHeight;y++){var yoffset=y<<HybridBinarizer.BLOCK_SIZE_POWER;yoffset>height&&(yoffset=height);for(var top_1=HybridBinarizer.cap(y,2,subHeight-3),x=0;x<subWidth;x++){var xoffset=x<<HybridBinarizer.BLOCK_SIZE_POWER;xoffset>maxXOffset&&(xoffset=maxXOffset);for(var left=HybridBinarizer.cap(x,2,subWidth-3),sum=0,z=-2;2>=z;z++){var blackRow=blackPoints[top_1+z];sum+=blackRow[left-2]+blackRow[left-1]+blackRow[left]+blackRow[left+
1]+blackRow[left+2]}HybridBinarizer.thresholdBlock(luminances,xoffset,yoffset,sum/25,width,matrix)}}};HybridBinarizer.cap=function(value,min,max){return value<min?min:value>max?max:value};HybridBinarizer.thresholdBlock=function(luminances,xoffset,yoffset,threshold,stride,matrix){for(var y=0,offset=yoffset*stride+xoffset;y<HybridBinarizer.BLOCK_SIZE;y++,offset+=stride)for(var x=0;x<HybridBinarizer.BLOCK_SIZE;x++)(luminances[offset+x]&255)<=threshold&&matrix.set(xoffset+x,yoffset+y)};HybridBinarizer.calculateBlackPoints=
function(luminances,subWidth,subHeight,width,height){height-=HybridBinarizer.BLOCK_SIZE;for(var maxXOffset=width-HybridBinarizer.BLOCK_SIZE,blackPoints=Array(subHeight),y=0;y<subHeight;y++){blackPoints[y]=new Int32Array(subWidth);var yoffset=y<<HybridBinarizer.BLOCK_SIZE_POWER;yoffset>height&&(yoffset=height);for(var x=0;x<subWidth;x++){var xoffset=x<<HybridBinarizer.BLOCK_SIZE_POWER;xoffset>maxXOffset&&(xoffset=maxXOffset);var sum=0,min=255,max=0,yy=0;for(xoffset=yoffset*width+xoffset;yy<HybridBinarizer.BLOCK_SIZE;yy++,
xoffset+=width){for(var xx=0;xx<HybridBinarizer.BLOCK_SIZE;xx++){var pixel=luminances[xoffset+xx]&255;sum+=pixel;pixel<min&&(min=pixel);pixel>max&&(max=pixel)}if(max-min>HybridBinarizer.MIN_DYNAMIC_RANGE)for(yy++,xoffset+=width;yy<HybridBinarizer.BLOCK_SIZE;yy++,xoffset+=width)for(xx=0;xx<HybridBinarizer.BLOCK_SIZE;xx++)sum+=luminances[xoffset+xx]&255}sum>>=2*HybridBinarizer.BLOCK_SIZE_POWER;max-min<=HybridBinarizer.MIN_DYNAMIC_RANGE&&(sum=min/2,0<y&&0<x&&(max=(blackPoints[y-1][x]+2*blackPoints[y][x-
1]+blackPoints[y-1][x-1])/4,min<max&&(sum=max)));blackPoints[y][x]=sum}}return blackPoints};HybridBinarizer.BLOCK_SIZE_POWER=3;HybridBinarizer.BLOCK_SIZE=1<<HybridBinarizer.BLOCK_SIZE_POWER;HybridBinarizer.BLOCK_SIZE_MASK=HybridBinarizer.BLOCK_SIZE-1;HybridBinarizer.MINIMUM_DIMENSION=5*HybridBinarizer.BLOCK_SIZE;HybridBinarizer.MIN_DYNAMIC_RANGE=24;return HybridBinarizer}(global.default);exports.default=require}
//# sourceMappingURL=module$node_modules$$zxing$library$cjs$core$common$HybridBinarizer.js.map
