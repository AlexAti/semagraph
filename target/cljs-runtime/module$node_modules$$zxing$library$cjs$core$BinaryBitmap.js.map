{
"version":3,
"file":"module$node_modules$$zxing$library$cjs$core$BinaryBitmap.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/@zxing/library/cjs/core/BinaryBitmap.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$zxing$library$cjs$core$BinaryBitmap\"] = function(global,require,module,exports) {\n\"use strict\";\n/*\n * Copyright 2009 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar IllegalArgumentException_1 = require(\"./IllegalArgumentException\");\nvar BinaryBitmap = /** @class */ (function () {\n    function BinaryBitmap(binarizer) {\n        this.binarizer = binarizer;\n        if (binarizer === null) {\n            throw new IllegalArgumentException_1.default('Binarizer must be non-null.');\n        }\n    }\n    /**\n     * @return The width of the bitmap.\n     */\n    BinaryBitmap.prototype.getWidth = function () {\n        return this.binarizer.getWidth();\n    };\n    /**\n     * @return The height of the bitmap.\n     */\n    BinaryBitmap.prototype.getHeight = function () {\n        return this.binarizer.getHeight();\n    };\n    /**\n     * Converts one row of luminance data to 1 bit data. May actually do the conversion, or return\n     * cached data. Callers should assume this method is expensive and call it as seldom as possible.\n     * This method is intended for decoding 1D barcodes and may choose to apply sharpening.\n     *\n     * @param y The row to fetch, which must be in [0, bitmap height)\n     * @param row An optional preallocated array. If null or too small, it will be ignored.\n     *            If used, the Binarizer will call BitArray.clear(). Always use the returned object.\n     * @return The array of bits for this row (true means black).\n     * @throws NotFoundException if row can't be binarized\n     */\n    BinaryBitmap.prototype.getBlackRow = function (y /*int*/, row) {\n        return this.binarizer.getBlackRow(y, row);\n    };\n    /**\n     * Converts a 2D array of luminance data to 1 bit. As above, assume this method is expensive\n     * and do not call it repeatedly. This method is intended for decoding 2D barcodes and may or\n     * may not apply sharpening. Therefore, a row from this matrix may not be identical to one\n     * fetched using getBlackRow(), so don't mix and match between them.\n     *\n     * @return The 2D array of bits for the image (true means black).\n     * @throws NotFoundException if image can't be binarized to make a matrix\n     */\n    BinaryBitmap.prototype.getBlackMatrix = function () {\n        // The matrix is created on demand the first time it is requested, then cached. There are two\n        // reasons for this:\n        // 1. This work will never be done if the caller only installs 1D Reader objects, or if a\n        //    1D Reader finds a barcode before the 2D Readers run.\n        // 2. This work will only be done once even if the caller installs multiple 2D Readers.\n        if (this.matrix === null || this.matrix === undefined) {\n            this.matrix = this.binarizer.getBlackMatrix();\n        }\n        return this.matrix;\n    };\n    /**\n     * @return Whether this bitmap can be cropped.\n     */\n    BinaryBitmap.prototype.isCropSupported = function () {\n        return this.binarizer.getLuminanceSource().isCropSupported();\n    };\n    /**\n     * Returns a new object with cropped image data. Implementations may keep a reference to the\n     * original data rather than a copy. Only callable if isCropSupported() is true.\n     *\n     * @param left The left coordinate, which must be in [0,getWidth())\n     * @param top The top coordinate, which must be in [0,getHeight())\n     * @param width The width of the rectangle to crop.\n     * @param height The height of the rectangle to crop.\n     * @return A cropped version of this object.\n     */\n    BinaryBitmap.prototype.crop = function (left /*int*/, top /*int*/, width /*int*/, height /*int*/) {\n        var newSource = this.binarizer.getLuminanceSource().crop(left, top, width, height);\n        return new BinaryBitmap(this.binarizer.createBinarizer(newSource));\n    };\n    /**\n     * @return Whether this bitmap supports counter-clockwise rotation.\n     */\n    BinaryBitmap.prototype.isRotateSupported = function () {\n        return this.binarizer.getLuminanceSource().isRotateSupported();\n    };\n    /**\n     * Returns a new object with rotated image data by 90 degrees counterclockwise.\n     * Only callable if {@link #isRotateSupported()} is true.\n     *\n     * @return A rotated version of this object.\n     */\n    BinaryBitmap.prototype.rotateCounterClockwise = function () {\n        var newSource = this.binarizer.getLuminanceSource().rotateCounterClockwise();\n        return new BinaryBitmap(this.binarizer.createBinarizer(newSource));\n    };\n    /**\n     * Returns a new object with rotated image data by 45 degrees counterclockwise.\n     * Only callable if {@link #isRotateSupported()} is true.\n     *\n     * @return A rotated version of this object.\n     */\n    BinaryBitmap.prototype.rotateCounterClockwise45 = function () {\n        var newSource = this.binarizer.getLuminanceSource().rotateCounterClockwise45();\n        return new BinaryBitmap(this.binarizer.createBinarizer(newSource));\n    };\n    /*@Override*/\n    BinaryBitmap.prototype.toString = function () {\n        try {\n            return this.getBlackMatrix().toString();\n        }\n        catch (e /*: NotFoundException*/) {\n            return '';\n        }\n    };\n    return BinaryBitmap;\n}());\nexports.default = BinaryBitmap;\n//# sourceMappingURL=BinaryBitmap.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","IllegalArgumentException_1","BinaryBitmap","binarizer","default","prototype","getWidth","BinaryBitmap.prototype.getWidth","getHeight","BinaryBitmap.prototype.getHeight","getBlackRow","BinaryBitmap.prototype.getBlackRow","y","row","getBlackMatrix","BinaryBitmap.prototype.getBlackMatrix","matrix","undefined","isCropSupported","BinaryBitmap.prototype.isCropSupported","getLuminanceSource","crop","BinaryBitmap.prototype.crop","left","top","width","height","newSource","createBinarizer","isRotateSupported","BinaryBitmap.prototype.isRotateSupported","rotateCounterClockwise","BinaryBitmap.prototype.rotateCounterClockwise","rotateCounterClockwise45","BinaryBitmap.prototype.rotateCounterClockwise45","toString","BinaryBitmap.prototype.toString","e"]
}
