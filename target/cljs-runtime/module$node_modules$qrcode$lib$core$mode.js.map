{
"version":3,
"file":"module$node_modules$qrcode$lib$core$mode.js",
"lineCount":3,
"mappings":"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",
"sources":["node_modules/qrcode/lib/core/mode.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$qrcode$lib$core$mode\"] = function(global,require,module,exports) {\nconst VersionCheck = require('./version-check')\nconst Regex = require('./regex')\n\n/**\n * Numeric mode encodes data from the decimal digit set (0 - 9)\n * (byte values 30HEX to 39HEX).\n * Normally, 3 data characters are represented by 10 bits.\n *\n * @type {Object}\n */\nexports.NUMERIC = {\n  id: 'Numeric',\n  bit: 1 << 0,\n  ccBits: [10, 12, 14]\n}\n\n/**\n * Alphanumeric mode encodes data from a set of 45 characters,\n * i.e. 10 numeric digits (0 - 9),\n *      26 alphabetic characters (A - Z),\n *   and 9 symbols (SP, $, %, *, +, -, ., /, :).\n * Normally, two input characters are represented by 11 bits.\n *\n * @type {Object}\n */\nexports.ALPHANUMERIC = {\n  id: 'Alphanumeric',\n  bit: 1 << 1,\n  ccBits: [9, 11, 13]\n}\n\n/**\n * In byte mode, data is encoded at 8 bits per character.\n *\n * @type {Object}\n */\nexports.BYTE = {\n  id: 'Byte',\n  bit: 1 << 2,\n  ccBits: [8, 16, 16]\n}\n\n/**\n * The Kanji mode efficiently encodes Kanji characters in accordance with\n * the Shift JIS system based on JIS X 0208.\n * The Shift JIS values are shifted from the JIS X 0208 values.\n * JIS X 0208 gives details of the shift coded representation.\n * Each two-byte character value is compacted to a 13-bit binary codeword.\n *\n * @type {Object}\n */\nexports.KANJI = {\n  id: 'Kanji',\n  bit: 1 << 3,\n  ccBits: [8, 10, 12]\n}\n\n/**\n * Mixed mode will contain a sequences of data in a combination of any of\n * the modes described above\n *\n * @type {Object}\n */\nexports.MIXED = {\n  bit: -1\n}\n\n/**\n * Returns the number of bits needed to store the data length\n * according to QR Code specifications.\n *\n * @param  {Mode}   mode    Data mode\n * @param  {Number} version QR Code version\n * @return {Number}         Number of bits\n */\nexports.getCharCountIndicator = function getCharCountIndicator (mode, version) {\n  if (!mode.ccBits) throw new Error('Invalid mode: ' + mode)\n\n  if (!VersionCheck.isValid(version)) {\n    throw new Error('Invalid version: ' + version)\n  }\n\n  if (version >= 1 && version < 10) return mode.ccBits[0]\n  else if (version < 27) return mode.ccBits[1]\n  return mode.ccBits[2]\n}\n\n/**\n * Returns the most efficient mode to store the specified data\n *\n * @param  {String} dataStr Input data string\n * @return {Mode}           Best mode\n */\nexports.getBestModeForData = function getBestModeForData (dataStr) {\n  if (Regex.testNumeric(dataStr)) return exports.NUMERIC\n  else if (Regex.testAlphanumeric(dataStr)) return exports.ALPHANUMERIC\n  else if (Regex.testKanji(dataStr)) return exports.KANJI\n  else return exports.BYTE\n}\n\n/**\n * Return mode name as string\n *\n * @param {Mode} mode Mode object\n * @returns {String}  Mode name\n */\nexports.toString = function toString (mode) {\n  if (mode && mode.id) return mode.id\n  throw new Error('Invalid mode')\n}\n\n/**\n * Check if input param is a valid mode object\n *\n * @param   {Mode}    mode Mode object\n * @returns {Boolean} True if valid mode, false otherwise\n */\nexports.isValid = function isValid (mode) {\n  return mode && mode.bit && mode.ccBits\n}\n\n/**\n * Get mode object from its name\n *\n * @param   {String} string Mode name\n * @returns {Mode}          Mode object\n */\nfunction fromString (string) {\n  if (typeof string !== 'string') {\n    throw new Error('Param is not a string')\n  }\n\n  const lcStr = string.toLowerCase()\n\n  switch (lcStr) {\n    case 'numeric':\n      return exports.NUMERIC\n    case 'alphanumeric':\n      return exports.ALPHANUMERIC\n    case 'kanji':\n      return exports.KANJI\n    case 'byte':\n      return exports.BYTE\n    default:\n      throw new Error('Unknown mode: ' + string)\n  }\n}\n\n/**\n * Returns mode from a value.\n * If value is not a valid mode, returns defaultValue\n *\n * @param  {Mode|String} value        Encoding mode\n * @param  {Mode}        defaultValue Fallback value\n * @return {Mode}                     Encoding mode\n */\nexports.from = function from (value, defaultValue) {\n  if (exports.isValid(value)) {\n    return value\n  }\n\n  try {\n    return fromString(value)\n  } catch (e) {\n    return defaultValue\n  }\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","fromString","string","Error","toLowerCase","lcStr","NUMERIC","ALPHANUMERIC","KANJI","BYTE","VersionCheck","Regex","id","bit","ccBits","MIXED","getCharCountIndicator","exports.getCharCountIndicator","mode","version","isValid","getBestModeForData","exports.getBestModeForData","dataStr","testNumeric","testAlphanumeric","testKanji","toString","exports.toString","exports.isValid","from","exports.from","value","defaultValue","e"]
}
