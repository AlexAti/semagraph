{
"version":3,
"file":"module$node_modules$$zxing$library$cjs$core$common$reedsolomon$GenericGFPoly.js",
"lineCount":11,
"mappings":"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",
"sources":["node_modules/@zxing/library/cjs/core/common/reedsolomon/GenericGFPoly.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$zxing$library$cjs$core$common$reedsolomon$GenericGFPoly\"] = function(global,require,module,exports) {\n\"use strict\";\n/*\n * Copyright 2007 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/*namespace com.google.zxing.common.reedsolomon {*/\nvar AbstractGenericGF_1 = require(\"./AbstractGenericGF\");\nvar System_1 = require(\"../../util/System\");\nvar IllegalArgumentException_1 = require(\"../../IllegalArgumentException\");\n/**\n * <p>Represents a polynomial whose coefficients are elements of a GF.\n * Instances of this class are immutable.</p>\n *\n * <p>Much credit is due to William Rucklidge since portions of this code are an indirect\n * port of his C++ Reed-Solomon implementation.</p>\n *\n * @author Sean Owen\n */\nvar GenericGFPoly = /** @class */ (function () {\n    /**\n     * @param field the {@link GenericGF} instance representing the field to use\n     * to perform computations\n     * @param coefficients coefficients as ints representing elements of GF(size), arranged\n     * from most significant (highest-power term) coefficient to least significant\n     * @throws IllegalArgumentException if argument is null or empty,\n     * or if leading coefficient is 0 and this is not a\n     * constant polynomial (that is, it is not the monomial \"0\")\n     */\n    function GenericGFPoly(field, coefficients) {\n        if (coefficients.length === 0) {\n            throw new IllegalArgumentException_1.default();\n        }\n        this.field = field;\n        var coefficientsLength = coefficients.length;\n        if (coefficientsLength > 1 && coefficients[0] === 0) {\n            // Leading term must be non-zero for anything except the constant polynomial \"0\"\n            var firstNonZero = 1;\n            while (firstNonZero < coefficientsLength && coefficients[firstNonZero] === 0) {\n                firstNonZero++;\n            }\n            if (firstNonZero === coefficientsLength) {\n                this.coefficients = Int32Array.from([0]);\n            }\n            else {\n                this.coefficients = new Int32Array(coefficientsLength - firstNonZero);\n                System_1.default.arraycopy(coefficients, firstNonZero, this.coefficients, 0, this.coefficients.length);\n            }\n        }\n        else {\n            this.coefficients = coefficients;\n        }\n    }\n    GenericGFPoly.prototype.getCoefficients = function () {\n        return this.coefficients;\n    };\n    /**\n     * @return degree of this polynomial\n     */\n    GenericGFPoly.prototype.getDegree = function () {\n        return this.coefficients.length - 1;\n    };\n    /**\n     * @return true iff this polynomial is the monomial \"0\"\n     */\n    GenericGFPoly.prototype.isZero = function () {\n        return this.coefficients[0] === 0;\n    };\n    /**\n     * @return coefficient of x^degree term in this polynomial\n     */\n    GenericGFPoly.prototype.getCoefficient = function (degree /*int*/) {\n        return this.coefficients[this.coefficients.length - 1 - degree];\n    };\n    /**\n     * @return evaluation of this polynomial at a given point\n     */\n    GenericGFPoly.prototype.evaluateAt = function (a /*int*/) {\n        if (a === 0) {\n            // Just return the x^0 coefficient\n            return this.getCoefficient(0);\n        }\n        var coefficients = this.coefficients;\n        var result;\n        if (a === 1) {\n            // Just the sum of the coefficients\n            result = 0;\n            for (var i = 0, length_1 = coefficients.length; i !== length_1; i++) {\n                var coefficient = coefficients[i];\n                result = AbstractGenericGF_1.default.addOrSubtract(result, coefficient);\n            }\n            return result;\n        }\n        result = coefficients[0];\n        var size = coefficients.length;\n        var field = this.field;\n        for (var i = 1; i < size; i++) {\n            result = AbstractGenericGF_1.default.addOrSubtract(field.multiply(a, result), coefficients[i]);\n        }\n        return result;\n    };\n    GenericGFPoly.prototype.addOrSubtract = function (other) {\n        if (!this.field.equals(other.field)) {\n            throw new IllegalArgumentException_1.default('GenericGFPolys do not have same GenericGF field');\n        }\n        if (this.isZero()) {\n            return other;\n        }\n        if (other.isZero()) {\n            return this;\n        }\n        var smallerCoefficients = this.coefficients;\n        var largerCoefficients = other.coefficients;\n        if (smallerCoefficients.length > largerCoefficients.length) {\n            var temp = smallerCoefficients;\n            smallerCoefficients = largerCoefficients;\n            largerCoefficients = temp;\n        }\n        var sumDiff = new Int32Array(largerCoefficients.length);\n        var lengthDiff = largerCoefficients.length - smallerCoefficients.length;\n        // Copy high-order terms only found in higher-degree polynomial's coefficients\n        System_1.default.arraycopy(largerCoefficients, 0, sumDiff, 0, lengthDiff);\n        for (var i = lengthDiff; i < largerCoefficients.length; i++) {\n            sumDiff[i] = AbstractGenericGF_1.default.addOrSubtract(smallerCoefficients[i - lengthDiff], largerCoefficients[i]);\n        }\n        return new GenericGFPoly(this.field, sumDiff);\n    };\n    GenericGFPoly.prototype.multiply = function (other) {\n        if (!this.field.equals(other.field)) {\n            throw new IllegalArgumentException_1.default('GenericGFPolys do not have same GenericGF field');\n        }\n        if (this.isZero() || other.isZero()) {\n            return this.field.getZero();\n        }\n        var aCoefficients = this.coefficients;\n        var aLength = aCoefficients.length;\n        var bCoefficients = other.coefficients;\n        var bLength = bCoefficients.length;\n        var product = new Int32Array(aLength + bLength - 1);\n        var field = this.field;\n        for (var i = 0; i < aLength; i++) {\n            var aCoeff = aCoefficients[i];\n            for (var j = 0; j < bLength; j++) {\n                product[i + j] = AbstractGenericGF_1.default.addOrSubtract(product[i + j], field.multiply(aCoeff, bCoefficients[j]));\n            }\n        }\n        return new GenericGFPoly(field, product);\n    };\n    GenericGFPoly.prototype.multiplyScalar = function (scalar /*int*/) {\n        if (scalar === 0) {\n            return this.field.getZero();\n        }\n        if (scalar === 1) {\n            return this;\n        }\n        var size = this.coefficients.length;\n        var field = this.field;\n        var product = new Int32Array(size);\n        var coefficients = this.coefficients;\n        for (var i = 0; i < size; i++) {\n            product[i] = field.multiply(coefficients[i], scalar);\n        }\n        return new GenericGFPoly(field, product);\n    };\n    GenericGFPoly.prototype.multiplyByMonomial = function (degree /*int*/, coefficient /*int*/) {\n        if (degree < 0) {\n            throw new IllegalArgumentException_1.default();\n        }\n        if (coefficient === 0) {\n            return this.field.getZero();\n        }\n        var coefficients = this.coefficients;\n        var size = coefficients.length;\n        var product = new Int32Array(size + degree);\n        var field = this.field;\n        for (var i = 0; i < size; i++) {\n            product[i] = field.multiply(coefficients[i], coefficient);\n        }\n        return new GenericGFPoly(field, product);\n    };\n    GenericGFPoly.prototype.divide = function (other) {\n        if (!this.field.equals(other.field)) {\n            throw new IllegalArgumentException_1.default('GenericGFPolys do not have same GenericGF field');\n        }\n        if (other.isZero()) {\n            throw new IllegalArgumentException_1.default('Divide by 0');\n        }\n        var field = this.field;\n        var quotient = field.getZero();\n        var remainder = this;\n        var denominatorLeadingTerm = other.getCoefficient(other.getDegree());\n        var inverseDenominatorLeadingTerm = field.inverse(denominatorLeadingTerm);\n        while (remainder.getDegree() >= other.getDegree() && !remainder.isZero()) {\n            var degreeDifference = remainder.getDegree() - other.getDegree();\n            var scale = field.multiply(remainder.getCoefficient(remainder.getDegree()), inverseDenominatorLeadingTerm);\n            var term = other.multiplyByMonomial(degreeDifference, scale);\n            var iterationQuotient = field.buildMonomial(degreeDifference, scale);\n            quotient = quotient.addOrSubtract(iterationQuotient);\n            remainder = remainder.addOrSubtract(term);\n        }\n        return [quotient, remainder];\n    };\n    /*@Override*/\n    GenericGFPoly.prototype.toString = function () {\n        var result = '';\n        for (var degree = this.getDegree(); degree >= 0; degree--) {\n            var coefficient = this.getCoefficient(degree);\n            if (coefficient !== 0) {\n                if (coefficient < 0) {\n                    result += ' - ';\n                    coefficient = -coefficient;\n                }\n                else {\n                    if (result.length > 0) {\n                        result += ' + ';\n                    }\n                }\n                if (degree === 0 || coefficient !== 1) {\n                    var alphaPower = this.field.log(coefficient);\n                    if (alphaPower === 0) {\n                        result += '1';\n                    }\n                    else if (alphaPower === 1) {\n                        result += 'a';\n                    }\n                    else {\n                        result += 'a^';\n                        result += alphaPower;\n                    }\n                }\n                if (degree !== 0) {\n                    if (degree === 1) {\n                        result += 'x';\n                    }\n                    else {\n                        result += 'x^';\n                        result += degree;\n                    }\n                }\n            }\n        }\n        return result;\n    };\n    return GenericGFPoly;\n}());\nexports.default = GenericGFPoly;\n//# sourceMappingURL=GenericGFPoly.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","AbstractGenericGF_1","System_1","IllegalArgumentException_1","GenericGFPoly","field","coefficients","length","default","coefficientsLength","firstNonZero","Int32Array","from","arraycopy","prototype","getCoefficients","GenericGFPoly.prototype.getCoefficients","getDegree","GenericGFPoly.prototype.getDegree","isZero","GenericGFPoly.prototype.isZero","getCoefficient","GenericGFPoly.prototype.getCoefficient","degree","evaluateAt","GenericGFPoly.prototype.evaluateAt","a","result","i","length_1","addOrSubtract","coefficient","size","multiply","GenericGFPoly.prototype.addOrSubtract","other","equals","smallerCoefficients","largerCoefficients","temp","sumDiff","lengthDiff","GenericGFPoly.prototype.multiply","getZero","aCoefficients","aLength","bCoefficients","bLength","product","aCoeff","j","multiplyScalar","GenericGFPoly.prototype.multiplyScalar","scalar","multiplyByMonomial","GenericGFPoly.prototype.multiplyByMonomial","divide","GenericGFPoly.prototype.divide","quotient","remainder","denominatorLeadingTerm","inverseDenominatorLeadingTerm","inverse","degreeDifference","scale","term","iterationQuotient","buildMonomial","toString","GenericGFPoly.prototype.toString","alphaPower","log"]
}
