{
"version":3,
"file":"module$node_modules$qrcode$lib$core$byte_data.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,6CAAA,CAAkE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAI1GC,QAASA,SAAS,CAACC,IAAD,CAAO,CACvB,IAAKC,CAAAA,IAAL,CAAYC,IAAKC,CAAAA,IACK,SAAtB,GAAI,MAAQH,KAAZ,GACEA,IADF,CACSI,UAAA,CAAWJ,IAAX,CADT,CAGA,KAAKA,CAAAA,IAAL,CAAY,IAAIK,UAAJ,CAAeL,IAAf,CALW,CAHzB,MAAMI,WAAaR,OAAA,CAAQ,uCAAR,CAAnB,CACMM,KAAON,OAAA,CAAQ,0CAAR,CAUbG,SAASO,CAAAA,aAAT,CAAyBC,QAAuB,CAACC,MAAD,CAAS,CACvD,MAAgB,EAAhB,CAAOA,MADgD,CAIzDT,SAASU,CAAAA,SAAUC,CAAAA,SAAnB,CAA+BC,QAAmB,EAAG,CACnD,MAAO,KAAKX,CAAAA,IAAKQ,CAAAA,MADkC,CAIrDT,SAASU,CAAAA,SAAUH,CAAAA,aAAnB;AAAmCM,QAAuB,EAAG,CAC3D,MAAOb,SAASO,CAAAA,aAAT,CAAuB,IAAKN,CAAAA,IAAKQ,CAAAA,MAAjC,CADoD,CAI7DT,SAASU,CAAAA,SAAUI,CAAAA,KAAnB,CAA2BC,QAAS,CAACC,SAAD,CAAY,CAC9C,IAAK,IAAIC,EAAI,CAAR,CAAWC,EAAI,IAAKjB,CAAAA,IAAKQ,CAAAA,MAA9B,CAAsCQ,CAAtC,CAA0CC,CAA1C,CAA6CD,CAAA,EAA7C,CACED,SAAUG,CAAAA,GAAV,CAAc,IAAKlB,CAAAA,IAAL,CAAUgB,CAAV,CAAd,CAA4B,CAA5B,CAF4C,CAMhDnB,OAAOC,CAAAA,OAAP,CAAiBC,QA9ByF;",
"sources":["node_modules/qrcode/lib/core/byte-data.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$qrcode$lib$core$byte_data\"] = function(global,require,module,exports) {\nconst encodeUtf8 = require('encode-utf8')\nconst Mode = require('./mode')\n\nfunction ByteData (data) {\n  this.mode = Mode.BYTE\n  if (typeof (data) === 'string') {\n    data = encodeUtf8(data)\n  }\n  this.data = new Uint8Array(data)\n}\n\nByteData.getBitsLength = function getBitsLength (length) {\n  return length * 8\n}\n\nByteData.prototype.getLength = function getLength () {\n  return this.data.length\n}\n\nByteData.prototype.getBitsLength = function getBitsLength () {\n  return ByteData.getBitsLength(this.data.length)\n}\n\nByteData.prototype.write = function (bitBuffer) {\n  for (let i = 0, l = this.data.length; i < l; i++) {\n    bitBuffer.put(this.data[i], 8)\n  }\n}\n\nmodule.exports = ByteData\n\n};"],
"names":["shadow$provide","global","require","module","exports","ByteData","data","mode","Mode","BYTE","encodeUtf8","Uint8Array","getBitsLength","ByteData.getBitsLength","length","prototype","getLength","ByteData.prototype.getLength","ByteData.prototype.getBitsLength","write","ByteData.prototype.write","bitBuffer","i","l","put"]
}
