{
"version":3,
"file":"module$node_modules$$zxing$library$cjs$core$Result.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/@zxing/library/cjs/core/Result.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$zxing$library$cjs$core$Result\"] = function(global,require,module,exports) {\n\"use strict\";\n/*\n * Copyright 2007 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar System_1 = require(\"./util/System\");\n/**\n * <p>Encapsulates the result of decoding a barcode within an image.</p>\n *\n * @author Sean Owen\n */\nvar Result = /** @class */ (function () {\n    // public constructor(private text: string,\n    //               Uint8Array rawBytes,\n    //               ResultPoconst resultPoints: Int32Array,\n    //               BarcodeFormat format) {\n    //   this(text, rawBytes, resultPoints, format, System.currentTimeMillis())\n    // }\n    // public constructor(text: string,\n    //               Uint8Array rawBytes,\n    //               ResultPoconst resultPoints: Int32Array,\n    //               BarcodeFormat format,\n    //               long timestamp) {\n    //   this(text, rawBytes, rawBytes == null ? 0 : 8 * rawBytes.length,\n    //        resultPoints, format, timestamp)\n    // }\n    function Result(text, rawBytes, numBits, resultPoints, format, timestamp) {\n        if (numBits === void 0) { numBits = rawBytes == null ? 0 : 8 * rawBytes.length; }\n        if (timestamp === void 0) { timestamp = System_1.default.currentTimeMillis(); }\n        this.text = text;\n        this.rawBytes = rawBytes;\n        this.numBits = numBits;\n        this.resultPoints = resultPoints;\n        this.format = format;\n        this.timestamp = timestamp;\n        this.text = text;\n        this.rawBytes = rawBytes;\n        if (undefined === numBits || null === numBits) {\n            this.numBits = (rawBytes === null || rawBytes === undefined) ? 0 : 8 * rawBytes.length;\n        }\n        else {\n            this.numBits = numBits;\n        }\n        this.resultPoints = resultPoints;\n        this.format = format;\n        this.resultMetadata = null;\n        if (undefined === timestamp || null === timestamp) {\n            this.timestamp = System_1.default.currentTimeMillis();\n        }\n        else {\n            this.timestamp = timestamp;\n        }\n    }\n    /**\n     * @return raw text encoded by the barcode\n     */\n    Result.prototype.getText = function () {\n        return this.text;\n    };\n    /**\n     * @return raw bytes encoded by the barcode, if applicable, otherwise {@code null}\n     */\n    Result.prototype.getRawBytes = function () {\n        return this.rawBytes;\n    };\n    /**\n     * @return how many bits of {@link #getRawBytes()} are valid; typically 8 times its length\n     * @since 3.3.0\n     */\n    Result.prototype.getNumBits = function () {\n        return this.numBits;\n    };\n    /**\n     * @return points related to the barcode in the image. These are typically points\n     *         identifying finder patterns or the corners of the barcode. The exact meaning is\n     *         specific to the type of barcode that was decoded.\n     */\n    Result.prototype.getResultPoints = function () {\n        return this.resultPoints;\n    };\n    /**\n     * @return {@link BarcodeFormat} representing the format of the barcode that was decoded\n     */\n    Result.prototype.getBarcodeFormat = function () {\n        return this.format;\n    };\n    /**\n     * @return {@link Map} mapping {@link ResultMetadataType} keys to values. May be\n     *   {@code null}. This contains optional metadata about what was detected about the barcode,\n     *   like orientation.\n     */\n    Result.prototype.getResultMetadata = function () {\n        return this.resultMetadata;\n    };\n    Result.prototype.putMetadata = function (type, value) {\n        if (this.resultMetadata === null) {\n            this.resultMetadata = new Map();\n        }\n        this.resultMetadata.set(type, value);\n    };\n    Result.prototype.putAllMetadata = function (metadata) {\n        if (metadata !== null) {\n            if (this.resultMetadata === null) {\n                this.resultMetadata = metadata;\n            }\n            else {\n                this.resultMetadata = new Map(metadata);\n            }\n        }\n    };\n    Result.prototype.addResultPoints = function (newPoints) {\n        var oldPoints = this.resultPoints;\n        if (oldPoints === null) {\n            this.resultPoints = newPoints;\n        }\n        else if (newPoints !== null && newPoints.length > 0) {\n            var allPoints = new Array(oldPoints.length + newPoints.length);\n            System_1.default.arraycopy(oldPoints, 0, allPoints, 0, oldPoints.length);\n            System_1.default.arraycopy(newPoints, 0, allPoints, oldPoints.length, newPoints.length);\n            this.resultPoints = allPoints;\n        }\n    };\n    Result.prototype.getTimestamp = function () {\n        return this.timestamp;\n    };\n    /*@Override*/\n    Result.prototype.toString = function () {\n        return this.text;\n    };\n    return Result;\n}());\nexports.default = Result;\n//# sourceMappingURL=Result.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","System_1","Result","text","rawBytes","numBits","resultPoints","format","timestamp","length","default","currentTimeMillis","undefined","resultMetadata","prototype","getText","Result.prototype.getText","getRawBytes","Result.prototype.getRawBytes","getNumBits","Result.prototype.getNumBits","getResultPoints","Result.prototype.getResultPoints","getBarcodeFormat","Result.prototype.getBarcodeFormat","getResultMetadata","Result.prototype.getResultMetadata","putMetadata","Result.prototype.putMetadata","type","Map","set","putAllMetadata","Result.prototype.putAllMetadata","metadata","addResultPoints","Result.prototype.addResultPoints","newPoints","oldPoints","allPoints","Array","arraycopy","getTimestamp","Result.prototype.getTimestamp","toString","Result.prototype.toString"]
}
