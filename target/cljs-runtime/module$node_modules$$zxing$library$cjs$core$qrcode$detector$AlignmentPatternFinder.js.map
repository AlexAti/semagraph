{
"version":3,
"file":"module$node_modules$$zxing$library$cjs$core$qrcode$detector$AlignmentPatternFinder.js",
"lineCount":9,
"mappings":"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",
"sources":["node_modules/@zxing/library/cjs/core/qrcode/detector/AlignmentPatternFinder.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$zxing$library$cjs$core$qrcode$detector$AlignmentPatternFinder\"] = function(global,require,module,exports) {\n\"use strict\";\n/*\n * Copyright 2007 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar AlignmentPattern_1 = require(\"./AlignmentPattern\");\nvar NotFoundException_1 = require(\"../../NotFoundException\");\n/*import java.util.ArrayList;*/\n/*import java.util.List;*/\n/**\n * <p>This class attempts to find alignment patterns in a QR Code. Alignment patterns look like finder\n * patterns but are smaller and appear at regular intervals throughout the image.</p>\n *\n * <p>At the moment this only looks for the bottom-right alignment pattern.</p>\n *\n * <p>This is mostly a simplified copy of {@link FinderPatternFinder}. It is copied,\n * pasted and stripped down here for maximum performance but does unfortunately duplicate\n * some code.</p>\n *\n * <p>This class is thread-safe but not reentrant. Each thread must allocate its own object.</p>\n *\n * @author Sean Owen\n */\nvar AlignmentPatternFinder = /** @class */ (function () {\n    /**\n     * <p>Creates a finder that will look in a portion of the whole image.</p>\n     *\n     * @param image image to search\n     * @param startX left column from which to start searching\n     * @param startY top row from which to start searching\n     * @param width width of region to search\n     * @param height height of region to search\n     * @param moduleSize estimated module size so far\n     */\n    function AlignmentPatternFinder(image, startX /*int*/, startY /*int*/, width /*int*/, height /*int*/, moduleSize /*float*/, resultPointCallback) {\n        this.image = image;\n        this.startX = startX;\n        this.startY = startY;\n        this.width = width;\n        this.height = height;\n        this.moduleSize = moduleSize;\n        this.resultPointCallback = resultPointCallback;\n        this.possibleCenters = []; // new Array<any>(5))\n        // TYPESCRIPTPORT: array initialization without size as the length is checked below\n        this.crossCheckStateCount = new Int32Array(3);\n    }\n    /**\n     * <p>This method attempts to find the bottom-right alignment pattern in the image. It is a bit messy since\n     * it's pretty performance-critical and so is written to be fast foremost.</p>\n     *\n     * @return {@link AlignmentPattern} if found\n     * @throws NotFoundException if not found\n     */\n    AlignmentPatternFinder.prototype.find = function () {\n        var startX = this.startX;\n        var height = this.height;\n        var width = this.width;\n        var maxJ = startX + width;\n        var middleI = this.startY + (height / 2);\n        // We are looking for black/white/black modules in 1:1:1 ratio\n        // this tracks the number of black/white/black modules seen so far\n        var stateCount = new Int32Array(3);\n        var image = this.image;\n        for (var iGen = 0; iGen < height; iGen++) {\n            // Search from middle outwards\n            var i = middleI + ((iGen & 0x01) === 0 ? Math.floor((iGen + 1) / 2) : -Math.floor((iGen + 1) / 2));\n            stateCount[0] = 0;\n            stateCount[1] = 0;\n            stateCount[2] = 0;\n            var j = startX;\n            // Burn off leading white pixels before anything else; if we start in the middle of\n            // a white run, it doesn't make sense to count its length, since we don't know if the\n            // white run continued to the left of the start point\n            while (j < maxJ && !image.get(j, i)) {\n                j++;\n            }\n            var currentState = 0;\n            while (j < maxJ) {\n                if (image.get(j, i)) {\n                    // Black pixel\n                    if (currentState === 1) { // Counting black pixels\n                        stateCount[1]++;\n                    }\n                    else { // Counting white pixels\n                        if (currentState === 2) { // A winner?\n                            if (this.foundPatternCross(stateCount)) { // Yes\n                                var confirmed = this.handlePossibleCenter(stateCount, i, j);\n                                if (confirmed !== null) {\n                                    return confirmed;\n                                }\n                            }\n                            stateCount[0] = stateCount[2];\n                            stateCount[1] = 1;\n                            stateCount[2] = 0;\n                            currentState = 1;\n                        }\n                        else {\n                            stateCount[++currentState]++;\n                        }\n                    }\n                }\n                else { // White pixel\n                    if (currentState === 1) { // Counting black pixels\n                        currentState++;\n                    }\n                    stateCount[currentState]++;\n                }\n                j++;\n            }\n            if (this.foundPatternCross(stateCount)) {\n                var confirmed = this.handlePossibleCenter(stateCount, i, maxJ);\n                if (confirmed !== null) {\n                    return confirmed;\n                }\n            }\n        }\n        // Hmm, nothing we saw was observed and confirmed twice. If we had\n        // any guess at all, return it.\n        if (this.possibleCenters.length !== 0) {\n            return this.possibleCenters[0];\n        }\n        throw new NotFoundException_1.default();\n    };\n    /**\n     * Given a count of black/white/black pixels just seen and an end position,\n     * figures the location of the center of this black/white/black run.\n     */\n    AlignmentPatternFinder.centerFromEnd = function (stateCount, end /*int*/) {\n        return (end - stateCount[2]) - stateCount[1] / 2.0;\n    };\n    /**\n     * @param stateCount count of black/white/black pixels just read\n     * @return true iff the proportions of the counts is close enough to the 1/1/1 ratios\n     *         used by alignment patterns to be considered a match\n     */\n    AlignmentPatternFinder.prototype.foundPatternCross = function (stateCount) {\n        var moduleSize = this.moduleSize;\n        var maxVariance = moduleSize / 2.0;\n        for (var i = 0; i < 3; i++) {\n            if (Math.abs(moduleSize - stateCount[i]) >= maxVariance) {\n                return false;\n            }\n        }\n        return true;\n    };\n    /**\n     * <p>After a horizontal scan finds a potential alignment pattern, this method\n     * \"cross-checks\" by scanning down vertically through the center of the possible\n     * alignment pattern to see if the same proportion is detected.</p>\n     *\n     * @param startI row where an alignment pattern was detected\n     * @param centerJ center of the section that appears to cross an alignment pattern\n     * @param maxCount maximum reasonable number of modules that should be\n     * observed in any reading state, based on the results of the horizontal scan\n     * @return vertical center of alignment pattern, or {@link Float#NaN} if not found\n     */\n    AlignmentPatternFinder.prototype.crossCheckVertical = function (startI /*int*/, centerJ /*int*/, maxCount /*int*/, originalStateCountTotal /*int*/) {\n        var image = this.image;\n        var maxI = image.getHeight();\n        var stateCount = this.crossCheckStateCount;\n        stateCount[0] = 0;\n        stateCount[1] = 0;\n        stateCount[2] = 0;\n        // Start counting up from center\n        var i = startI;\n        while (i >= 0 && image.get(centerJ, i) && stateCount[1] <= maxCount) {\n            stateCount[1]++;\n            i--;\n        }\n        // If already too many modules in this state or ran off the edge:\n        if (i < 0 || stateCount[1] > maxCount) {\n            return NaN;\n        }\n        while (i >= 0 && !image.get(centerJ, i) && stateCount[0] <= maxCount) {\n            stateCount[0]++;\n            i--;\n        }\n        if (stateCount[0] > maxCount) {\n            return NaN;\n        }\n        // Now also count down from center\n        i = startI + 1;\n        while (i < maxI && image.get(centerJ, i) && stateCount[1] <= maxCount) {\n            stateCount[1]++;\n            i++;\n        }\n        if (i === maxI || stateCount[1] > maxCount) {\n            return NaN;\n        }\n        while (i < maxI && !image.get(centerJ, i) && stateCount[2] <= maxCount) {\n            stateCount[2]++;\n            i++;\n        }\n        if (stateCount[2] > maxCount) {\n            return NaN;\n        }\n        var stateCountTotal = stateCount[0] + stateCount[1] + stateCount[2];\n        if (5 * Math.abs(stateCountTotal - originalStateCountTotal) >= 2 * originalStateCountTotal) {\n            return NaN;\n        }\n        return this.foundPatternCross(stateCount) ? AlignmentPatternFinder.centerFromEnd(stateCount, i) : NaN;\n    };\n    /**\n     * <p>This is called when a horizontal scan finds a possible alignment pattern. It will\n     * cross check with a vertical scan, and if successful, will see if this pattern had been\n     * found on a previous horizontal scan. If so, we consider it confirmed and conclude we have\n     * found the alignment pattern.</p>\n     *\n     * @param stateCount reading state module counts from horizontal scan\n     * @param i row where alignment pattern may be found\n     * @param j end of possible alignment pattern in row\n     * @return {@link AlignmentPattern} if we have found the same pattern twice, or null if not\n     */\n    AlignmentPatternFinder.prototype.handlePossibleCenter = function (stateCount, i /*int*/, j /*int*/) {\n        var e_1, _a;\n        var stateCountTotal = stateCount[0] + stateCount[1] + stateCount[2];\n        var centerJ = AlignmentPatternFinder.centerFromEnd(stateCount, j);\n        var centerI = this.crossCheckVertical(i, /*(int) */ centerJ, 2 * stateCount[1], stateCountTotal);\n        if (!isNaN(centerI)) {\n            var estimatedModuleSize = (stateCount[0] + stateCount[1] + stateCount[2]) / 3.0;\n            try {\n                for (var _b = __values(this.possibleCenters), _c = _b.next(); !_c.done; _c = _b.next()) {\n                    var center = _c.value;\n                    // Look for about the same center and module size:\n                    if (center.aboutEquals(estimatedModuleSize, centerI, centerJ)) {\n                        return center.combineEstimate(centerI, centerJ, estimatedModuleSize);\n                    }\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n            // Hadn't found this before; save it\n            var point = new AlignmentPattern_1.default(centerJ, centerI, estimatedModuleSize);\n            this.possibleCenters.push(point);\n            if (this.resultPointCallback !== null && this.resultPointCallback !== undefined) {\n                this.resultPointCallback.foundPossibleResultPoint(point);\n            }\n        }\n        return null;\n    };\n    return AlignmentPatternFinder;\n}());\nexports.default = AlignmentPatternFinder;\n//# sourceMappingURL=AlignmentPatternFinder.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","__values","o","s","Symbol","iterator","m","i","call","length","next","value","done","TypeError","Object","defineProperty","AlignmentPattern_1","NotFoundException_1","AlignmentPatternFinder","image","startX","startY","width","height","moduleSize","resultPointCallback","possibleCenters","crossCheckStateCount","Int32Array","prototype","find","AlignmentPatternFinder.prototype.find","maxJ","middleI","stateCount","iGen","Math","floor","j","get","currentState","foundPatternCross","confirmed","handlePossibleCenter","default","centerFromEnd","AlignmentPatternFinder.centerFromEnd","end","AlignmentPatternFinder.prototype.foundPatternCross","maxVariance","abs","crossCheckVertical","AlignmentPatternFinder.prototype.crossCheckVertical","startI","centerJ","maxCount","originalStateCountTotal","maxI","getHeight","NaN","AlignmentPatternFinder.prototype.handlePossibleCenter","_a","stateCountTotal","centerI","isNaN","estimatedModuleSize","_b","_c","center","aboutEquals","combineEstimate","e_1_1","e_1","error","return","point","push","undefined","foundPossibleResultPoint"]
}
