shadow$provide.module$node_modules$$zxing$library$cjs$core$datamatrix$decoder$BitMatrixParser=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});var BitMatrix_1=require("module$node_modules$$zxing$library$cjs$core$common$BitMatrix"),Version_1=require("module$node_modules$$zxing$library$cjs$core$datamatrix$decoder$Version"),FormatException_1=require("module$node_modules$$zxing$library$cjs$core$FormatException"),IllegalArgumentException_1=require("module$node_modules$$zxing$library$cjs$core$IllegalArgumentException");
global=function(){function BitMatrixParser(bitMatrix){var dimension=bitMatrix.getHeight();if(8>dimension||144<dimension||0!==(dimension&1))throw new FormatException_1.default;this.version=BitMatrixParser.readVersion(bitMatrix);this.mappingBitMatrix=this.extractDataRegion(bitMatrix);this.readMappingMatrix=new BitMatrix_1.default(this.mappingBitMatrix.getWidth(),this.mappingBitMatrix.getHeight())}BitMatrixParser.prototype.getVersion=function(){return this.version};BitMatrixParser.readVersion=function(bitMatrix){var numRows=
bitMatrix.getHeight();bitMatrix=bitMatrix.getWidth();return Version_1.default.getVersionForDimensions(numRows,bitMatrix)};BitMatrixParser.prototype.readCodewords=function(){var result=new Int8Array(this.version.getTotalCodewords()),resultOffset=0,row=4,column=0,numRows=this.mappingBitMatrix.getHeight(),numColumns=this.mappingBitMatrix.getWidth(),corner1Read=!1,corner2Read=!1,corner3Read=!1,corner4Read=!1;do if(row!==numRows||0!==column||corner1Read)if(row!==numRows-2||0!==column||0===(numColumns&
3)||corner2Read)if(row!==numRows+4||2!==column||0!==(numColumns&7)||corner3Read)if(row!==numRows-2||0!==column||4!==(numColumns&7)||corner4Read){do row<numRows&&0<=column&&!this.readMappingMatrix.get(column,row)&&(result[resultOffset++]=this.readUtah(row,column,numRows,numColumns)&255),row-=2,column+=2;while(0<=row&&column<numColumns);row+=1;column+=3;do 0<=row&&column<numColumns&&!this.readMappingMatrix.get(column,row)&&(result[resultOffset++]=this.readUtah(row,column,numRows,numColumns)&255),row+=
2,column-=2;while(row<numRows&&0<=column);row+=3;column+=1}else result[resultOffset++]=this.readCorner4(numRows,numColumns)&255,row-=2,column+=2,corner4Read=!0;else result[resultOffset++]=this.readCorner3(numRows,numColumns)&255,row-=2,column+=2,corner3Read=!0;else result[resultOffset++]=this.readCorner2(numRows,numColumns)&255,row-=2,column+=2,corner2Read=!0;else result[resultOffset++]=this.readCorner1(numRows,numColumns)&255,row-=2,column+=2,corner1Read=!0;while(row<numRows||column<numColumns);
if(resultOffset!==this.version.getTotalCodewords())throw new FormatException_1.default;return result};BitMatrixParser.prototype.readModule=function(row,column,numRows,numColumns){0>row&&(row+=numRows,column+=4-(numRows+4&7));0>column&&(column+=numColumns,row+=4-(numColumns+4&7));this.readMappingMatrix.set(column,row);return this.mappingBitMatrix.get(column,row)};BitMatrixParser.prototype.readUtah=function(row,column,numRows,numColumns){var currentByte=0;this.readModule(row-2,column-2,numRows,numColumns)&&
(currentByte|=1);currentByte<<=1;this.readModule(row-2,column-1,numRows,numColumns)&&(currentByte|=1);currentByte<<=1;this.readModule(row-1,column-2,numRows,numColumns)&&(currentByte|=1);currentByte<<=1;this.readModule(row-1,column-1,numRows,numColumns)&&(currentByte|=1);currentByte<<=1;this.readModule(row-1,column,numRows,numColumns)&&(currentByte|=1);currentByte<<=1;this.readModule(row,column-2,numRows,numColumns)&&(currentByte|=1);currentByte<<=1;this.readModule(row,column-1,numRows,numColumns)&&
(currentByte|=1);currentByte<<=1;this.readModule(row,column,numRows,numColumns)&&(currentByte|=1);return currentByte};BitMatrixParser.prototype.readCorner1=function(numRows,numColumns){var currentByte=0;this.readModule(numRows-1,0,numRows,numColumns)&&(currentByte|=1);currentByte<<=1;this.readModule(numRows-1,1,numRows,numColumns)&&(currentByte|=1);currentByte<<=1;this.readModule(numRows-1,2,numRows,numColumns)&&(currentByte|=1);currentByte<<=1;this.readModule(0,numColumns-2,numRows,numColumns)&&
(currentByte|=1);currentByte<<=1;this.readModule(0,numColumns-1,numRows,numColumns)&&(currentByte|=1);currentByte<<=1;this.readModule(1,numColumns-1,numRows,numColumns)&&(currentByte|=1);currentByte<<=1;this.readModule(2,numColumns-1,numRows,numColumns)&&(currentByte|=1);currentByte<<=1;this.readModule(3,numColumns-1,numRows,numColumns)&&(currentByte|=1);return currentByte};BitMatrixParser.prototype.readCorner2=function(numRows,numColumns){var currentByte=0;this.readModule(numRows-3,0,numRows,numColumns)&&
(currentByte|=1);currentByte<<=1;this.readModule(numRows-2,0,numRows,numColumns)&&(currentByte|=1);currentByte<<=1;this.readModule(numRows-1,0,numRows,numColumns)&&(currentByte|=1);currentByte<<=1;this.readModule(0,numColumns-4,numRows,numColumns)&&(currentByte|=1);currentByte<<=1;this.readModule(0,numColumns-3,numRows,numColumns)&&(currentByte|=1);currentByte<<=1;this.readModule(0,numColumns-2,numRows,numColumns)&&(currentByte|=1);currentByte<<=1;this.readModule(0,numColumns-1,numRows,numColumns)&&
(currentByte|=1);currentByte<<=1;this.readModule(1,numColumns-1,numRows,numColumns)&&(currentByte|=1);return currentByte};BitMatrixParser.prototype.readCorner3=function(numRows,numColumns){var currentByte=0;this.readModule(numRows-1,0,numRows,numColumns)&&(currentByte|=1);currentByte<<=1;this.readModule(numRows-1,numColumns-1,numRows,numColumns)&&(currentByte|=1);currentByte<<=1;this.readModule(0,numColumns-3,numRows,numColumns)&&(currentByte|=1);currentByte<<=1;this.readModule(0,numColumns-2,numRows,
numColumns)&&(currentByte|=1);currentByte<<=1;this.readModule(0,numColumns-1,numRows,numColumns)&&(currentByte|=1);currentByte<<=1;this.readModule(1,numColumns-3,numRows,numColumns)&&(currentByte|=1);currentByte<<=1;this.readModule(1,numColumns-2,numRows,numColumns)&&(currentByte|=1);currentByte<<=1;this.readModule(1,numColumns-1,numRows,numColumns)&&(currentByte|=1);return currentByte};BitMatrixParser.prototype.readCorner4=function(numRows,numColumns){var currentByte=0;this.readModule(numRows-3,
0,numRows,numColumns)&&(currentByte|=1);currentByte<<=1;this.readModule(numRows-2,0,numRows,numColumns)&&(currentByte|=1);currentByte<<=1;this.readModule(numRows-1,0,numRows,numColumns)&&(currentByte|=1);currentByte<<=1;this.readModule(0,numColumns-2,numRows,numColumns)&&(currentByte|=1);currentByte<<=1;this.readModule(0,numColumns-1,numRows,numColumns)&&(currentByte|=1);currentByte<<=1;this.readModule(1,numColumns-1,numRows,numColumns)&&(currentByte|=1);currentByte<<=1;this.readModule(2,numColumns-
1,numRows,numColumns)&&(currentByte|=1);currentByte<<=1;this.readModule(3,numColumns-1,numRows,numColumns)&&(currentByte|=1);return currentByte};BitMatrixParser.prototype.extractDataRegion=function(bitMatrix){var symbolSizeRows=this.version.getSymbolSizeRows(),symbolSizeColumns=this.version.getSymbolSizeColumns();if(bitMatrix.getHeight()!==symbolSizeRows)throw new IllegalArgumentException_1.default("Dimension of bitMatrix must match the version size");var dataRegionSizeRows=this.version.getDataRegionSizeRows(),
dataRegionSizeColumns=this.version.getDataRegionSizeColumns();symbolSizeRows=symbolSizeRows/dataRegionSizeRows|0;symbolSizeColumns=symbolSizeColumns/dataRegionSizeColumns|0;for(var bitMatrixWithoutAlignment=new BitMatrix_1.default(symbolSizeColumns*dataRegionSizeColumns,symbolSizeRows*dataRegionSizeRows),dataRegionRow=0;dataRegionRow<symbolSizeRows;++dataRegionRow)for(var dataRegionRowOffset=dataRegionRow*dataRegionSizeRows,dataRegionColumn=0;dataRegionColumn<symbolSizeColumns;++dataRegionColumn)for(var dataRegionColumnOffset=
dataRegionColumn*dataRegionSizeColumns,i=0;i<dataRegionSizeRows;++i)for(var readRowOffset=dataRegionRow*(dataRegionSizeRows+2)+1+i,writeRowOffset=dataRegionRowOffset+i,j=0;j<dataRegionSizeColumns;++j)bitMatrix.get(dataRegionColumn*(dataRegionSizeColumns+2)+1+j,readRowOffset)&&bitMatrixWithoutAlignment.set(dataRegionColumnOffset+j,writeRowOffset);return bitMatrixWithoutAlignment};return BitMatrixParser}();exports.default=global}
//# sourceMappingURL=module$node_modules$$zxing$library$cjs$core$datamatrix$decoder$BitMatrixParser.js.map
