{
"version":3,
"file":"module$node_modules$$zxing$library$cjs$browser$HTMLCanvasElementLuminanceSource.js",
"lineCount":9,
"mappings":"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",
"sources":["node_modules/@zxing/library/cjs/browser/HTMLCanvasElementLuminanceSource.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$zxing$library$cjs$browser$HTMLCanvasElementLuminanceSource\"] = function(global,require,module,exports) {\n\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HTMLCanvasElementLuminanceSource = void 0;\nvar InvertedLuminanceSource_1 = require(\"../core/InvertedLuminanceSource\");\nvar LuminanceSource_1 = require(\"../core/LuminanceSource\");\nvar IllegalArgumentException_1 = require(\"../core/IllegalArgumentException\");\n/**\n * @deprecated Moving to @zxing/browser\n */\nvar HTMLCanvasElementLuminanceSource = /** @class */ (function (_super) {\n    __extends(HTMLCanvasElementLuminanceSource, _super);\n    function HTMLCanvasElementLuminanceSource(canvas) {\n        var _this = _super.call(this, canvas.width, canvas.height) || this;\n        _this.canvas = canvas;\n        _this.tempCanvasElement = null;\n        _this.buffer = HTMLCanvasElementLuminanceSource.makeBufferFromCanvasImageData(canvas);\n        return _this;\n    }\n    HTMLCanvasElementLuminanceSource.makeBufferFromCanvasImageData = function (canvas) {\n        var imageData = canvas.getContext('2d').getImageData(0, 0, canvas.width, canvas.height);\n        return HTMLCanvasElementLuminanceSource.toGrayscaleBuffer(imageData.data, canvas.width, canvas.height);\n    };\n    HTMLCanvasElementLuminanceSource.toGrayscaleBuffer = function (imageBuffer, width, height) {\n        var grayscaleBuffer = new Uint8ClampedArray(width * height);\n        for (var i = 0, j = 0, length_1 = imageBuffer.length; i < length_1; i += 4, j++) {\n            var gray = void 0;\n            var alpha = imageBuffer[i + 3];\n            // The color of fully-transparent pixels is irrelevant. They are often, technically, fully-transparent\n            // black (0 alpha, and then 0 RGB). They are often used, of course as the \"white\" area in a\n            // barcode image. Force any such pixel to be white:\n            if (alpha === 0) {\n                gray = 0xFF;\n            }\n            else {\n                var pixelR = imageBuffer[i];\n                var pixelG = imageBuffer[i + 1];\n                var pixelB = imageBuffer[i + 2];\n                // .299R + 0.587G + 0.114B (YUV/YIQ for PAL and NTSC),\n                // (306*R) >> 10 is approximately equal to R*0.299, and so on.\n                // 0x200 >> 10 is 0.5, it implements rounding.\n                gray = (306 * pixelR +\n                    601 * pixelG +\n                    117 * pixelB +\n                    0x200) >> 10;\n            }\n            grayscaleBuffer[j] = gray;\n        }\n        return grayscaleBuffer;\n    };\n    HTMLCanvasElementLuminanceSource.prototype.getRow = function (y /*int*/, row) {\n        if (y < 0 || y >= this.getHeight()) {\n            throw new IllegalArgumentException_1.default('Requested row is outside the image: ' + y);\n        }\n        var width = this.getWidth();\n        var start = y * width;\n        if (row === null) {\n            row = this.buffer.slice(start, start + width);\n        }\n        else {\n            if (row.length < width) {\n                row = new Uint8ClampedArray(width);\n            }\n            // The underlying raster of image consists of bytes with the luminance values\n            // TODO: can avoid set/slice?\n            row.set(this.buffer.slice(start, start + width));\n        }\n        return row;\n    };\n    HTMLCanvasElementLuminanceSource.prototype.getMatrix = function () {\n        return this.buffer;\n    };\n    HTMLCanvasElementLuminanceSource.prototype.isCropSupported = function () {\n        return true;\n    };\n    HTMLCanvasElementLuminanceSource.prototype.crop = function (left /*int*/, top /*int*/, width /*int*/, height /*int*/) {\n        _super.prototype.crop.call(this, left, top, width, height);\n        return this;\n    };\n    /**\n     * This is always true, since the image is a gray-scale image.\n     *\n     * @return true\n     */\n    HTMLCanvasElementLuminanceSource.prototype.isRotateSupported = function () {\n        return true;\n    };\n    HTMLCanvasElementLuminanceSource.prototype.rotateCounterClockwise = function () {\n        this.rotate(-90);\n        return this;\n    };\n    HTMLCanvasElementLuminanceSource.prototype.rotateCounterClockwise45 = function () {\n        this.rotate(-45);\n        return this;\n    };\n    HTMLCanvasElementLuminanceSource.prototype.getTempCanvasElement = function () {\n        if (null === this.tempCanvasElement) {\n            var tempCanvasElement = this.canvas.ownerDocument.createElement('canvas');\n            tempCanvasElement.width = this.canvas.width;\n            tempCanvasElement.height = this.canvas.height;\n            this.tempCanvasElement = tempCanvasElement;\n        }\n        return this.tempCanvasElement;\n    };\n    HTMLCanvasElementLuminanceSource.prototype.rotate = function (angle) {\n        var tempCanvasElement = this.getTempCanvasElement();\n        var tempContext = tempCanvasElement.getContext('2d');\n        var angleRadians = angle * HTMLCanvasElementLuminanceSource.DEGREE_TO_RADIANS;\n        // Calculate and set new dimensions for temp canvas\n        var width = this.canvas.width;\n        var height = this.canvas.height;\n        var newWidth = Math.ceil(Math.abs(Math.cos(angleRadians)) * width + Math.abs(Math.sin(angleRadians)) * height);\n        var newHeight = Math.ceil(Math.abs(Math.sin(angleRadians)) * width + Math.abs(Math.cos(angleRadians)) * height);\n        tempCanvasElement.width = newWidth;\n        tempCanvasElement.height = newHeight;\n        // Draw at center of temp canvas to prevent clipping of image data\n        tempContext.translate(newWidth / 2, newHeight / 2);\n        tempContext.rotate(angleRadians);\n        tempContext.drawImage(this.canvas, width / -2, height / -2);\n        this.buffer = HTMLCanvasElementLuminanceSource.makeBufferFromCanvasImageData(tempCanvasElement);\n        return this;\n    };\n    HTMLCanvasElementLuminanceSource.prototype.invert = function () {\n        return new InvertedLuminanceSource_1.default(this);\n    };\n    HTMLCanvasElementLuminanceSource.DEGREE_TO_RADIANS = Math.PI / 180;\n    return HTMLCanvasElementLuminanceSource;\n}(LuminanceSource_1.default));\nexports.HTMLCanvasElementLuminanceSource = HTMLCanvasElementLuminanceSource;\n//# sourceMappingURL=HTMLCanvasElementLuminanceSource.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","defineProperty","value","HTMLCanvasElementLuminanceSource","InvertedLuminanceSource_1","LuminanceSource_1","IllegalArgumentException_1","_super","canvas","_this","call","width","height","tempCanvasElement","buffer","makeBufferFromCanvasImageData","HTMLCanvasElementLuminanceSource.makeBufferFromCanvasImageData","imageData","getContext","getImageData","toGrayscaleBuffer","data","HTMLCanvasElementLuminanceSource.toGrayscaleBuffer","imageBuffer","grayscaleBuffer","Uint8ClampedArray","j","i","length_1","length","gray","alpha","pixelR","pixelG","pixelB","getRow","HTMLCanvasElementLuminanceSource.prototype.getRow","y","row","getHeight","default","getWidth","start","slice","set","getMatrix","HTMLCanvasElementLuminanceSource.prototype.getMatrix","isCropSupported","HTMLCanvasElementLuminanceSource.prototype.isCropSupported","crop","HTMLCanvasElementLuminanceSource.prototype.crop","left","top","isRotateSupported","HTMLCanvasElementLuminanceSource.prototype.isRotateSupported","rotateCounterClockwise","HTMLCanvasElementLuminanceSource.prototype.rotateCounterClockwise","rotate","rotateCounterClockwise45","HTMLCanvasElementLuminanceSource.prototype.rotateCounterClockwise45","getTempCanvasElement","HTMLCanvasElementLuminanceSource.prototype.getTempCanvasElement","ownerDocument","createElement","HTMLCanvasElementLuminanceSource.prototype.rotate","angle","tempContext","angleRadians","DEGREE_TO_RADIANS","newWidth","Math","ceil","abs","cos","sin","newHeight","translate","drawImage","invert","HTMLCanvasElementLuminanceSource.prototype.invert","PI"]
}
