{
"version":3,
"file":"module$node_modules$$zxing$library$cjs$core$LuminanceSource.js",
"lineCount":4,
"mappings":"AAAAA,cAAA,CAAA,2DAAA,CAAgF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAiBxHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAAEG,MAAO,CAAA,CAAT,CAA7C,CACA,KAAIC,gBAAkBN,OAAA,CAAQ,gEAAR,CAAtB,CACIO,gCAAkCP,OAAA,CAAQ,2EAAR,CAWlCQ,OAAAA,CAAiC,QAAS,EAAG,CAC7CA,QAASA,gBAAe,CAACC,KAAD,CAAgBC,MAAhB,CAAgC,CACpD,IAAKD,CAAAA,KAAL,CAAaA,KACb,KAAKC,CAAAA,MAAL,CAAcA,MAFsC,CAOxDF,eAAgBG,CAAAA,SAAUC,CAAAA,QAA1B;AAAqCC,QAAS,EAAG,CAC7C,MAAO,KAAKJ,CAAAA,KADiC,CAMjDD,gBAAgBG,CAAAA,SAAUG,CAAAA,SAA1B,CAAsCC,QAAS,EAAG,CAC9C,MAAO,KAAKL,CAAAA,MADkC,CAMlDF,gBAAgBG,CAAAA,SAAUK,CAAAA,eAA1B,CAA4CC,QAAS,EAAG,CACpD,MAAO,CAAA,CAD6C,CAaxDT,gBAAgBG,CAAAA,SAAUO,CAAAA,IAA1B,CAAiCC,QAAS,CAACC,IAAD,CAAeC,GAAf,CAA4BZ,KAA5B,CAA2CC,MAA3C,CAA2D,CACjG,KAAM,KAAIH,+BAAgCe,CAAAA,OAApC,CAA4C,kDAA5C,CAAN,CADiG,CAMrGd,gBAAgBG,CAAAA,SAAUY,CAAAA,iBAA1B,CAA8CC,QAAS,EAAG,CACtD,MAAO,CAAA,CAD+C,CAS1DhB,gBAAgBG,CAAAA,SAAUc,CAAAA,sBAA1B,CAAmDC,QAAS,EAAG,CAC3D,KAAM,KAAInB,+BAAgCe,CAAAA,OAApC,CAA4C,gEAA5C,CAAN;AAD2D,CAS/Dd,gBAAgBG,CAAAA,SAAUgB,CAAAA,wBAA1B,CAAqDC,QAAS,EAAG,CAC7D,KAAM,KAAIrB,+BAAgCe,CAAAA,OAApC,CAA4C,gEAA5C,CAAN,CAD6D,CAIjEd,gBAAgBG,CAAAA,SAAUkB,CAAAA,QAA1B,CAAqCC,QAAS,EAAG,CAG7C,IAFA,IAAIC,IAAM,IAAIC,iBAAJ,CAAsB,IAAKvB,CAAAA,KAA3B,CAAV,CACIwB,OAAS,IAAI3B,eAAgBgB,CAAAA,OADjC,CAESY,EAAI,CAAb,CAAgBA,CAAhB,CAAoB,IAAKxB,CAAAA,MAAzB,CAAiCwB,CAAA,EAAjC,CAAsC,CAElC,IADA,IAAIC,UAAY,IAAKC,CAAAA,MAAL,CAAYF,CAAZ,CAAeH,GAAf,CAAhB,CACSM,EAAI,CAAb,CAAgBA,CAAhB,CAAoB,IAAK5B,CAAAA,KAAzB,CAAgC4B,CAAA,EAAhC,CAAqC,CACjC,IAAIC,UAAYH,SAAA,CAAUE,CAAV,CAAZC,CAA2B,GAc/BL,OAAOM,CAAAA,MAAP,CAZgB,EAAhBC,CAAIF,SAAJE,CACQ,GADRA,CAGqB,GAAhB,CAAIF,SAAJ,CACG,GADH,CAGgB,GAAhB,CAAIA,SAAJ,CACG,GADH,CAIG,GAER,CAfiC,CAiBrCL,MAAOM,CAAAA,MAAP,CAAc,IAAd,CAnBkC,CAqBtC,MAAON,OAAOJ,CAAAA,QAAP,EAxBsC,CA0BjD;MAAOrB,gBAvFsC,CAAZ,EAyFrCN,QAAQoB,CAAAA,OAAR,CAAkBd,MAvHsG;",
"sources":["node_modules/@zxing/library/cjs/core/LuminanceSource.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$zxing$library$cjs$core$LuminanceSource\"] = function(global,require,module,exports) {\n\"use strict\";\n/*\n * Copyright 2009 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar StringBuilder_1 = require(\"./util/StringBuilder\");\nvar UnsupportedOperationException_1 = require(\"./UnsupportedOperationException\");\n/*namespace com.google.zxing {*/\n/**\n * The purpose of this class hierarchy is to abstract different bitmap implementations across\n * platforms into a standard interface for requesting greyscale luminance values. The interface\n * only provides immutable methods; therefore crop and rotation create copies. This is to ensure\n * that one Reader does not modify the original luminance source and leave it in an unknown state\n * for other Readers in the chain.\n *\n * @author dswitkin@google.com (Daniel Switkin)\n */\nvar LuminanceSource = /** @class */ (function () {\n    function LuminanceSource(width /*int*/, height /*int*/) {\n        this.width = width;\n        this.height = height;\n    }\n    /**\n     * @return The width of the bitmap.\n     */\n    LuminanceSource.prototype.getWidth = function () {\n        return this.width;\n    };\n    /**\n     * @return The height of the bitmap.\n     */\n    LuminanceSource.prototype.getHeight = function () {\n        return this.height;\n    };\n    /**\n     * @return Whether this subclass supports cropping.\n     */\n    LuminanceSource.prototype.isCropSupported = function () {\n        return false;\n    };\n    /**\n     * Returns a new object with cropped image data. Implementations may keep a reference to the\n     * original data rather than a copy. Only callable if isCropSupported() is true.\n     *\n     * @param left The left coordinate, which must be in [0,getWidth())\n     * @param top The top coordinate, which must be in [0,getHeight())\n     * @param width The width of the rectangle to crop.\n     * @param height The height of the rectangle to crop.\n     * @return A cropped version of this object.\n     */\n    LuminanceSource.prototype.crop = function (left /*int*/, top /*int*/, width /*int*/, height /*int*/) {\n        throw new UnsupportedOperationException_1.default('This luminance source does not support cropping.');\n    };\n    /**\n     * @return Whether this subclass supports counter-clockwise rotation.\n     */\n    LuminanceSource.prototype.isRotateSupported = function () {\n        return false;\n    };\n    /**\n     * Returns a new object with rotated image data by 90 degrees counterclockwise.\n     * Only callable if {@link #isRotateSupported()} is true.\n     *\n     * @return A rotated version of this object.\n     */\n    LuminanceSource.prototype.rotateCounterClockwise = function () {\n        throw new UnsupportedOperationException_1.default('This luminance source does not support rotation by 90 degrees.');\n    };\n    /**\n     * Returns a new object with rotated image data by 45 degrees counterclockwise.\n     * Only callable if {@link #isRotateSupported()} is true.\n     *\n     * @return A rotated version of this object.\n     */\n    LuminanceSource.prototype.rotateCounterClockwise45 = function () {\n        throw new UnsupportedOperationException_1.default('This luminance source does not support rotation by 45 degrees.');\n    };\n    /*@Override*/\n    LuminanceSource.prototype.toString = function () {\n        var row = new Uint8ClampedArray(this.width);\n        var result = new StringBuilder_1.default();\n        for (var y = 0; y < this.height; y++) {\n            var sourceRow = this.getRow(y, row);\n            for (var x = 0; x < this.width; x++) {\n                var luminance = sourceRow[x] & 0xFF;\n                var c = void 0;\n                if (luminance < 0x40) {\n                    c = '#';\n                }\n                else if (luminance < 0x80) {\n                    c = '+';\n                }\n                else if (luminance < 0xC0) {\n                    c = '.';\n                }\n                else {\n                    c = ' ';\n                }\n                result.append(c);\n            }\n            result.append('\\n');\n        }\n        return result.toString();\n    };\n    return LuminanceSource;\n}());\nexports.default = LuminanceSource;\n//# sourceMappingURL=LuminanceSource.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","StringBuilder_1","UnsupportedOperationException_1","LuminanceSource","width","height","prototype","getWidth","LuminanceSource.prototype.getWidth","getHeight","LuminanceSource.prototype.getHeight","isCropSupported","LuminanceSource.prototype.isCropSupported","crop","LuminanceSource.prototype.crop","left","top","default","isRotateSupported","LuminanceSource.prototype.isRotateSupported","rotateCounterClockwise","LuminanceSource.prototype.rotateCounterClockwise","rotateCounterClockwise45","LuminanceSource.prototype.rotateCounterClockwise45","toString","LuminanceSource.prototype.toString","row","Uint8ClampedArray","result","y","sourceRow","getRow","x","luminance","append","c"]
}
