{
"version":3,
"file":"module$node_modules$$zxing$library$cjs$core$qrcode$encoder$QRCode.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/@zxing/library/cjs/core/qrcode/encoder/QRCode.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$zxing$library$cjs$core$qrcode$encoder$QRCode\"] = function(global,require,module,exports) {\n\"use strict\";\n/*\n * Copyright 2008 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar StringBuilder_1 = require(\"../../util/StringBuilder\");\n/**\n * @author satorux@google.com (Satoru Takabayashi) - creator\n * @author dswitkin@google.com (Daniel Switkin) - ported from C++\n */\nvar QRCode = /** @class */ (function () {\n    function QRCode() {\n        this.maskPattern = -1;\n    }\n    QRCode.prototype.getMode = function () {\n        return this.mode;\n    };\n    QRCode.prototype.getECLevel = function () {\n        return this.ecLevel;\n    };\n    QRCode.prototype.getVersion = function () {\n        return this.version;\n    };\n    QRCode.prototype.getMaskPattern = function () {\n        return this.maskPattern;\n    };\n    QRCode.prototype.getMatrix = function () {\n        return this.matrix;\n    };\n    /*@Override*/\n    QRCode.prototype.toString = function () {\n        var result = new StringBuilder_1.default(); // (200)\n        result.append('<<\\n');\n        result.append(' mode: ');\n        result.append(this.mode ? this.mode.toString() : 'null');\n        result.append('\\n ecLevel: ');\n        result.append(this.ecLevel ? this.ecLevel.toString() : 'null');\n        result.append('\\n version: ');\n        result.append(this.version ? this.version.toString() : 'null');\n        result.append('\\n maskPattern: ');\n        result.append(this.maskPattern.toString());\n        if (this.matrix) {\n            result.append('\\n matrix:\\n');\n            result.append(this.matrix.toString());\n        }\n        else {\n            result.append('\\n matrix: null\\n');\n        }\n        result.append('>>\\n');\n        return result.toString();\n    };\n    QRCode.prototype.setMode = function (value) {\n        this.mode = value;\n    };\n    QRCode.prototype.setECLevel = function (value) {\n        this.ecLevel = value;\n    };\n    QRCode.prototype.setVersion = function (version) {\n        this.version = version;\n    };\n    QRCode.prototype.setMaskPattern = function (value /*int*/) {\n        this.maskPattern = value;\n    };\n    QRCode.prototype.setMatrix = function (value) {\n        this.matrix = value;\n    };\n    // Check if \"mask_pattern\" is valid.\n    QRCode.isValidMaskPattern = function (maskPattern /*int*/) {\n        return maskPattern >= 0 && maskPattern < QRCode.NUM_MASK_PATTERNS;\n    };\n    QRCode.NUM_MASK_PATTERNS = 8;\n    return QRCode;\n}());\nexports.default = QRCode;\n//# sourceMappingURL=QRCode.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","StringBuilder_1","QRCode","maskPattern","prototype","getMode","QRCode.prototype.getMode","mode","getECLevel","QRCode.prototype.getECLevel","ecLevel","getVersion","QRCode.prototype.getVersion","version","getMaskPattern","QRCode.prototype.getMaskPattern","getMatrix","QRCode.prototype.getMatrix","matrix","toString","QRCode.prototype.toString","result","default","append","setMode","QRCode.prototype.setMode","setECLevel","QRCode.prototype.setECLevel","setVersion","QRCode.prototype.setVersion","setMaskPattern","QRCode.prototype.setMaskPattern","setMatrix","QRCode.prototype.setMatrix","isValidMaskPattern","QRCode.isValidMaskPattern","NUM_MASK_PATTERNS"]
}
