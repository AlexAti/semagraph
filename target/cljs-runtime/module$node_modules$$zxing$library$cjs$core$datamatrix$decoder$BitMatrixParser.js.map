{
"version":3,
"file":"module$node_modules$$zxing$library$cjs$core$datamatrix$decoder$BitMatrixParser.js",
"lineCount":16,
"mappings":"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",
"sources":["node_modules/@zxing/library/cjs/core/datamatrix/decoder/BitMatrixParser.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$zxing$library$cjs$core$datamatrix$decoder$BitMatrixParser\"] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar BitMatrix_1 = require(\"../../common/BitMatrix\");\nvar Version_1 = require(\"./Version\");\nvar FormatException_1 = require(\"../../FormatException\");\nvar IllegalArgumentException_1 = require(\"../../IllegalArgumentException\");\n/*\n * Copyright 2007 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @author bbrown@google.com (Brian Brown)\n */\nvar BitMatrixParser = /** @class */ (function () {\n    /**\n     * @param bitMatrix {@link BitMatrix} to parse\n     * @throws FormatException if dimension is < 8 or > 144 or not 0 mod 2\n     */\n    function BitMatrixParser(bitMatrix) {\n        var dimension = bitMatrix.getHeight();\n        if (dimension < 8 || dimension > 144 || (dimension & 0x01) !== 0) {\n            throw new FormatException_1.default();\n        }\n        this.version = BitMatrixParser.readVersion(bitMatrix);\n        this.mappingBitMatrix = this.extractDataRegion(bitMatrix);\n        this.readMappingMatrix = new BitMatrix_1.default(this.mappingBitMatrix.getWidth(), this.mappingBitMatrix.getHeight());\n    }\n    BitMatrixParser.prototype.getVersion = function () {\n        return this.version;\n    };\n    /**\n     * <p>Creates the version object based on the dimension of the original bit matrix from\n     * the datamatrix code.</p>\n     *\n     * <p>See ISO 16022:2006 Table 7 - ECC 200 symbol attributes</p>\n     *\n     * @param bitMatrix Original {@link BitMatrix} including alignment patterns\n     * @return {@link Version} encapsulating the Data Matrix Code's \"version\"\n     * @throws FormatException if the dimensions of the mapping matrix are not valid\n     * Data Matrix dimensions.\n     */\n    BitMatrixParser.readVersion = function (bitMatrix) {\n        var numRows = bitMatrix.getHeight();\n        var numColumns = bitMatrix.getWidth();\n        return Version_1.default.getVersionForDimensions(numRows, numColumns);\n    };\n    /**\n     * <p>Reads the bits in the {@link BitMatrix} representing the mapping matrix (No alignment patterns)\n     * in the correct order in order to reconstitute the codewords bytes contained within the\n     * Data Matrix Code.</p>\n     *\n     * @return bytes encoded within the Data Matrix Code\n     * @throws FormatException if the exact number of bytes expected is not read\n     */\n    BitMatrixParser.prototype.readCodewords = function () {\n        var result = new Int8Array(this.version.getTotalCodewords());\n        var resultOffset = 0;\n        var row = 4;\n        var column = 0;\n        var numRows = this.mappingBitMatrix.getHeight();\n        var numColumns = this.mappingBitMatrix.getWidth();\n        var corner1Read = false;\n        var corner2Read = false;\n        var corner3Read = false;\n        var corner4Read = false;\n        // Read all of the codewords\n        do {\n            // Check the four corner cases\n            if ((row === numRows) && (column === 0) && !corner1Read) {\n                result[resultOffset++] = this.readCorner1(numRows, numColumns) & 0xff;\n                row -= 2;\n                column += 2;\n                corner1Read = true;\n            }\n            else if ((row === numRows - 2) && (column === 0) && ((numColumns & 0x03) !== 0) && !corner2Read) {\n                result[resultOffset++] = this.readCorner2(numRows, numColumns) & 0xff;\n                row -= 2;\n                column += 2;\n                corner2Read = true;\n            }\n            else if ((row === numRows + 4) && (column === 2) && ((numColumns & 0x07) === 0) && !corner3Read) {\n                result[resultOffset++] = this.readCorner3(numRows, numColumns) & 0xff;\n                row -= 2;\n                column += 2;\n                corner3Read = true;\n            }\n            else if ((row === numRows - 2) && (column === 0) && ((numColumns & 0x07) === 4) && !corner4Read) {\n                result[resultOffset++] = this.readCorner4(numRows, numColumns) & 0xff;\n                row -= 2;\n                column += 2;\n                corner4Read = true;\n            }\n            else {\n                // Sweep upward diagonally to the right\n                do {\n                    if ((row < numRows) && (column >= 0) && !this.readMappingMatrix.get(column, row)) {\n                        result[resultOffset++] = this.readUtah(row, column, numRows, numColumns) & 0xff;\n                    }\n                    row -= 2;\n                    column += 2;\n                } while ((row >= 0) && (column < numColumns));\n                row += 1;\n                column += 3;\n                // Sweep downward diagonally to the left\n                do {\n                    if ((row >= 0) && (column < numColumns) && !this.readMappingMatrix.get(column, row)) {\n                        result[resultOffset++] = this.readUtah(row, column, numRows, numColumns) & 0xff;\n                    }\n                    row += 2;\n                    column -= 2;\n                } while ((row < numRows) && (column >= 0));\n                row += 3;\n                column += 1;\n            }\n        } while ((row < numRows) || (column < numColumns));\n        if (resultOffset !== this.version.getTotalCodewords()) {\n            throw new FormatException_1.default();\n        }\n        return result;\n    };\n    /**\n     * <p>Reads a bit of the mapping matrix accounting for boundary wrapping.</p>\n     *\n     * @param row Row to read in the mapping matrix\n     * @param column Column to read in the mapping matrix\n     * @param numRows Number of rows in the mapping matrix\n     * @param numColumns Number of columns in the mapping matrix\n     * @return value of the given bit in the mapping matrix\n     */\n    BitMatrixParser.prototype.readModule = function (row, column, numRows, numColumns) {\n        // Adjust the row and column indices based on boundary wrapping\n        if (row < 0) {\n            row += numRows;\n            column += 4 - ((numRows + 4) & 0x07);\n        }\n        if (column < 0) {\n            column += numColumns;\n            row += 4 - ((numColumns + 4) & 0x07);\n        }\n        this.readMappingMatrix.set(column, row);\n        return this.mappingBitMatrix.get(column, row);\n    };\n    /**\n     * <p>Reads the 8 bits of the standard Utah-shaped pattern.</p>\n     *\n     * <p>See ISO 16022:2006, 5.8.1 Figure 6</p>\n     *\n     * @param row Current row in the mapping matrix, anchored at the 8th bit (LSB) of the pattern\n     * @param column Current column in the mapping matrix, anchored at the 8th bit (LSB) of the pattern\n     * @param numRows Number of rows in the mapping matrix\n     * @param numColumns Number of columns in the mapping matrix\n     * @return byte from the utah shape\n     */\n    BitMatrixParser.prototype.readUtah = function (row, column, numRows, numColumns) {\n        var currentByte = 0;\n        if (this.readModule(row - 2, column - 2, numRows, numColumns)) {\n            currentByte |= 1;\n        }\n        currentByte <<= 1;\n        if (this.readModule(row - 2, column - 1, numRows, numColumns)) {\n            currentByte |= 1;\n        }\n        currentByte <<= 1;\n        if (this.readModule(row - 1, column - 2, numRows, numColumns)) {\n            currentByte |= 1;\n        }\n        currentByte <<= 1;\n        if (this.readModule(row - 1, column - 1, numRows, numColumns)) {\n            currentByte |= 1;\n        }\n        currentByte <<= 1;\n        if (this.readModule(row - 1, column, numRows, numColumns)) {\n            currentByte |= 1;\n        }\n        currentByte <<= 1;\n        if (this.readModule(row, column - 2, numRows, numColumns)) {\n            currentByte |= 1;\n        }\n        currentByte <<= 1;\n        if (this.readModule(row, column - 1, numRows, numColumns)) {\n            currentByte |= 1;\n        }\n        currentByte <<= 1;\n        if (this.readModule(row, column, numRows, numColumns)) {\n            currentByte |= 1;\n        }\n        return currentByte;\n    };\n    /**\n     * <p>Reads the 8 bits of the special corner condition 1.</p>\n     *\n     * <p>See ISO 16022:2006, Figure F.3</p>\n     *\n     * @param numRows Number of rows in the mapping matrix\n     * @param numColumns Number of columns in the mapping matrix\n     * @return byte from the Corner condition 1\n     */\n    BitMatrixParser.prototype.readCorner1 = function (numRows, numColumns) {\n        var currentByte = 0;\n        if (this.readModule(numRows - 1, 0, numRows, numColumns)) {\n            currentByte |= 1;\n        }\n        currentByte <<= 1;\n        if (this.readModule(numRows - 1, 1, numRows, numColumns)) {\n            currentByte |= 1;\n        }\n        currentByte <<= 1;\n        if (this.readModule(numRows - 1, 2, numRows, numColumns)) {\n            currentByte |= 1;\n        }\n        currentByte <<= 1;\n        if (this.readModule(0, numColumns - 2, numRows, numColumns)) {\n            currentByte |= 1;\n        }\n        currentByte <<= 1;\n        if (this.readModule(0, numColumns - 1, numRows, numColumns)) {\n            currentByte |= 1;\n        }\n        currentByte <<= 1;\n        if (this.readModule(1, numColumns - 1, numRows, numColumns)) {\n            currentByte |= 1;\n        }\n        currentByte <<= 1;\n        if (this.readModule(2, numColumns - 1, numRows, numColumns)) {\n            currentByte |= 1;\n        }\n        currentByte <<= 1;\n        if (this.readModule(3, numColumns - 1, numRows, numColumns)) {\n            currentByte |= 1;\n        }\n        return currentByte;\n    };\n    /**\n     * <p>Reads the 8 bits of the special corner condition 2.</p>\n     *\n     * <p>See ISO 16022:2006, Figure F.4</p>\n     *\n     * @param numRows Number of rows in the mapping matrix\n     * @param numColumns Number of columns in the mapping matrix\n     * @return byte from the Corner condition 2\n     */\n    BitMatrixParser.prototype.readCorner2 = function (numRows, numColumns) {\n        var currentByte = 0;\n        if (this.readModule(numRows - 3, 0, numRows, numColumns)) {\n            currentByte |= 1;\n        }\n        currentByte <<= 1;\n        if (this.readModule(numRows - 2, 0, numRows, numColumns)) {\n            currentByte |= 1;\n        }\n        currentByte <<= 1;\n        if (this.readModule(numRows - 1, 0, numRows, numColumns)) {\n            currentByte |= 1;\n        }\n        currentByte <<= 1;\n        if (this.readModule(0, numColumns - 4, numRows, numColumns)) {\n            currentByte |= 1;\n        }\n        currentByte <<= 1;\n        if (this.readModule(0, numColumns - 3, numRows, numColumns)) {\n            currentByte |= 1;\n        }\n        currentByte <<= 1;\n        if (this.readModule(0, numColumns - 2, numRows, numColumns)) {\n            currentByte |= 1;\n        }\n        currentByte <<= 1;\n        if (this.readModule(0, numColumns - 1, numRows, numColumns)) {\n            currentByte |= 1;\n        }\n        currentByte <<= 1;\n        if (this.readModule(1, numColumns - 1, numRows, numColumns)) {\n            currentByte |= 1;\n        }\n        return currentByte;\n    };\n    /**\n     * <p>Reads the 8 bits of the special corner condition 3.</p>\n     *\n     * <p>See ISO 16022:2006, Figure F.5</p>\n     *\n     * @param numRows Number of rows in the mapping matrix\n     * @param numColumns Number of columns in the mapping matrix\n     * @return byte from the Corner condition 3\n     */\n    BitMatrixParser.prototype.readCorner3 = function (numRows, numColumns) {\n        var currentByte = 0;\n        if (this.readModule(numRows - 1, 0, numRows, numColumns)) {\n            currentByte |= 1;\n        }\n        currentByte <<= 1;\n        if (this.readModule(numRows - 1, numColumns - 1, numRows, numColumns)) {\n            currentByte |= 1;\n        }\n        currentByte <<= 1;\n        if (this.readModule(0, numColumns - 3, numRows, numColumns)) {\n            currentByte |= 1;\n        }\n        currentByte <<= 1;\n        if (this.readModule(0, numColumns - 2, numRows, numColumns)) {\n            currentByte |= 1;\n        }\n        currentByte <<= 1;\n        if (this.readModule(0, numColumns - 1, numRows, numColumns)) {\n            currentByte |= 1;\n        }\n        currentByte <<= 1;\n        if (this.readModule(1, numColumns - 3, numRows, numColumns)) {\n            currentByte |= 1;\n        }\n        currentByte <<= 1;\n        if (this.readModule(1, numColumns - 2, numRows, numColumns)) {\n            currentByte |= 1;\n        }\n        currentByte <<= 1;\n        if (this.readModule(1, numColumns - 1, numRows, numColumns)) {\n            currentByte |= 1;\n        }\n        return currentByte;\n    };\n    /**\n     * <p>Reads the 8 bits of the special corner condition 4.</p>\n     *\n     * <p>See ISO 16022:2006, Figure F.6</p>\n     *\n     * @param numRows Number of rows in the mapping matrix\n     * @param numColumns Number of columns in the mapping matrix\n     * @return byte from the Corner condition 4\n     */\n    BitMatrixParser.prototype.readCorner4 = function (numRows, numColumns) {\n        var currentByte = 0;\n        if (this.readModule(numRows - 3, 0, numRows, numColumns)) {\n            currentByte |= 1;\n        }\n        currentByte <<= 1;\n        if (this.readModule(numRows - 2, 0, numRows, numColumns)) {\n            currentByte |= 1;\n        }\n        currentByte <<= 1;\n        if (this.readModule(numRows - 1, 0, numRows, numColumns)) {\n            currentByte |= 1;\n        }\n        currentByte <<= 1;\n        if (this.readModule(0, numColumns - 2, numRows, numColumns)) {\n            currentByte |= 1;\n        }\n        currentByte <<= 1;\n        if (this.readModule(0, numColumns - 1, numRows, numColumns)) {\n            currentByte |= 1;\n        }\n        currentByte <<= 1;\n        if (this.readModule(1, numColumns - 1, numRows, numColumns)) {\n            currentByte |= 1;\n        }\n        currentByte <<= 1;\n        if (this.readModule(2, numColumns - 1, numRows, numColumns)) {\n            currentByte |= 1;\n        }\n        currentByte <<= 1;\n        if (this.readModule(3, numColumns - 1, numRows, numColumns)) {\n            currentByte |= 1;\n        }\n        return currentByte;\n    };\n    /**\n     * <p>Extracts the data region from a {@link BitMatrix} that contains\n     * alignment patterns.</p>\n     *\n     * @param bitMatrix Original {@link BitMatrix} with alignment patterns\n     * @return BitMatrix that has the alignment patterns removed\n     */\n    BitMatrixParser.prototype.extractDataRegion = function (bitMatrix) {\n        var symbolSizeRows = this.version.getSymbolSizeRows();\n        var symbolSizeColumns = this.version.getSymbolSizeColumns();\n        if (bitMatrix.getHeight() !== symbolSizeRows) {\n            throw new IllegalArgumentException_1.default('Dimension of bitMatrix must match the version size');\n        }\n        var dataRegionSizeRows = this.version.getDataRegionSizeRows();\n        var dataRegionSizeColumns = this.version.getDataRegionSizeColumns();\n        var numDataRegionsRow = symbolSizeRows / dataRegionSizeRows | 0;\n        var numDataRegionsColumn = symbolSizeColumns / dataRegionSizeColumns | 0;\n        var sizeDataRegionRow = numDataRegionsRow * dataRegionSizeRows;\n        var sizeDataRegionColumn = numDataRegionsColumn * dataRegionSizeColumns;\n        var bitMatrixWithoutAlignment = new BitMatrix_1.default(sizeDataRegionColumn, sizeDataRegionRow);\n        for (var dataRegionRow = 0; dataRegionRow < numDataRegionsRow; ++dataRegionRow) {\n            var dataRegionRowOffset = dataRegionRow * dataRegionSizeRows;\n            for (var dataRegionColumn = 0; dataRegionColumn < numDataRegionsColumn; ++dataRegionColumn) {\n                var dataRegionColumnOffset = dataRegionColumn * dataRegionSizeColumns;\n                for (var i = 0; i < dataRegionSizeRows; ++i) {\n                    var readRowOffset = dataRegionRow * (dataRegionSizeRows + 2) + 1 + i;\n                    var writeRowOffset = dataRegionRowOffset + i;\n                    for (var j = 0; j < dataRegionSizeColumns; ++j) {\n                        var readColumnOffset = dataRegionColumn * (dataRegionSizeColumns + 2) + 1 + j;\n                        if (bitMatrix.get(readColumnOffset, readRowOffset)) {\n                            var writeColumnOffset = dataRegionColumnOffset + j;\n                            bitMatrixWithoutAlignment.set(writeColumnOffset, writeRowOffset);\n                        }\n                    }\n                }\n            }\n        }\n        return bitMatrixWithoutAlignment;\n    };\n    return BitMatrixParser;\n}());\nexports.default = BitMatrixParser;\n//# sourceMappingURL=BitMatrixParser.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","BitMatrix_1","Version_1","FormatException_1","IllegalArgumentException_1","BitMatrixParser","bitMatrix","dimension","getHeight","default","version","readVersion","mappingBitMatrix","extractDataRegion","readMappingMatrix","getWidth","prototype","getVersion","BitMatrixParser.prototype.getVersion","BitMatrixParser.readVersion","numRows","numColumns","getVersionForDimensions","readCodewords","BitMatrixParser.prototype.readCodewords","result","Int8Array","getTotalCodewords","resultOffset","row","column","corner1Read","corner2Read","corner3Read","corner4Read","get","readUtah","readCorner4","readCorner3","readCorner2","readCorner1","readModule","BitMatrixParser.prototype.readModule","set","BitMatrixParser.prototype.readUtah","currentByte","BitMatrixParser.prototype.readCorner1","BitMatrixParser.prototype.readCorner2","BitMatrixParser.prototype.readCorner3","BitMatrixParser.prototype.readCorner4","BitMatrixParser.prototype.extractDataRegion","symbolSizeRows","getSymbolSizeRows","symbolSizeColumns","getSymbolSizeColumns","dataRegionSizeRows","getDataRegionSizeRows","dataRegionSizeColumns","getDataRegionSizeColumns","numDataRegionsRow","numDataRegionsColumn","bitMatrixWithoutAlignment","dataRegionRow","dataRegionRowOffset","dataRegionColumn","dataRegionColumnOffset","i","readRowOffset","writeRowOffset","j"]
}
