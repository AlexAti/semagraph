{
"version":3,
"file":"module$node_modules$$zxing$library$cjs$core$qrcode$decoder$QRCodeDecoderMetaData.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,gFAAA,CAAqG,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAiB7IC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAAEG,MAAO,CAAA,CAAT,CAA7C,CAOIC,OAAAA,CAAuC,QAAS,EAAG,CACnDA,QAASA,sBAAqB,CAACC,QAAD,CAAW,CACrC,IAAKA,CAAAA,QAAL,CAAgBA,QADqB,CAMzCD,qBAAsBE,CAAAA,SAAUC,CAAAA,UAAhC,CAA6CC,QAAS,EAAG,CACrD,MAAO,KAAKH,CAAAA,QADyC,CAQzDD,sBAAsBE,CAAAA,SAAUG,CAAAA,uBAAhC,CAA0DC,QAAS,CAACC,MAAD,CAAS,CACxE,GAAK,IAAKN,CAAAA,QAAV,EAAiC,IAAjC,GAAsBM,MAAtB,EAAyC,EAAgB,CAAhB,CAAAA,MAAOC,CAAAA,MAAP,CAAzC,CAAA,CAGA,IAAIC,WAAaF,MAAA,CAAO,CAAP,CACjBA,OAAA,CAAO,CAAP,CAAA;AAAYA,MAAA,CAAO,CAAP,CACZA,OAAA,CAAO,CAAP,CAAA,CAAYE,UALZ,CADwE,CAS5E,OAAOT,sBAxB4C,CAAZ,EA0B3CJ,QAAQc,CAAAA,OAAR,CAAkBV,MAlD2H;",
"sources":["node_modules/@zxing/library/cjs/core/qrcode/decoder/QRCodeDecoderMetaData.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$zxing$library$cjs$core$qrcode$decoder$QRCodeDecoderMetaData\"] = function(global,require,module,exports) {\n\"use strict\";\n/*\n * Copyright 2013 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Meta-data container for QR Code decoding. Instances of this class may be used to convey information back to the\n * decoding caller. Callers are expected to process this.\n *\n * @see com.google.zxing.common.DecoderResult#getOther()\n */\nvar QRCodeDecoderMetaData = /** @class */ (function () {\n    function QRCodeDecoderMetaData(mirrored) {\n        this.mirrored = mirrored;\n    }\n    /**\n     * @return true if the QR Code was mirrored.\n     */\n    QRCodeDecoderMetaData.prototype.isMirrored = function () {\n        return this.mirrored;\n    };\n    /**\n     * Apply the result points' order correction due to mirroring.\n     *\n     * @param points Array of points to apply mirror correction to.\n     */\n    QRCodeDecoderMetaData.prototype.applyMirroredCorrection = function (points) {\n        if (!this.mirrored || points === null || points.length < 3) {\n            return;\n        }\n        var bottomLeft = points[0];\n        points[0] = points[2];\n        points[2] = bottomLeft;\n        // No need to 'fix' top-left and alignment pattern.\n    };\n    return QRCodeDecoderMetaData;\n}());\nexports.default = QRCodeDecoderMetaData;\n//# sourceMappingURL=QRCodeDecoderMetaData.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","QRCodeDecoderMetaData","mirrored","prototype","isMirrored","QRCodeDecoderMetaData.prototype.isMirrored","applyMirroredCorrection","QRCodeDecoderMetaData.prototype.applyMirroredCorrection","points","length","bottomLeft","default"]
}
