{
"version":3,
"file":"module$node_modules$$zxing$library$cjs$core$qrcode$decoder$ECBlocks.js",
"lineCount":3,
"mappings":"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",
"sources":["node_modules/@zxing/library/cjs/core/qrcode/decoder/ECBlocks.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$zxing$library$cjs$core$qrcode$decoder$ECBlocks\"] = function(global,require,module,exports) {\n\"use strict\";\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * <p>Encapsulates a set of error-correction blocks in one symbol version. Most versions will\n * use blocks of differing sizes within one version, so, this encapsulates the parameters for\n * each set of blocks. It also holds the number of error-correction codewords per block since it\n * will be the same across all blocks within one version.</p>\n */\nvar ECBlocks = /** @class */ (function () {\n    function ECBlocks(ecCodewordsPerBlock /*int*/) {\n        var ecBlocks = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            ecBlocks[_i - 1] = arguments[_i];\n        }\n        this.ecCodewordsPerBlock = ecCodewordsPerBlock;\n        this.ecBlocks = ecBlocks;\n    }\n    ECBlocks.prototype.getECCodewordsPerBlock = function () {\n        return this.ecCodewordsPerBlock;\n    };\n    ECBlocks.prototype.getNumBlocks = function () {\n        var e_1, _a;\n        var total = 0;\n        var ecBlocks = this.ecBlocks;\n        try {\n            for (var ecBlocks_1 = __values(ecBlocks), ecBlocks_1_1 = ecBlocks_1.next(); !ecBlocks_1_1.done; ecBlocks_1_1 = ecBlocks_1.next()) {\n                var ecBlock = ecBlocks_1_1.value;\n                total += ecBlock.getCount();\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (ecBlocks_1_1 && !ecBlocks_1_1.done && (_a = ecBlocks_1.return)) _a.call(ecBlocks_1);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        return total;\n    };\n    ECBlocks.prototype.getTotalECCodewords = function () {\n        return this.ecCodewordsPerBlock * this.getNumBlocks();\n    };\n    ECBlocks.prototype.getECBlocks = function () {\n        return this.ecBlocks;\n    };\n    return ECBlocks;\n}());\nexports.default = ECBlocks;\n//# sourceMappingURL=ECBlocks.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","__values","o","s","Symbol","iterator","m","i","call","length","next","value","done","TypeError","Object","defineProperty","ECBlocks","ecCodewordsPerBlock","ecBlocks","_i","arguments","prototype","getECCodewordsPerBlock","ECBlocks.prototype.getECCodewordsPerBlock","getNumBlocks","ECBlocks.prototype.getNumBlocks","_a","total","ecBlocks_1","ecBlocks_1_1","getCount","e_1_1","e_1","error","return","getTotalECCodewords","ECBlocks.prototype.getTotalECCodewords","getECBlocks","ECBlocks.prototype.getECBlocks","default"]
}
