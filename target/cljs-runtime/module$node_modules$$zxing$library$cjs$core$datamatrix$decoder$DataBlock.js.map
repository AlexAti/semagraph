{
"version":3,
"file":"module$node_modules$$zxing$library$cjs$core$datamatrix$decoder$DataBlock.js",
"lineCount":6,
"mappings":"AAAAA,cAAA,CAAA,wEAAA,CAA6F,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAErI,IAAIC,SAAY,IAAZA,EAAoB,IAAKA,CAAAA,QAAzBA,EAAsC,QAAQ,CAACC,CAAD,CAAI,CAAA,IAC9CC,EAAsB,UAAtBA,GAAI,MAAOC,OAAXD,EAAoCC,MAAOC,CAAAA,QADG,CACOC,EAAIH,CAAJG,EAASJ,CAAA,CAAEC,CAAF,CADhB,CACsBI,EAAI,CAC5E,IAAID,CAAJ,CAAO,MAAOA,EAAEE,CAAAA,IAAF,CAAON,CAAP,CACd,IAAIA,CAAJ,EAA6B,QAA7B,GAAS,MAAOA,EAAEO,CAAAA,MAAlB,CAAuC,MAAO,CAC1CC,KAAMA,QAAS,EAAG,CACVR,CAAJ,EAASK,CAAT,EAAcL,CAAEO,CAAAA,MAAhB,GAAwBP,CAAxB,CAA4B,IAAK,EAAjC,CACA,OAAO,CAAES,MAAOT,CAAPS,EAAYT,CAAA,CAAEK,CAAA,EAAF,CAAd,CAAsBK,KAAM,CAACV,CAA7B,CAFO,CADwB,CAM9C,MAAM,KAAIW,SAAJ,CAAcV,CAAA,CAAI,yBAAJ,CAAgC,iCAA9C,CAAN,CATkD,CAWtDW,OAAOC,CAAAA,cAAP,CAAsBf,OAAtB,CAA+B,YAA/B;AAA6C,CAAEW,MAAO,CAAA,CAAT,CAA7C,CACA,KAAIK,2BAA6BlB,OAAA,CAAQ,sEAAR,CAuB7BmB,OAAAA,CAA2B,QAAS,EAAG,CACvCA,QAASA,UAAS,CAACC,gBAAD,CAAmBC,SAAnB,CAA8B,CAC5C,IAAKD,CAAAA,gBAAL,CAAwBA,gBACxB,KAAKC,CAAAA,SAAL,CAAiBA,SAF2B,CAchDF,SAAUG,CAAAA,aAAV,CAA0BC,QAAS,CAACC,YAAD,CAAeC,OAAf,CAAwB,CAAA,IAC9CC,EAD8C,CACrCC,EADqC,CAGnDC,SAAWH,OAAQI,CAAAA,WAAR,EAHwC,CAKnDC,YAAc,CALqC,CAMnDC,aAAeH,QAASC,CAAAA,WAAT,EACnB,IAAI,CACA,IADA,IACSG,eAAiB7B,QAAA,CAAS4B,YAAT,CAD1B,CACkDE,iBAAmBD,cAAepB,CAAAA,IAAf,EAArE,CAA4F,CAACqB,gBAAiBnB,CAAAA,IAA9G,CAAoHmB,gBAApH;AAAuID,cAAepB,CAAAA,IAAf,EAAvI,CAA8J,CAC1J,IAAIsB,QAAUD,gBAAiBpB,CAAAA,KAC/BiB,YAAA,EAAeI,OAAQC,CAAAA,QAAR,EAF2I,CAD9J,CAMJ,MAAOC,KAAP,CAAc,CAAE,IAAAC,IAAM,CAAEC,MAAOF,KAAT,CAAR,CANd,OAOQ,CACJ,GAAI,CACIH,gBAAJ,EAAwB,CAACA,gBAAiBnB,CAAAA,IAA1C,GAAmDY,EAAnD,CAAwDM,cAAeO,CAAAA,MAAvE,GAAgFb,EAAGhB,CAAAA,IAAH,CAAQsB,cAAR,CADhF,CAAJ,OAGQ,CAAE,GAAIK,GAAJ,CAAS,KAAMA,IAAIC,CAAAA,KAAV,CAAX,CAJJ,CAOJE,GAAAA,CAAaC,KAAJ,CAAUX,WAAV,CACTY,GAAAA,CAAkB,CACtB,IAAI,CACA,IADA,IACSC,eAAiBxC,QAAA,CAAS4B,YAAT,CAD1B,CACkDa,iBAAmBD,cAAe/B,CAAAA,IAAf,EAArE,CAA4F,CAACgC,gBAAiB9B,CAAAA,IAA9G,CAAoH8B,gBAApH,CAAuID,cAAe/B,CAAAA,IAAf,EAAvI,CAEI,IADIsB,OACKzB,CADKmC,gBAAiB/B,CAAAA,KACtBJ,CAAAA,YAAAA,CAAI,CAAb,CAAgBA,YAAhB;AAAoByB,OAAQC,CAAAA,QAAR,EAApB,CAAwC1B,YAAA,EAAxC,CAA6C,CACzC,IAAIW,iBAAmBc,OAAQW,CAAAA,gBAAR,EAAvB,CACIC,kBAAoBlB,QAASmB,CAAAA,cAAT,EAApBD,CAAgD1B,gBACpDoB,IAAA,CAAOE,EAAA,EAAP,CAAA,CAA4B,IAAIvB,SAAJ,CAAcC,gBAAd,CAAgC,IAAI4B,UAAJ,CAAeF,iBAAf,CAAhC,CAHa,CAHjD,CAUJ,MAAOG,KAAP,CAAc,CAAE,IAAAC,IAAM,CAAEZ,MAAOW,KAAT,CAAR,CAVd,OAWQ,CACJ,GAAI,CACIL,gBAAJ,EAAwB,CAACA,gBAAiB9B,CAAAA,IAA1C,GAAmDa,EAAnD,CAAwDgB,cAAeJ,CAAAA,MAAvE,GAAgFZ,EAAGjB,CAAAA,IAAH,CAAQiC,cAAR,CADhF,CAAJ,OAGQ,CAAE,GAAIO,GAAJ,CAAS,KAAMA,IAAIZ,CAAAA,KAAV,CAAX,CAJJ,CAWJa,QAAAA,CAF6BX,GAAA,CAAO,CAAP,CAAUnB,CAAAA,SAAUV,CAAAA,MAEjDwC,CAA4DvB,QAASmB,CAAAA,cAAT,EAC5DK,QAAAA,CAAgCD,QAAhCC,CAA+D,CAInE,KAAS3C,YAAT,CADI4C,GACJ,CADyB,CACzB,CAAgB5C,YAAhB;AAAoB2C,OAApB,CAAmD3C,YAAA,EAAnD,CACI,IAAS6C,EAAT,CAAa,CAAb,CAAgBA,EAAhB,CAAoBZ,EAApB,CAAqCY,EAAA,EAArC,CACId,GAAA,CAAOc,EAAP,CAAUjC,CAAAA,SAAV,CAAoBZ,YAApB,CAAA,CAAyBe,YAAA,CAAa6B,GAAA,EAAb,CAK7BE,aAAAA,CAAkB,CADlBC,OACkB,CAD8B,EAC9B,GADD/B,OAAQgC,CAAAA,gBAAR,EACC,EAAiB,CAAjB,CAAqBf,EAC3C,KAASY,EAAT,CAAa,CAAb,CAAgBA,EAAhB,CAAoBC,YAApB,CAAqCD,EAAA,EAArC,CACId,GAAA,CAAOc,EAAP,CAAUjC,CAAAA,SAAV,CAAoB8B,QAApB,CAAmD,CAAnD,CAAA,CAAwD3B,YAAA,CAAa6B,GAAA,EAAb,CAGxDK,QAAAA,CAAMlB,GAAA,CAAO,CAAP,CAAUnB,CAAAA,SAAUV,CAAAA,MAC9B,KAASF,YAAT,CAAa0C,QAAb,CAA2C1C,YAA3C,CAA+CiD,OAA/C,CAAoDjD,YAAA,EAApD,CACI,IAAS6C,EAAT,CAAa,CAAb,CAAgBA,EAAhB,CAAoBZ,EAApB,CAAqCY,EAAA,EAArC,CACQK,QAEJ,CAFcH,OAAA,EAAkBF,EAAlB,CAAsB,CAAtB,EAA2BZ,EAA3B,CAA6CY,EAE3D,CAAAd,GAAA,CAAOmB,QAAP,CAAgBtC,CAAAA,SAAhB,CADcmC,OAAAI,EAA4B,CAA5BA,CAAkBD,QAAlBC,CAAgCnD,YAAhCmD,CAAoC,CAApCA,CAAwCnD,YACtD,CAAA,CAAqCe,YAAA,CAAa6B,GAAA,EAAb,CAG7C,IAAIA,GAAJ,GAA2B7B,YAAab,CAAAA,MAAxC,CACI,KAAM,KAAIO,0BAA2B2C,CAAAA,OAArC;AAEJ,MAAOrB,IAzEgD,CA2E3DrB,UAAU2C,CAAAA,SAAUC,CAAAA,mBAApB,CAA0CC,QAAS,EAAG,CAClD,MAAO,KAAK5C,CAAAA,gBADsC,CAGtDD,UAAU2C,CAAAA,SAAUG,CAAAA,YAApB,CAAmCC,QAAS,EAAG,CAC3C,MAAO,KAAK7C,CAAAA,SAD+B,CAG/C,OAAOF,UAhGgC,CAAZ,EAkG/BjB,QAAQ2D,CAAAA,OAAR,CAAkB1C,MAvImH;",
"sources":["node_modules/@zxing/library/cjs/core/datamatrix/decoder/DataBlock.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$zxing$library$cjs$core$datamatrix$decoder$DataBlock\"] = function(global,require,module,exports) {\n\"use strict\";\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar IllegalArgumentException_1 = require(\"../../IllegalArgumentException\");\n/*\n * Copyright 2008 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * <p>Encapsulates a block of data within a Data Matrix Code. Data Matrix Codes may split their data into\n * multiple blocks, each of which is a unit of data and error-correction codewords. Each\n * is represented by an instance of this class.</p>\n *\n * @author bbrown@google.com (Brian Brown)\n */\nvar DataBlock = /** @class */ (function () {\n    function DataBlock(numDataCodewords, codewords) {\n        this.numDataCodewords = numDataCodewords;\n        this.codewords = codewords;\n    }\n    /**\n     * <p>When Data Matrix Codes use multiple data blocks, they actually interleave the bytes of each of them.\n     * That is, the first byte of data block 1 to n is written, then the second bytes, and so on. This\n     * method will separate the data into original blocks.</p>\n     *\n     * @param rawCodewords bytes as read directly from the Data Matrix Code\n     * @param version version of the Data Matrix Code\n     * @return DataBlocks containing original bytes, \"de-interleaved\" from representation in the\n     *         Data Matrix Code\n     */\n    DataBlock.getDataBlocks = function (rawCodewords, version) {\n        var e_1, _a, e_2, _b;\n        // Figure out the number and size of data blocks used by this version\n        var ecBlocks = version.getECBlocks();\n        // First count the total number of data blocks\n        var totalBlocks = 0;\n        var ecBlockArray = ecBlocks.getECBlocks();\n        try {\n            for (var ecBlockArray_1 = __values(ecBlockArray), ecBlockArray_1_1 = ecBlockArray_1.next(); !ecBlockArray_1_1.done; ecBlockArray_1_1 = ecBlockArray_1.next()) {\n                var ecBlock = ecBlockArray_1_1.value;\n                totalBlocks += ecBlock.getCount();\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (ecBlockArray_1_1 && !ecBlockArray_1_1.done && (_a = ecBlockArray_1.return)) _a.call(ecBlockArray_1);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        // Now establish DataBlocks of the appropriate size and number of data codewords\n        var result = new Array(totalBlocks);\n        var numResultBlocks = 0;\n        try {\n            for (var ecBlockArray_2 = __values(ecBlockArray), ecBlockArray_2_1 = ecBlockArray_2.next(); !ecBlockArray_2_1.done; ecBlockArray_2_1 = ecBlockArray_2.next()) {\n                var ecBlock = ecBlockArray_2_1.value;\n                for (var i = 0; i < ecBlock.getCount(); i++) {\n                    var numDataCodewords = ecBlock.getDataCodewords();\n                    var numBlockCodewords = ecBlocks.getECCodewords() + numDataCodewords;\n                    result[numResultBlocks++] = new DataBlock(numDataCodewords, new Uint8Array(numBlockCodewords));\n                }\n            }\n        }\n        catch (e_2_1) { e_2 = { error: e_2_1 }; }\n        finally {\n            try {\n                if (ecBlockArray_2_1 && !ecBlockArray_2_1.done && (_b = ecBlockArray_2.return)) _b.call(ecBlockArray_2);\n            }\n            finally { if (e_2) throw e_2.error; }\n        }\n        // All blocks have the same amount of data, except that the last n\n        // (where n may be 0) have 1 less byte. Figure out where these start.\n        // TODO(bbrown): There is only one case where there is a difference for Data Matrix for size 144\n        var longerBlocksTotalCodewords = result[0].codewords.length;\n        // int shorterBlocksTotalCodewords = longerBlocksTotalCodewords - 1;\n        var longerBlocksNumDataCodewords = longerBlocksTotalCodewords - ecBlocks.getECCodewords();\n        var shorterBlocksNumDataCodewords = longerBlocksNumDataCodewords - 1;\n        // The last elements of result may be 1 element shorter for 144 matrix\n        // first fill out as many elements as all of them have minus 1\n        var rawCodewordsOffset = 0;\n        for (var i = 0; i < shorterBlocksNumDataCodewords; i++) {\n            for (var j = 0; j < numResultBlocks; j++) {\n                result[j].codewords[i] = rawCodewords[rawCodewordsOffset++];\n            }\n        }\n        // Fill out the last data block in the longer ones\n        var specialVersion = version.getVersionNumber() === 24;\n        var numLongerBlocks = specialVersion ? 8 : numResultBlocks;\n        for (var j = 0; j < numLongerBlocks; j++) {\n            result[j].codewords[longerBlocksNumDataCodewords - 1] = rawCodewords[rawCodewordsOffset++];\n        }\n        // Now add in error correction blocks\n        var max = result[0].codewords.length;\n        for (var i = longerBlocksNumDataCodewords; i < max; i++) {\n            for (var j = 0; j < numResultBlocks; j++) {\n                var jOffset = specialVersion ? (j + 8) % numResultBlocks : j;\n                var iOffset = specialVersion && jOffset > 7 ? i - 1 : i;\n                result[jOffset].codewords[iOffset] = rawCodewords[rawCodewordsOffset++];\n            }\n        }\n        if (rawCodewordsOffset !== rawCodewords.length) {\n            throw new IllegalArgumentException_1.default();\n        }\n        return result;\n    };\n    DataBlock.prototype.getNumDataCodewords = function () {\n        return this.numDataCodewords;\n    };\n    DataBlock.prototype.getCodewords = function () {\n        return this.codewords;\n    };\n    return DataBlock;\n}());\nexports.default = DataBlock;\n//# sourceMappingURL=DataBlock.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","__values","o","s","Symbol","iterator","m","i","call","length","next","value","done","TypeError","Object","defineProperty","IllegalArgumentException_1","DataBlock","numDataCodewords","codewords","getDataBlocks","DataBlock.getDataBlocks","rawCodewords","version","_a","_b","ecBlocks","getECBlocks","totalBlocks","ecBlockArray","ecBlockArray_1","ecBlockArray_1_1","ecBlock","getCount","e_1_1","e_1","error","return","result","Array","numResultBlocks","ecBlockArray_2","ecBlockArray_2_1","getDataCodewords","numBlockCodewords","getECCodewords","Uint8Array","e_2_1","e_2","longerBlocksNumDataCodewords","shorterBlocksNumDataCodewords","rawCodewordsOffset","j","numLongerBlocks","specialVersion","getVersionNumber","max","jOffset","iOffset","default","prototype","getNumDataCodewords","DataBlock.prototype.getNumDataCodewords","getCodewords","DataBlock.prototype.getCodewords"]
}
