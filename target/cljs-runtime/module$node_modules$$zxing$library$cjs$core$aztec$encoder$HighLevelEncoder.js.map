{
"version":3,
"file":"module$node_modules$$zxing$library$cjs$core$aztec$encoder$HighLevelEncoder.js",
"lineCount":11,
"mappings":"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",
"sources":["node_modules/@zxing/library/cjs/core/aztec/encoder/HighLevelEncoder.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$zxing$library$cjs$core$aztec$encoder$HighLevelEncoder\"] = function(global,require,module,exports) {\n\"use strict\";\n/*\n * Copyright 2013 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// import java.util.Collection;\n// import java.util.Collections;\nvar Collections_1 = require(\"../../util/Collections\");\n// import java.util.Comparator;\n// import java.util.Iterator;\n// import java.util.LinkedList;\nvar State_1 = require(\"./State\");\nvar C = require(\"./EncoderConstants\");\nvar CharMap = require(\"./CharMap\");\nvar ShiftTable = require(\"./ShiftTable\");\nvar StringUtils_1 = require(\"../../common/StringUtils\");\n/**\n * This produces nearly optimal encodings of text into the first-level of\n * encoding used by Aztec code.\n *\n * It uses a dynamic algorithm.  For each prefix of the string, it determines\n * a set of encodings that could lead to this prefix.  We repeatedly add a\n * character and generate a new set of optimal encodings until we have read\n * through the entire input.\n *\n * @author Frank Yellin\n * @author Rustam Abdullaev\n */\nvar HighLevelEncoder = /** @class */ (function () {\n    function HighLevelEncoder(text) {\n        this.text = text;\n    }\n    /**\n     * @return text represented by this encoder encoded as a {@link BitArray}\n     */\n    HighLevelEncoder.prototype.encode = function () {\n        var spaceCharCode = StringUtils_1.default.getCharCode(' ');\n        var lineBreakCharCode = StringUtils_1.default.getCharCode('\\n');\n        var states = Collections_1.default.singletonList(State_1.default.INITIAL_STATE);\n        for (var index = 0; index < this.text.length; index++) {\n            var pairCode = void 0;\n            var nextChar = index + 1 < this.text.length ? this.text[index + 1] : 0;\n            switch (this.text[index]) {\n                case StringUtils_1.default.getCharCode('\\r'):\n                    pairCode = nextChar === lineBreakCharCode ? 2 : 0;\n                    break;\n                case StringUtils_1.default.getCharCode('.'):\n                    pairCode = nextChar === spaceCharCode ? 3 : 0;\n                    break;\n                case StringUtils_1.default.getCharCode(','):\n                    pairCode = nextChar === spaceCharCode ? 4 : 0;\n                    break;\n                case StringUtils_1.default.getCharCode(':'):\n                    pairCode = nextChar === spaceCharCode ? 5 : 0;\n                    break;\n                default:\n                    pairCode = 0;\n            }\n            if (pairCode > 0) {\n                // We have one of the four special PUNCT pairs.  Treat them specially.\n                // Get a new set of states for the two new characters.\n                states = HighLevelEncoder.updateStateListForPair(states, index, pairCode);\n                index++;\n            }\n            else {\n                // Get a new set of states for the new character.\n                states = this.updateStateListForChar(states, index);\n            }\n        }\n        // We are left with a set of states.  Find the shortest one.\n        var minState = Collections_1.default.min(states, function (a, b) {\n            return a.getBitCount() - b.getBitCount();\n        });\n        // Convert it to a bit array, and return.\n        return minState.toBitArray(this.text);\n    };\n    // We update a set of states for a new character by updating each state\n    // for the new character, merging the results, and then removing the\n    // non-optimal states.\n    HighLevelEncoder.prototype.updateStateListForChar = function (states, index) {\n        var e_1, _a;\n        var result = [];\n        try {\n            for (var states_1 = __values(states), states_1_1 = states_1.next(); !states_1_1.done; states_1_1 = states_1.next()) {\n                var state = states_1_1.value /*State*/;\n                this.updateStateForChar(state, index, result);\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (states_1_1 && !states_1_1.done && (_a = states_1.return)) _a.call(states_1);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        return HighLevelEncoder.simplifyStates(result);\n    };\n    // Return a set of states that represent the possible ways of updating this\n    // state for the next character.  The resulting set of states are added to\n    // the \"result\" list.\n    HighLevelEncoder.prototype.updateStateForChar = function (state, index, result) {\n        var ch = (this.text[index] & 0xff);\n        var charInCurrentTable = CharMap.CHAR_MAP[state.getMode()][ch] > 0;\n        var stateNoBinary = null;\n        for (var mode /*int*/ = 0; mode <= C.MODE_PUNCT; mode++) {\n            var charInMode = CharMap.CHAR_MAP[mode][ch];\n            if (charInMode > 0) {\n                if (stateNoBinary == null) {\n                    // Only create stateNoBinary the first time it's required.\n                    stateNoBinary = state.endBinaryShift(index);\n                }\n                // Try generating the character by latching to its mode\n                if (!charInCurrentTable ||\n                    mode === state.getMode() ||\n                    mode === C.MODE_DIGIT) {\n                    // If the character is in the current table, we don't want to latch to\n                    // any other mode except possibly digit (which uses only 4 bits).  Any\n                    // other latch would be equally successful *after* this character, and\n                    // so wouldn't save any bits.\n                    var latchState = stateNoBinary.latchAndAppend(mode, charInMode);\n                    result.push(latchState);\n                }\n                // Try generating the character by switching to its mode.\n                if (!charInCurrentTable &&\n                    ShiftTable.SHIFT_TABLE[state.getMode()][mode] >= 0) {\n                    // It never makes sense to temporarily shift to another mode if the\n                    // character exists in the current mode.  That can never save bits.\n                    var shiftState = stateNoBinary.shiftAndAppend(mode, charInMode);\n                    result.push(shiftState);\n                }\n            }\n        }\n        if (state.getBinaryShiftByteCount() > 0 ||\n            CharMap.CHAR_MAP[state.getMode()][ch] === 0) {\n            // It's never worthwhile to go into binary shift mode if you're not already\n            // in binary shift mode, and the character exists in your current mode.\n            // That can never save bits over just outputting the char in the current mode.\n            var binaryState = state.addBinaryShiftChar(index);\n            result.push(binaryState);\n        }\n    };\n    HighLevelEncoder.updateStateListForPair = function (states, index, pairCode) {\n        var e_2, _a;\n        var result = [];\n        try {\n            for (var states_2 = __values(states), states_2_1 = states_2.next(); !states_2_1.done; states_2_1 = states_2.next()) {\n                var state = states_2_1.value /*State*/;\n                this.updateStateForPair(state, index, pairCode, result);\n            }\n        }\n        catch (e_2_1) { e_2 = { error: e_2_1 }; }\n        finally {\n            try {\n                if (states_2_1 && !states_2_1.done && (_a = states_2.return)) _a.call(states_2);\n            }\n            finally { if (e_2) throw e_2.error; }\n        }\n        return this.simplifyStates(result);\n    };\n    HighLevelEncoder.updateStateForPair = function (state, index, pairCode, result) {\n        var stateNoBinary = state.endBinaryShift(index);\n        // Possibility 1.  Latch to C.MODE_PUNCT, and then append this code\n        result.push(stateNoBinary.latchAndAppend(C.MODE_PUNCT, pairCode));\n        if (state.getMode() !== C.MODE_PUNCT) {\n            // Possibility 2.  Shift to C.MODE_PUNCT, and then append this code.\n            // Every state except C.MODE_PUNCT (handled above) can shift\n            result.push(stateNoBinary.shiftAndAppend(C.MODE_PUNCT, pairCode));\n        }\n        if (pairCode === 3 || pairCode === 4) {\n            // both characters are in DIGITS.  Sometimes better to just add two digits\n            var digitState = stateNoBinary\n                .latchAndAppend(C.MODE_DIGIT, 16 - pairCode) // period or comma in DIGIT\n                .latchAndAppend(C.MODE_DIGIT, 1); // space in DIGIT\n            result.push(digitState);\n        }\n        if (state.getBinaryShiftByteCount() > 0) {\n            // It only makes sense to do the characters as binary if we're already\n            // in binary mode.\n            var binaryState = state\n                .addBinaryShiftChar(index)\n                .addBinaryShiftChar(index + 1);\n            result.push(binaryState);\n        }\n    };\n    HighLevelEncoder.simplifyStates = function (states) {\n        var e_3, _a, e_4, _b;\n        var result = [];\n        try {\n            for (var states_3 = __values(states), states_3_1 = states_3.next(); !states_3_1.done; states_3_1 = states_3.next()) {\n                var newState = states_3_1.value;\n                var add = true;\n                var _loop_1 = function (oldState) {\n                    if (oldState.isBetterThanOrEqualTo(newState)) {\n                        add = false;\n                        return \"break\";\n                    }\n                    if (newState.isBetterThanOrEqualTo(oldState)) {\n                        // iterator.remove();\n                        result = result.filter(function (x) { return x !== oldState; }); // remove old state\n                    }\n                };\n                try {\n                    for (var result_1 = (e_4 = void 0, __values(result)), result_1_1 = result_1.next(); !result_1_1.done; result_1_1 = result_1.next()) {\n                        var oldState = result_1_1.value;\n                        var state_1 = _loop_1(oldState);\n                        if (state_1 === \"break\")\n                            break;\n                    }\n                }\n                catch (e_4_1) { e_4 = { error: e_4_1 }; }\n                finally {\n                    try {\n                        if (result_1_1 && !result_1_1.done && (_b = result_1.return)) _b.call(result_1);\n                    }\n                    finally { if (e_4) throw e_4.error; }\n                }\n                if (add) {\n                    result.push(newState);\n                }\n            }\n        }\n        catch (e_3_1) { e_3 = { error: e_3_1 }; }\n        finally {\n            try {\n                if (states_3_1 && !states_3_1.done && (_a = states_3.return)) _a.call(states_3);\n            }\n            finally { if (e_3) throw e_3.error; }\n        }\n        return result;\n    };\n    return HighLevelEncoder;\n}());\nexports.default = HighLevelEncoder;\n//# sourceMappingURL=HighLevelEncoder.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","__values","o","s","Symbol","iterator","m","i","call","length","next","value","done","TypeError","Object","defineProperty","Collections_1","State_1","C","CharMap","ShiftTable","StringUtils_1","HighLevelEncoder","text","prototype","encode","HighLevelEncoder.prototype.encode","spaceCharCode","default","getCharCode","lineBreakCharCode","states","singletonList","INITIAL_STATE","index","pairCode","nextChar","updateStateListForPair","updateStateListForChar","min","minState","a","b","getBitCount","toBitArray","HighLevelEncoder.prototype.updateStateListForChar","_a","result","states_1","states_1_1","updateStateForChar","e_1_1","e_1","error","return","simplifyStates","HighLevelEncoder.prototype.updateStateForChar","state","ch","charInCurrentTable","CHAR_MAP","getMode","stateNoBinary","mode","MODE_PUNCT","charInMode","endBinaryShift","MODE_DIGIT","latchState","latchAndAppend","push","SHIFT_TABLE","shiftState","shiftAndAppend","getBinaryShiftByteCount","binaryState","addBinaryShiftChar","HighLevelEncoder.updateStateListForPair","states_2","states_2_1","updateStateForPair","e_2_1","e_2","HighLevelEncoder.updateStateForPair","digitState","HighLevelEncoder.simplifyStates","e_4","_b","states_3","states_3_1","newState","add","_loop_1","oldState","isBetterThanOrEqualTo","filter","x","result_1","result_1_1","state_1","e_4_1","e_3_1","e_3"]
}
