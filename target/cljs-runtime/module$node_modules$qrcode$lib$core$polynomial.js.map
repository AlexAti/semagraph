{
"version":3,
"file":"module$node_modules$qrcode$lib$core$polynomial.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,8CAAA,CAAmE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAC3G,MAAMC,GAAKH,OAAA,CAAQ,kDAAR,CASXE,QAAQE,CAAAA,GAAR,CAAcC,QAAa,CAACC,EAAD,CAAKC,EAAL,CAAS,CAClC,MAAMC,MAAQ,IAAIC,UAAJ,CAAeH,EAAGI,CAAAA,MAAlB,CAA2BH,EAAGG,CAAAA,MAA9B,CAAuC,CAAvC,CAEd,KAAK,IAAIC,EAAI,CAAb,CAAgBA,CAAhB,CAAoBL,EAAGI,CAAAA,MAAvB,CAA+BC,CAAA,EAA/B,CACE,IAAK,IAAIC,EAAI,CAAb,CAAgBA,CAAhB,CAAoBL,EAAGG,CAAAA,MAAvB,CAA+BE,CAAA,EAA/B,CACEJ,KAAA,CAAMG,CAAN,CAAUC,CAAV,CAAA,EAAgBT,EAAGC,CAAAA,GAAH,CAAOE,EAAA,CAAGK,CAAH,CAAP,CAAcJ,EAAA,CAAGK,CAAH,CAAd,CAIpB,OAAOJ,MAT2B,CAmBpCN,QAAQW,CAAAA,GAAR,CAAcC,QAAa,CAACC,QAAD,CAAWC,OAAX,CAAoB,CAG7C,IAFIC,QAEJ,CAFa,IAAIR,UAAJ,CAAeM,QAAf,CAEb,CAA2C,CAA3C,EAAQE,QAAOP,CAAAA,MAAf,CAAwBM,OAAQN,CAAAA,MAAhC,CAAA,CAA8C,CAC5C,IAAMF,MAAQS,QAAA,CAAO,CAAP,CAEd,KAAK,IAAIN,EAAI,CAAb,CAAgBA,CAAhB,CAAoBK,OAAQN,CAAAA,MAA5B,CAAoCC,CAAA,EAApC,CACEM,QAAA,CAAON,CAAP,CAAA;AAAaR,EAAGC,CAAAA,GAAH,CAAOY,OAAA,CAAQL,CAAR,CAAP,CAAmBH,KAAnB,CAKf,KADIU,KACJ,CADa,CACb,CAAOA,KAAP,CAAgBD,QAAOP,CAAAA,MAAvB,EAAoD,CAApD,GAAiCO,QAAA,CAAOC,KAAP,CAAjC,CAAA,CAAuDA,KAAA,EACvDD,SAAA,CAASA,QAAOE,CAAAA,KAAP,CAAaD,KAAb,CAVmC,CAa9C,MAAOD,SAhBsC,CA0B/Cf,QAAQkB,CAAAA,oBAAR,CAA+BC,QAA8B,CAACC,MAAD,CAAS,CACpE,IAAIC,KAAO,IAAId,UAAJ,CAAe,CAAC,CAAD,CAAf,CACX,KAAK,IAAIE,EAAI,CAAb,CAAgBA,CAAhB,CAAoBW,MAApB,CAA4BX,CAAA,EAA5B,CACEY,IAAA,CAAOrB,OAAQE,CAAAA,GAAR,CAAYmB,IAAZ,CAAkB,IAAId,UAAJ,CAAe,CAAC,CAAD,CAAIN,EAAGqB,CAAAA,GAAH,CAAOb,CAAP,CAAJ,CAAf,CAAlB,CAGT,OAAOY,KAN6D,CAvDqC;",
"sources":["node_modules/qrcode/lib/core/polynomial.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$qrcode$lib$core$polynomial\"] = function(global,require,module,exports) {\nconst GF = require('./galois-field')\n\n/**\n * Multiplies two polynomials inside Galois Field\n *\n * @param  {Uint8Array} p1 Polynomial\n * @param  {Uint8Array} p2 Polynomial\n * @return {Uint8Array}    Product of p1 and p2\n */\nexports.mul = function mul (p1, p2) {\n  const coeff = new Uint8Array(p1.length + p2.length - 1)\n\n  for (let i = 0; i < p1.length; i++) {\n    for (let j = 0; j < p2.length; j++) {\n      coeff[i + j] ^= GF.mul(p1[i], p2[j])\n    }\n  }\n\n  return coeff\n}\n\n/**\n * Calculate the remainder of polynomials division\n *\n * @param  {Uint8Array} divident Polynomial\n * @param  {Uint8Array} divisor  Polynomial\n * @return {Uint8Array}          Remainder\n */\nexports.mod = function mod (divident, divisor) {\n  let result = new Uint8Array(divident)\n\n  while ((result.length - divisor.length) >= 0) {\n    const coeff = result[0]\n\n    for (let i = 0; i < divisor.length; i++) {\n      result[i] ^= GF.mul(divisor[i], coeff)\n    }\n\n    // remove all zeros from buffer head\n    let offset = 0\n    while (offset < result.length && result[offset] === 0) offset++\n    result = result.slice(offset)\n  }\n\n  return result\n}\n\n/**\n * Generate an irreducible generator polynomial of specified degree\n * (used by Reed-Solomon encoder)\n *\n * @param  {Number} degree Degree of the generator polynomial\n * @return {Uint8Array}    Buffer containing polynomial coefficients\n */\nexports.generateECPolynomial = function generateECPolynomial (degree) {\n  let poly = new Uint8Array([1])\n  for (let i = 0; i < degree; i++) {\n    poly = exports.mul(poly, new Uint8Array([1, GF.exp(i)]))\n  }\n\n  return poly\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","GF","mul","exports.mul","p1","p2","coeff","Uint8Array","length","i","j","mod","exports.mod","divident","divisor","result","offset","slice","generateECPolynomial","exports.generateECPolynomial","degree","poly","exp"]
}
