{
"version":3,
"file":"module$node_modules$$zxing$library$cjs$core$common$reedsolomon$ReedSolomonEncoder.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/@zxing/library/cjs/core/common/reedsolomon/ReedSolomonEncoder.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$zxing$library$cjs$core$common$reedsolomon$ReedSolomonEncoder\"] = function(global,require,module,exports) {\n\"use strict\";\n/*\n * Copyright 2008 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar GenericGFPoly_1 = require(\"./GenericGFPoly\");\nvar System_1 = require(\"../../util/System\");\nvar IllegalArgumentException_1 = require(\"../../IllegalArgumentException\");\n/**\n * <p>Implements Reed-Solomon encoding, as the name implies.</p>\n *\n * @author Sean Owen\n * @author William Rucklidge\n */\nvar ReedSolomonEncoder = /** @class */ (function () {\n    /**\n     * A reed solomon error-correcting encoding constructor is created by\n     * passing as Galois Field with of size equal to the number of code\n     * words (symbols) in the alphabet (the number of values in each\n     * element of arrays that are encoded/decoded).\n     * @param field A galois field with a number of elements equal to the size\n     * of the alphabet of symbols to encode.\n     */\n    function ReedSolomonEncoder(field) {\n        this.field = field;\n        this.cachedGenerators = [];\n        this.cachedGenerators.push(new GenericGFPoly_1.default(field, Int32Array.from([1])));\n    }\n    ReedSolomonEncoder.prototype.buildGenerator = function (degree /*int*/) {\n        var cachedGenerators = this.cachedGenerators;\n        if (degree >= cachedGenerators.length) {\n            var lastGenerator = cachedGenerators[cachedGenerators.length - 1];\n            var field = this.field;\n            for (var d = cachedGenerators.length; d <= degree; d++) {\n                var nextGenerator = lastGenerator.multiply(new GenericGFPoly_1.default(field, Int32Array.from([1, field.exp(d - 1 + field.getGeneratorBase())])));\n                cachedGenerators.push(nextGenerator);\n                lastGenerator = nextGenerator;\n            }\n        }\n        return cachedGenerators[degree];\n    };\n    /**\n     * <p>Encode a sequence of code words (symbols) using Reed-Solomon to allow decoders\n     * to detect and correct errors that may have been introduced when the resulting\n     * data is stored or transmitted.</p>\n     *\n     * @param toEncode array used for both and output. Caller initializes the array with\n     * the code words (symbols) to be encoded followed by empty elements allocated to make\n     * space for error-correction code words in the encoded output. The array contains\n     * the encdoded output when encode returns. Code words are encoded as numbers from\n     * 0 to n-1, where n is the number of possible code words (symbols), as determined\n     * by the size of the Galois Field passed in the constructor of this object.\n     * @param ecBytes the number of elements reserved in the array (first parameter)\n     * to store error-correction code words. Thus, the number of code words (symbols)\n     * to encode in the first parameter is thus toEncode.length - ecBytes.\n     * Note, the use of \"bytes\" in the name of this parameter is misleading, as there may\n     * be more or fewer than 256 symbols being encoded, as determined by the number of\n     * elements in the Galois Field passed as a constructor to this object.\n     * @throws IllegalArgumentException thrown in response to validation errros.\n     */\n    ReedSolomonEncoder.prototype.encode = function (toEncode, ecBytes /*int*/) {\n        if (ecBytes === 0) {\n            throw new IllegalArgumentException_1.default('No error correction bytes');\n        }\n        var dataBytes = toEncode.length - ecBytes;\n        if (dataBytes <= 0) {\n            throw new IllegalArgumentException_1.default('No data bytes provided');\n        }\n        var generator = this.buildGenerator(ecBytes);\n        var infoCoefficients = new Int32Array(dataBytes);\n        System_1.default.arraycopy(toEncode, 0, infoCoefficients, 0, dataBytes);\n        var info = new GenericGFPoly_1.default(this.field, infoCoefficients);\n        info = info.multiplyByMonomial(ecBytes, 1);\n        var remainder = info.divide(generator)[1];\n        var coefficients = remainder.getCoefficients();\n        var numZeroCoefficients = ecBytes - coefficients.length;\n        for (var i = 0; i < numZeroCoefficients; i++) {\n            toEncode[dataBytes + i] = 0;\n        }\n        System_1.default.arraycopy(coefficients, 0, toEncode, dataBytes + numZeroCoefficients, coefficients.length);\n    };\n    return ReedSolomonEncoder;\n}());\nexports.default = ReedSolomonEncoder;\n//# sourceMappingURL=ReedSolomonEncoder.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","GenericGFPoly_1","System_1","IllegalArgumentException_1","ReedSolomonEncoder","field","cachedGenerators","push","default","Int32Array","from","prototype","buildGenerator","ReedSolomonEncoder.prototype.buildGenerator","degree","length","lastGenerator","d","nextGenerator","multiply","exp","getGeneratorBase","encode","ReedSolomonEncoder.prototype.encode","toEncode","ecBytes","dataBytes","generator","infoCoefficients","arraycopy","info","multiplyByMonomial","coefficients","divide","remainder","getCoefficients","numZeroCoefficients","i"]
}
