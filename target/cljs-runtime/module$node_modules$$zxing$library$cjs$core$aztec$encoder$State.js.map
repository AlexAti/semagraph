{
"version":3,
"file":"module$node_modules$$zxing$library$cjs$core$aztec$encoder$State.js",
"lineCount":9,
"mappings":"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",
"sources":["node_modules/@zxing/library/cjs/core/aztec/encoder/State.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$zxing$library$cjs$core$aztec$encoder$State\"] = function(global,require,module,exports) {\n\"use strict\";\n/*\n * Copyright 2013 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// package com.google.zxing.aztec.encoder;\n// import java.util.Deque;\n// import java.util.LinkedList;\n// import com.google.zxing.common.BitArray;\nvar BitArray_1 = require(\"../../common/BitArray\");\nvar TokenHelpers = require(\"./TokenHelpers\");\nvar C = require(\"./EncoderConstants\");\nvar LatchTable = require(\"./LatchTable\");\nvar ShiftTable = require(\"./ShiftTable\");\nvar StringUtils_1 = require(\"../../common/StringUtils\");\n/**\n * State represents all information about a sequence necessary to generate the current output.\n * Note that a state is immutable.\n */\nvar State = /** @class */ (function () {\n    function State(token, mode, binaryBytes, bitCount) {\n        this.token = token;\n        this.mode = mode;\n        this.binaryShiftByteCount = binaryBytes;\n        this.bitCount = bitCount;\n        // Make sure we match the token\n        // int binaryShiftBitCount = (binaryShiftByteCount * 8) +\n        //    (binaryShiftByteCount === 0 ? 0 :\n        //     binaryShiftByteCount <= 31 ? 10 :\n        //     binaryShiftByteCount <= 62 ? 20 : 21);\n        // assert this.bitCount === token.getTotalBitCount() + binaryShiftBitCount;\n    }\n    State.prototype.getMode = function () {\n        return this.mode;\n    };\n    State.prototype.getToken = function () {\n        return this.token;\n    };\n    State.prototype.getBinaryShiftByteCount = function () {\n        return this.binaryShiftByteCount;\n    };\n    State.prototype.getBitCount = function () {\n        return this.bitCount;\n    };\n    // Create a new state representing this state with a latch to a (not\n    // necessary different) mode, and then a code.\n    State.prototype.latchAndAppend = function (mode, value) {\n        // assert binaryShiftByteCount === 0;\n        var bitCount = this.bitCount;\n        var token = this.token;\n        if (mode !== this.mode) {\n            var latch = LatchTable.LATCH_TABLE[this.mode][mode];\n            token = TokenHelpers.add(token, latch & 0xffff, latch >> 16);\n            bitCount += latch >> 16;\n        }\n        var latchModeBitCount = mode === C.MODE_DIGIT ? 4 : 5;\n        token = TokenHelpers.add(token, value, latchModeBitCount);\n        return new State(token, mode, 0, bitCount + latchModeBitCount);\n    };\n    // Create a new state representing this state, with a temporary shift\n    // to a different mode to output a single value.\n    State.prototype.shiftAndAppend = function (mode, value) {\n        // assert binaryShiftByteCount === 0 && this.mode !== mode;\n        var token = this.token;\n        var thisModeBitCount = this.mode === C.MODE_DIGIT ? 4 : 5;\n        // Shifts exist only to UPPER and PUNCT, both with tokens size 5.\n        token = TokenHelpers.add(token, ShiftTable.SHIFT_TABLE[this.mode][mode], thisModeBitCount);\n        token = TokenHelpers.add(token, value, 5);\n        return new State(token, this.mode, 0, this.bitCount + thisModeBitCount + 5);\n    };\n    // Create a new state representing this state, but an additional character\n    // output in Binary Shift mode.\n    State.prototype.addBinaryShiftChar = function (index) {\n        var token = this.token;\n        var mode = this.mode;\n        var bitCount = this.bitCount;\n        if (this.mode === C.MODE_PUNCT || this.mode === C.MODE_DIGIT) {\n            // assert binaryShiftByteCount === 0;\n            var latch = LatchTable.LATCH_TABLE[mode][C.MODE_UPPER];\n            token = TokenHelpers.add(token, latch & 0xffff, latch >> 16);\n            bitCount += latch >> 16;\n            mode = C.MODE_UPPER;\n        }\n        var deltaBitCount = this.binaryShiftByteCount === 0 || this.binaryShiftByteCount === 31\n            ? 18\n            : this.binaryShiftByteCount === 62\n                ? 9\n                : 8;\n        var result = new State(token, mode, this.binaryShiftByteCount + 1, bitCount + deltaBitCount);\n        if (result.binaryShiftByteCount === 2047 + 31) {\n            // The string is as long as it's allowed to be.  We should end it.\n            result = result.endBinaryShift(index + 1);\n        }\n        return result;\n    };\n    // Create the state identical to this one, but we are no longer in\n    // Binary Shift mode.\n    State.prototype.endBinaryShift = function (index) {\n        if (this.binaryShiftByteCount === 0) {\n            return this;\n        }\n        var token = this.token;\n        token = TokenHelpers.addBinaryShift(token, index - this.binaryShiftByteCount, this.binaryShiftByteCount);\n        // assert token.getTotalBitCount() === this.bitCount;\n        return new State(token, this.mode, 0, this.bitCount);\n    };\n    // Returns true if \"this\" state is better (equal: or) to be in than \"that\"\n    // state under all possible circumstances.\n    State.prototype.isBetterThanOrEqualTo = function (other) {\n        var newModeBitCount = this.bitCount + (LatchTable.LATCH_TABLE[this.mode][other.mode] >> 16);\n        if (this.binaryShiftByteCount < other.binaryShiftByteCount) {\n            // add additional B/S encoding cost of other, if any\n            newModeBitCount +=\n                State.calculateBinaryShiftCost(other) -\n                    State.calculateBinaryShiftCost(this);\n        }\n        else if (this.binaryShiftByteCount > other.binaryShiftByteCount &&\n            other.binaryShiftByteCount > 0) {\n            // maximum possible additional cost (it: h)\n            newModeBitCount += 10;\n        }\n        return newModeBitCount <= other.bitCount;\n    };\n    State.prototype.toBitArray = function (text) {\n        var e_1, _a;\n        // Reverse the tokens, so that they are in the order that they should\n        // be output\n        var symbols = [];\n        for (var token = this.endBinaryShift(text.length).token; token !== null; token = token.getPrevious()) {\n            symbols.unshift(token);\n        }\n        var bitArray = new BitArray_1.default();\n        try {\n            // Add each token to the result.\n            for (var symbols_1 = __values(symbols), symbols_1_1 = symbols_1.next(); !symbols_1_1.done; symbols_1_1 = symbols_1.next()) {\n                var symbol = symbols_1_1.value;\n                symbol.appendTo(bitArray, text);\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (symbols_1_1 && !symbols_1_1.done && (_a = symbols_1.return)) _a.call(symbols_1);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        // assert bitArray.getSize() === this.bitCount;\n        return bitArray;\n    };\n    /**\n     * @Override\n     */\n    State.prototype.toString = function () {\n        return StringUtils_1.default.format('%s bits=%d bytes=%d', C.MODE_NAMES[this.mode], this.bitCount, this.binaryShiftByteCount);\n    };\n    State.calculateBinaryShiftCost = function (state) {\n        if (state.binaryShiftByteCount > 62) {\n            return 21; // B/S with extended length\n        }\n        if (state.binaryShiftByteCount > 31) {\n            return 20; // two B/S\n        }\n        if (state.binaryShiftByteCount > 0) {\n            return 10; // one B/S\n        }\n        return 0;\n    };\n    State.INITIAL_STATE = new State(C.EMPTY_TOKEN, C.MODE_UPPER, 0, 0);\n    return State;\n}());\nexports.default = State;\n//# sourceMappingURL=State.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","__values","o","s","Symbol","iterator","m","i","call","length","next","value","done","TypeError","Object","defineProperty","BitArray_1","TokenHelpers","C","LatchTable","ShiftTable","StringUtils_1","State","token","mode","binaryBytes","bitCount","binaryShiftByteCount","prototype","getMode","State.prototype.getMode","getToken","State.prototype.getToken","getBinaryShiftByteCount","State.prototype.getBinaryShiftByteCount","getBitCount","State.prototype.getBitCount","latchAndAppend","State.prototype.latchAndAppend","latch","LATCH_TABLE","add","latchModeBitCount","MODE_DIGIT","shiftAndAppend","State.prototype.shiftAndAppend","thisModeBitCount","SHIFT_TABLE","addBinaryShiftChar","State.prototype.addBinaryShiftChar","index","MODE_PUNCT","MODE_UPPER","result","deltaBitCount","endBinaryShift","State.prototype.endBinaryShift","addBinaryShift","isBetterThanOrEqualTo","State.prototype.isBetterThanOrEqualTo","other","newModeBitCount","calculateBinaryShiftCost","toBitArray","State.prototype.toBitArray","text","e_1","_a","symbols","getPrevious","unshift","bitArray","default","symbols_1","symbols_1_1","appendTo","e_1_1","error","return","toString","State.prototype.toString","format","MODE_NAMES","State.calculateBinaryShiftCost","state","INITIAL_STATE","EMPTY_TOKEN"]
}
