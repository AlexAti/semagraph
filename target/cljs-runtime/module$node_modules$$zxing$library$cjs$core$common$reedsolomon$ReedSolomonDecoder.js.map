{
"version":3,
"file":"module$node_modules$$zxing$library$cjs$core$common$reedsolomon$ReedSolomonDecoder.js",
"lineCount":8,
"mappings":"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",
"sources":["node_modules/@zxing/library/cjs/core/common/reedsolomon/ReedSolomonDecoder.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$zxing$library$cjs$core$common$reedsolomon$ReedSolomonDecoder\"] = function(global,require,module,exports) {\n\"use strict\";\n/*\n * Copyright 2007 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/*namespace com.google.zxing.common.reedsolomon {*/\nvar GenericGF_1 = require(\"./GenericGF\");\nvar GenericGFPoly_1 = require(\"./GenericGFPoly\");\nvar ReedSolomonException_1 = require(\"../../ReedSolomonException\");\nvar IllegalStateException_1 = require(\"../../IllegalStateException\");\n/**\n * <p>Implements Reed-Solomon decoding, as the name implies.</p>\n *\n * <p>The algorithm will not be explained here, but the following references were helpful\n * in creating this implementation:</p>\n *\n * <ul>\n * <li>Bruce Maggs.\n * <a href=\"http://www.cs.cmu.edu/afs/cs.cmu.edu/project/pscico-guyb/realworld/www/rs_decode.ps\">\n * \"Decoding Reed-Solomon Codes\"</a> (see discussion of Forney's Formula)</li>\n * <li>J.I. Hall. <a href=\"www.mth.msu.edu/~jhall/classes/codenotes/GRS.pdf\">\n * \"Chapter 5. Generalized Reed-Solomon Codes\"</a>\n * (see discussion of Euclidean algorithm)</li>\n * </ul>\n *\n * <p>Much credit is due to William Rucklidge since portions of this code are an indirect\n * port of his C++ Reed-Solomon implementation.</p>\n *\n * @author Sean Owen\n * @author William Rucklidge\n * @author sanfordsquires\n */\nvar ReedSolomonDecoder = /** @class */ (function () {\n    function ReedSolomonDecoder(field) {\n        this.field = field;\n    }\n    /**\n     * <p>Decodes given set of received codewords, which include both data and error-correction\n     * codewords. Really, this means it uses Reed-Solomon to detect and correct errors, in-place,\n     * in the input.</p>\n     *\n     * @param received data and error-correction codewords\n     * @param twoS number of error-correction codewords available\n     * @throws ReedSolomonException if decoding fails for any reason\n     */\n    ReedSolomonDecoder.prototype.decode = function (received, twoS /*int*/) {\n        var field = this.field;\n        var poly = new GenericGFPoly_1.default(field, received);\n        var syndromeCoefficients = new Int32Array(twoS);\n        var noError = true;\n        for (var i = 0; i < twoS; i++) {\n            var evalResult = poly.evaluateAt(field.exp(i + field.getGeneratorBase()));\n            syndromeCoefficients[syndromeCoefficients.length - 1 - i] = evalResult;\n            if (evalResult !== 0) {\n                noError = false;\n            }\n        }\n        if (noError) {\n            return;\n        }\n        var syndrome = new GenericGFPoly_1.default(field, syndromeCoefficients);\n        var sigmaOmega = this.runEuclideanAlgorithm(field.buildMonomial(twoS, 1), syndrome, twoS);\n        var sigma = sigmaOmega[0];\n        var omega = sigmaOmega[1];\n        var errorLocations = this.findErrorLocations(sigma);\n        var errorMagnitudes = this.findErrorMagnitudes(omega, errorLocations);\n        for (var i = 0; i < errorLocations.length; i++) {\n            var position = received.length - 1 - field.log(errorLocations[i]);\n            if (position < 0) {\n                throw new ReedSolomonException_1.default('Bad error location');\n            }\n            received[position] = GenericGF_1.default.addOrSubtract(received[position], errorMagnitudes[i]);\n        }\n    };\n    ReedSolomonDecoder.prototype.runEuclideanAlgorithm = function (a, b, R /*int*/) {\n        // Assume a's degree is >= b's\n        if (a.getDegree() < b.getDegree()) {\n            var temp = a;\n            a = b;\n            b = temp;\n        }\n        var field = this.field;\n        var rLast = a;\n        var r = b;\n        var tLast = field.getZero();\n        var t = field.getOne();\n        // Run Euclidean algorithm until r's degree is less than R/2\n        while (r.getDegree() >= (R / 2 | 0)) {\n            var rLastLast = rLast;\n            var tLastLast = tLast;\n            rLast = r;\n            tLast = t;\n            // Divide rLastLast by rLast, with quotient in q and remainder in r\n            if (rLast.isZero()) {\n                // Oops, Euclidean algorithm already terminated?\n                throw new ReedSolomonException_1.default('r_{i-1} was zero');\n            }\n            r = rLastLast;\n            var q = field.getZero();\n            var denominatorLeadingTerm = rLast.getCoefficient(rLast.getDegree());\n            var dltInverse = field.inverse(denominatorLeadingTerm);\n            while (r.getDegree() >= rLast.getDegree() && !r.isZero()) {\n                var degreeDiff = r.getDegree() - rLast.getDegree();\n                var scale = field.multiply(r.getCoefficient(r.getDegree()), dltInverse);\n                q = q.addOrSubtract(field.buildMonomial(degreeDiff, scale));\n                r = r.addOrSubtract(rLast.multiplyByMonomial(degreeDiff, scale));\n            }\n            t = q.multiply(tLast).addOrSubtract(tLastLast);\n            if (r.getDegree() >= rLast.getDegree()) {\n                throw new IllegalStateException_1.default('Division algorithm failed to reduce polynomial?');\n            }\n        }\n        var sigmaTildeAtZero = t.getCoefficient(0);\n        if (sigmaTildeAtZero === 0) {\n            throw new ReedSolomonException_1.default('sigmaTilde(0) was zero');\n        }\n        var inverse = field.inverse(sigmaTildeAtZero);\n        var sigma = t.multiplyScalar(inverse);\n        var omega = r.multiplyScalar(inverse);\n        return [sigma, omega];\n    };\n    ReedSolomonDecoder.prototype.findErrorLocations = function (errorLocator) {\n        // This is a direct application of Chien's search\n        var numErrors = errorLocator.getDegree();\n        if (numErrors === 1) { // shortcut\n            return Int32Array.from([errorLocator.getCoefficient(1)]);\n        }\n        var result = new Int32Array(numErrors);\n        var e = 0;\n        var field = this.field;\n        for (var i = 1; i < field.getSize() && e < numErrors; i++) {\n            if (errorLocator.evaluateAt(i) === 0) {\n                result[e] = field.inverse(i);\n                e++;\n            }\n        }\n        if (e !== numErrors) {\n            throw new ReedSolomonException_1.default('Error locator degree does not match number of roots');\n        }\n        return result;\n    };\n    ReedSolomonDecoder.prototype.findErrorMagnitudes = function (errorEvaluator, errorLocations) {\n        // This is directly applying Forney's Formula\n        var s = errorLocations.length;\n        var result = new Int32Array(s);\n        var field = this.field;\n        for (var i = 0; i < s; i++) {\n            var xiInverse = field.inverse(errorLocations[i]);\n            var denominator = 1;\n            for (var j = 0; j < s; j++) {\n                if (i !== j) {\n                    // denominator = field.multiply(denominator,\n                    //    GenericGF.addOrSubtract(1, field.multiply(errorLocations[j], xiInverse)))\n                    // Above should work but fails on some Apple and Linux JDKs due to a Hotspot bug.\n                    // Below is a funny-looking workaround from Steven Parkes\n                    var term = field.multiply(errorLocations[j], xiInverse);\n                    var termPlus1 = (term & 0x1) === 0 ? term | 1 : term & ~1;\n                    denominator = field.multiply(denominator, termPlus1);\n                }\n            }\n            result[i] = field.multiply(errorEvaluator.evaluateAt(xiInverse), field.inverse(denominator));\n            if (field.getGeneratorBase() !== 0) {\n                result[i] = field.multiply(result[i], xiInverse);\n            }\n        }\n        return result;\n    };\n    return ReedSolomonDecoder;\n}());\nexports.default = ReedSolomonDecoder;\n//# sourceMappingURL=ReedSolomonDecoder.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","GenericGF_1","GenericGFPoly_1","ReedSolomonException_1","IllegalStateException_1","ReedSolomonDecoder","field","prototype","decode","ReedSolomonDecoder.prototype.decode","received","twoS","poly","default","syndromeCoefficients","Int32Array","noError","i","evalResult","evaluateAt","exp","getGeneratorBase","length","syndrome","sigmaOmega","runEuclideanAlgorithm","buildMonomial","omega","errorLocations","findErrorLocations","sigma","errorMagnitudes","findErrorMagnitudes","position","log","addOrSubtract","ReedSolomonDecoder.prototype.runEuclideanAlgorithm","a","b","R","getDegree","temp","tLast","getZero","t","getOne","r","rLastLast","rLast","tLastLast","isZero","q","denominatorLeadingTerm","getCoefficient","dltInverse","inverse","degreeDiff","scale","multiply","multiplyByMonomial","sigmaTildeAtZero","multiplyScalar","ReedSolomonDecoder.prototype.findErrorLocations","errorLocator","numErrors","from","result","e","getSize","ReedSolomonDecoder.prototype.findErrorMagnitudes","errorEvaluator","s","xiInverse","denominator","j","term","termPlus1"]
}
