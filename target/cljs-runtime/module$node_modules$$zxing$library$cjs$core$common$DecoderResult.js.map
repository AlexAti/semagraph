{
"version":3,
"file":"module$node_modules$$zxing$library$cjs$core$common$DecoderResult.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/@zxing/library/cjs/core/common/DecoderResult.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$zxing$library$cjs$core$common$DecoderResult\"] = function(global,require,module,exports) {\n\"use strict\";\n/*\n * Copyright 2007 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/*namespace com.google.zxing.common {*/\n/*import java.util.List;*/\n/**\n * <p>Encapsulates the result of decoding a matrix of bits. This typically\n * applies to 2D barcode formats. For now it contains the raw bytes obtained,\n * as well as a String interpretation of those bytes, if applicable.</p>\n *\n * @author Sean Owen\n */\nvar DecoderResult = /** @class */ (function () {\n    // public constructor(rawBytes: Uint8Array,\n    //                      text: string,\n    //                      List<Uint8Array> byteSegments,\n    //                      String ecLevel) {\n    //   this(rawBytes, text, byteSegments, ecLevel, -1, -1)\n    // }\n    function DecoderResult(rawBytes, text, byteSegments, ecLevel, structuredAppendSequenceNumber, structuredAppendParity) {\n        if (structuredAppendSequenceNumber === void 0) { structuredAppendSequenceNumber = -1; }\n        if (structuredAppendParity === void 0) { structuredAppendParity = -1; }\n        this.rawBytes = rawBytes;\n        this.text = text;\n        this.byteSegments = byteSegments;\n        this.ecLevel = ecLevel;\n        this.structuredAppendSequenceNumber = structuredAppendSequenceNumber;\n        this.structuredAppendParity = structuredAppendParity;\n        this.numBits = (rawBytes === undefined || rawBytes === null) ? 0 : 8 * rawBytes.length;\n    }\n    /**\n     * @return raw bytes representing the result, or {@code null} if not applicable\n     */\n    DecoderResult.prototype.getRawBytes = function () {\n        return this.rawBytes;\n    };\n    /**\n     * @return how many bits of {@link #getRawBytes()} are valid; typically 8 times its length\n     * @since 3.3.0\n     */\n    DecoderResult.prototype.getNumBits = function () {\n        return this.numBits;\n    };\n    /**\n     * @param numBits overrides the number of bits that are valid in {@link #getRawBytes()}\n     * @since 3.3.0\n     */\n    DecoderResult.prototype.setNumBits = function (numBits /*int*/) {\n        this.numBits = numBits;\n    };\n    /**\n     * @return text representation of the result\n     */\n    DecoderResult.prototype.getText = function () {\n        return this.text;\n    };\n    /**\n     * @return list of byte segments in the result, or {@code null} if not applicable\n     */\n    DecoderResult.prototype.getByteSegments = function () {\n        return this.byteSegments;\n    };\n    /**\n     * @return name of error correction level used, or {@code null} if not applicable\n     */\n    DecoderResult.prototype.getECLevel = function () {\n        return this.ecLevel;\n    };\n    /**\n     * @return number of errors corrected, or {@code null} if not applicable\n     */\n    DecoderResult.prototype.getErrorsCorrected = function () {\n        return this.errorsCorrected;\n    };\n    DecoderResult.prototype.setErrorsCorrected = function (errorsCorrected /*Integer*/) {\n        this.errorsCorrected = errorsCorrected;\n    };\n    /**\n     * @return number of erasures corrected, or {@code null} if not applicable\n     */\n    DecoderResult.prototype.getErasures = function () {\n        return this.erasures;\n    };\n    DecoderResult.prototype.setErasures = function (erasures /*Integer*/) {\n        this.erasures = erasures;\n    };\n    /**\n     * @return arbitrary additional metadata\n     */\n    DecoderResult.prototype.getOther = function () {\n        return this.other;\n    };\n    DecoderResult.prototype.setOther = function (other) {\n        this.other = other;\n    };\n    DecoderResult.prototype.hasStructuredAppend = function () {\n        return this.structuredAppendParity >= 0 && this.structuredAppendSequenceNumber >= 0;\n    };\n    DecoderResult.prototype.getStructuredAppendParity = function () {\n        return this.structuredAppendParity;\n    };\n    DecoderResult.prototype.getStructuredAppendSequenceNumber = function () {\n        return this.structuredAppendSequenceNumber;\n    };\n    return DecoderResult;\n}());\nexports.default = DecoderResult;\n//# sourceMappingURL=DecoderResult.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","DecoderResult","rawBytes","text","byteSegments","ecLevel","structuredAppendSequenceNumber","structuredAppendParity","numBits","undefined","length","prototype","getRawBytes","DecoderResult.prototype.getRawBytes","getNumBits","DecoderResult.prototype.getNumBits","setNumBits","DecoderResult.prototype.setNumBits","getText","DecoderResult.prototype.getText","getByteSegments","DecoderResult.prototype.getByteSegments","getECLevel","DecoderResult.prototype.getECLevel","getErrorsCorrected","DecoderResult.prototype.getErrorsCorrected","errorsCorrected","setErrorsCorrected","DecoderResult.prototype.setErrorsCorrected","getErasures","DecoderResult.prototype.getErasures","erasures","setErasures","DecoderResult.prototype.setErasures","getOther","DecoderResult.prototype.getOther","other","setOther","DecoderResult.prototype.setOther","hasStructuredAppend","DecoderResult.prototype.hasStructuredAppend","getStructuredAppendParity","DecoderResult.prototype.getStructuredAppendParity","getStructuredAppendSequenceNumber","DecoderResult.prototype.getStructuredAppendSequenceNumber","default"]
}
