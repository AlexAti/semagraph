{
"version":3,
"file":"module$node_modules$$zxing$library$cjs$core$aztec$decoder$Decoder.js",
"lineCount":14,
"mappings":"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",
"sources":["node_modules/@zxing/library/cjs/core/aztec/decoder/Decoder.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$zxing$library$cjs$core$aztec$decoder$Decoder\"] = function(global,require,module,exports) {\n\"use strict\";\n/*\n * Copyright 2010 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar DecoderResult_1 = require(\"../../common/DecoderResult\");\nvar GenericGF_1 = require(\"../../common/reedsolomon/GenericGF\");\nvar ReedSolomonDecoder_1 = require(\"../../common/reedsolomon/ReedSolomonDecoder\");\nvar IllegalStateException_1 = require(\"../../IllegalStateException\");\nvar FormatException_1 = require(\"../../FormatException\");\nvar StringUtils_1 = require(\"../../common/StringUtils\");\nvar Integer_1 = require(\"../../util/Integer\");\n// import java.util.Arrays;\nvar Table;\n(function (Table) {\n    Table[Table[\"UPPER\"] = 0] = \"UPPER\";\n    Table[Table[\"LOWER\"] = 1] = \"LOWER\";\n    Table[Table[\"MIXED\"] = 2] = \"MIXED\";\n    Table[Table[\"DIGIT\"] = 3] = \"DIGIT\";\n    Table[Table[\"PUNCT\"] = 4] = \"PUNCT\";\n    Table[Table[\"BINARY\"] = 5] = \"BINARY\";\n})(Table || (Table = {}));\n/**\n * <p>The main class which implements Aztec Code decoding -- as opposed to locating and extracting\n * the Aztec Code from an image.</p>\n *\n * @author David Olivier\n */\nvar Decoder = /** @class */ (function () {\n    function Decoder() {\n    }\n    Decoder.prototype.decode = function (detectorResult) {\n        this.ddata = detectorResult;\n        var matrix = detectorResult.getBits();\n        var rawbits = this.extractBits(matrix);\n        var correctedBits = this.correctBits(rawbits);\n        var rawBytes = Decoder.convertBoolArrayToByteArray(correctedBits);\n        var result = Decoder.getEncodedData(correctedBits);\n        var decoderResult = new DecoderResult_1.default(rawBytes, result, null, null);\n        decoderResult.setNumBits(correctedBits.length);\n        return decoderResult;\n    };\n    // This method is used for testing the high-level encoder\n    Decoder.highLevelDecode = function (correctedBits) {\n        return this.getEncodedData(correctedBits);\n    };\n    /**\n     * Gets the string encoded in the aztec code bits\n     *\n     * @return the decoded string\n     */\n    Decoder.getEncodedData = function (correctedBits) {\n        var endIndex = correctedBits.length;\n        var latchTable = Table.UPPER; // table most recently latched to\n        var shiftTable = Table.UPPER; // table to use for the next read\n        var result = '';\n        var index = 0;\n        while (index < endIndex) {\n            if (shiftTable === Table.BINARY) {\n                if (endIndex - index < 5) {\n                    break;\n                }\n                var length_1 = Decoder.readCode(correctedBits, index, 5);\n                index += 5;\n                if (length_1 === 0) {\n                    if (endIndex - index < 11) {\n                        break;\n                    }\n                    length_1 = Decoder.readCode(correctedBits, index, 11) + 31;\n                    index += 11;\n                }\n                for (var charCount = 0; charCount < length_1; charCount++) {\n                    if (endIndex - index < 8) {\n                        index = endIndex; // Force outer loop to exit\n                        break;\n                    }\n                    var code = Decoder.readCode(correctedBits, index, 8);\n                    result += /*(char)*/ StringUtils_1.default.castAsNonUtf8Char(code);\n                    index += 8;\n                }\n                // Go back to whatever mode we had been in\n                shiftTable = latchTable;\n            }\n            else {\n                var size = shiftTable === Table.DIGIT ? 4 : 5;\n                if (endIndex - index < size) {\n                    break;\n                }\n                var code = Decoder.readCode(correctedBits, index, size);\n                index += size;\n                var str = Decoder.getCharacter(shiftTable, code);\n                if (str.startsWith('CTRL_')) {\n                    // Table changes\n                    // ISO/IEC 24778:2008 prescribes ending a shift sequence in the mode from which it was invoked.\n                    // That's including when that mode is a shift.\n                    // Our test case dlusbs.png for issue #642 exercises that.\n                    latchTable = shiftTable; // Latch the current mode, so as to return to Upper after U/S B/S\n                    shiftTable = Decoder.getTable(str.charAt(5));\n                    if (str.charAt(6) === 'L') {\n                        latchTable = shiftTable;\n                    }\n                }\n                else {\n                    result += str;\n                    // Go back to whatever mode we had been in\n                    shiftTable = latchTable;\n                }\n            }\n        }\n        return result;\n    };\n    /**\n     * gets the table corresponding to the char passed\n     */\n    Decoder.getTable = function (t) {\n        switch (t) {\n            case 'L':\n                return Table.LOWER;\n            case 'P':\n                return Table.PUNCT;\n            case 'M':\n                return Table.MIXED;\n            case 'D':\n                return Table.DIGIT;\n            case 'B':\n                return Table.BINARY;\n            case 'U':\n            default:\n                return Table.UPPER;\n        }\n    };\n    /**\n     * Gets the character (or string) corresponding to the passed code in the given table\n     *\n     * @param table the table used\n     * @param code the code of the character\n     */\n    Decoder.getCharacter = function (table, code) {\n        switch (table) {\n            case Table.UPPER:\n                return Decoder.UPPER_TABLE[code];\n            case Table.LOWER:\n                return Decoder.LOWER_TABLE[code];\n            case Table.MIXED:\n                return Decoder.MIXED_TABLE[code];\n            case Table.PUNCT:\n                return Decoder.PUNCT_TABLE[code];\n            case Table.DIGIT:\n                return Decoder.DIGIT_TABLE[code];\n            default:\n                // Should not reach here.\n                throw new IllegalStateException_1.default('Bad table');\n        }\n    };\n    /**\n     * <p>Performs RS error correction on an array of bits.</p>\n     *\n     * @return the corrected array\n     * @throws FormatException if the input contains too many errors\n     */\n    Decoder.prototype.correctBits = function (rawbits) {\n        var gf;\n        var codewordSize;\n        if (this.ddata.getNbLayers() <= 2) {\n            codewordSize = 6;\n            gf = GenericGF_1.default.AZTEC_DATA_6;\n        }\n        else if (this.ddata.getNbLayers() <= 8) {\n            codewordSize = 8;\n            gf = GenericGF_1.default.AZTEC_DATA_8;\n        }\n        else if (this.ddata.getNbLayers() <= 22) {\n            codewordSize = 10;\n            gf = GenericGF_1.default.AZTEC_DATA_10;\n        }\n        else {\n            codewordSize = 12;\n            gf = GenericGF_1.default.AZTEC_DATA_12;\n        }\n        var numDataCodewords = this.ddata.getNbDatablocks();\n        var numCodewords = rawbits.length / codewordSize;\n        if (numCodewords < numDataCodewords) {\n            throw new FormatException_1.default();\n        }\n        var offset = rawbits.length % codewordSize;\n        var dataWords = new Int32Array(numCodewords);\n        for (var i = 0; i < numCodewords; i++, offset += codewordSize) {\n            dataWords[i] = Decoder.readCode(rawbits, offset, codewordSize);\n        }\n        try {\n            var rsDecoder = new ReedSolomonDecoder_1.default(gf);\n            rsDecoder.decode(dataWords, numCodewords - numDataCodewords);\n        }\n        catch (ex) {\n            throw new FormatException_1.default(ex);\n        }\n        // Now perform the unstuffing operation.\n        // First, count how many bits are going to be thrown out as stuffing\n        var mask = (1 << codewordSize) - 1;\n        var stuffedBits = 0;\n        for (var i = 0; i < numDataCodewords; i++) {\n            var dataWord = dataWords[i];\n            if (dataWord === 0 || dataWord === mask) {\n                throw new FormatException_1.default();\n            }\n            else if (dataWord === 1 || dataWord === mask - 1) {\n                stuffedBits++;\n            }\n        }\n        // Now, actually unpack the bits and remove the stuffing\n        var correctedBits = new Array(numDataCodewords * codewordSize - stuffedBits);\n        var index = 0;\n        for (var i = 0; i < numDataCodewords; i++) {\n            var dataWord = dataWords[i];\n            if (dataWord === 1 || dataWord === mask - 1) {\n                // next codewordSize-1 bits are all zeros or all ones\n                correctedBits.fill(dataWord > 1, index, index + codewordSize - 1);\n                // Arrays.fill(correctedBits, index, index + codewordSize - 1, dataWord > 1);\n                index += codewordSize - 1;\n            }\n            else {\n                for (var bit = codewordSize - 1; bit >= 0; --bit) {\n                    correctedBits[index++] = (dataWord & (1 << bit)) !== 0;\n                }\n            }\n        }\n        return correctedBits;\n    };\n    /**\n     * Gets the array of bits from an Aztec Code matrix\n     *\n     * @return the array of bits\n     */\n    Decoder.prototype.extractBits = function (matrix) {\n        var compact = this.ddata.isCompact();\n        var layers = this.ddata.getNbLayers();\n        var baseMatrixSize = (compact ? 11 : 14) + layers * 4; // not including alignment lines\n        var alignmentMap = new Int32Array(baseMatrixSize);\n        var rawbits = new Array(this.totalBitsInLayer(layers, compact));\n        if (compact) {\n            for (var i = 0; i < alignmentMap.length; i++) {\n                alignmentMap[i] = i;\n            }\n        }\n        else {\n            var matrixSize = baseMatrixSize + 1 + 2 * Integer_1.default.truncDivision((Integer_1.default.truncDivision(baseMatrixSize, 2) - 1), 15);\n            var origCenter = baseMatrixSize / 2;\n            var center = Integer_1.default.truncDivision(matrixSize, 2);\n            for (var i = 0; i < origCenter; i++) {\n                var newOffset = i + Integer_1.default.truncDivision(i, 15);\n                alignmentMap[origCenter - i - 1] = center - newOffset - 1;\n                alignmentMap[origCenter + i] = center + newOffset + 1;\n            }\n        }\n        for (var i = 0, rowOffset = 0; i < layers; i++) {\n            var rowSize = (layers - i) * 4 + (compact ? 9 : 12);\n            // The top-left most point of this layer is <low, low> (not including alignment lines)\n            var low = i * 2;\n            // The bottom-right most point of this layer is <high, high> (not including alignment lines)\n            var high = baseMatrixSize - 1 - low;\n            // We pull bits from the two 2 x rowSize columns and two rowSize x 2 rows\n            for (var j = 0; j < rowSize; j++) {\n                var columnOffset = j * 2;\n                for (var k = 0; k < 2; k++) {\n                    // left column\n                    rawbits[rowOffset + columnOffset + k] =\n                        matrix.get(alignmentMap[low + k], alignmentMap[low + j]);\n                    // bottom row\n                    rawbits[rowOffset + 2 * rowSize + columnOffset + k] =\n                        matrix.get(alignmentMap[low + j], alignmentMap[high - k]);\n                    // right column\n                    rawbits[rowOffset + 4 * rowSize + columnOffset + k] =\n                        matrix.get(alignmentMap[high - k], alignmentMap[high - j]);\n                    // top row\n                    rawbits[rowOffset + 6 * rowSize + columnOffset + k] =\n                        matrix.get(alignmentMap[high - j], alignmentMap[low + k]);\n                }\n            }\n            rowOffset += rowSize * 8;\n        }\n        return rawbits;\n    };\n    /**\n     * Reads a code of given length and at given index in an array of bits\n     */\n    Decoder.readCode = function (rawbits, startIndex, length) {\n        var res = 0;\n        for (var i = startIndex; i < startIndex + length; i++) {\n            res <<= 1;\n            if (rawbits[i]) {\n                res |= 0x01;\n            }\n        }\n        return res;\n    };\n    /**\n     * Reads a code of length 8 in an array of bits, padding with zeros\n     */\n    Decoder.readByte = function (rawbits, startIndex) {\n        var n = rawbits.length - startIndex;\n        if (n >= 8) {\n            return Decoder.readCode(rawbits, startIndex, 8);\n        }\n        return Decoder.readCode(rawbits, startIndex, n) << (8 - n);\n    };\n    /**\n     * Packs a bit array into bytes, most significant bit first\n     */\n    Decoder.convertBoolArrayToByteArray = function (boolArr) {\n        var byteArr = new Uint8Array((boolArr.length + 7) / 8);\n        for (var i = 0; i < byteArr.length; i++) {\n            byteArr[i] = Decoder.readByte(boolArr, 8 * i);\n        }\n        return byteArr;\n    };\n    Decoder.prototype.totalBitsInLayer = function (layers, compact) {\n        return ((compact ? 88 : 112) + 16 * layers) * layers;\n    };\n    Decoder.UPPER_TABLE = [\n        'CTRL_PS', ' ', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',\n        'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'CTRL_LL', 'CTRL_ML', 'CTRL_DL', 'CTRL_BS'\n    ];\n    Decoder.LOWER_TABLE = [\n        'CTRL_PS', ' ', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p',\n        'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'CTRL_US', 'CTRL_ML', 'CTRL_DL', 'CTRL_BS'\n    ];\n    Decoder.MIXED_TABLE = [\n        // Module parse failed: Octal literal in strict mode (50:29)\n        // so number string were scaped\n        'CTRL_PS', ' ', '\\\\1', '\\\\2', '\\\\3', '\\\\4', '\\\\5', '\\\\6', '\\\\7', '\\b', '\\t', '\\n',\n        '\\\\13', '\\f', '\\r', '\\\\33', '\\\\34', '\\\\35', '\\\\36', '\\\\37', '@', '\\\\', '^', '_',\n        '`', '|', '~', '\\\\177', 'CTRL_LL', 'CTRL_UL', 'CTRL_PL', 'CTRL_BS'\n    ];\n    Decoder.PUNCT_TABLE = [\n        '', '\\r', '\\r\\n', '. ', ', ', ': ', '!', '\"', '#', '$', '%', '&', '\\'', '(', ')',\n        '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '[', ']', '{', '}', 'CTRL_UL'\n    ];\n    Decoder.DIGIT_TABLE = [\n        'CTRL_PS', ' ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ',', '.', 'CTRL_UL', 'CTRL_US'\n    ];\n    return Decoder;\n}());\nexports.default = Decoder;\n//# sourceMappingURL=Decoder.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","DecoderResult_1","GenericGF_1","ReedSolomonDecoder_1","IllegalStateException_1","FormatException_1","StringUtils_1","Integer_1","Table","Decoder","prototype","decode","Decoder.prototype.decode","detectorResult","ddata","matrix","getBits","rawbits","extractBits","correctedBits","correctBits","rawBytes","convertBoolArrayToByteArray","result","getEncodedData","decoderResult","default","setNumBits","length","highLevelDecode","Decoder.highLevelDecode","Decoder.getEncodedData","endIndex","latchTable","UPPER","shiftTable","index","BINARY","length_1","readCode","charCount","code","castAsNonUtf8Char","size","DIGIT","str","getCharacter","startsWith","getTable","charAt","Decoder.getTable","t","LOWER","PUNCT","MIXED","Decoder.getCharacter","table","UPPER_TABLE","LOWER_TABLE","MIXED_TABLE","PUNCT_TABLE","DIGIT_TABLE","Decoder.prototype.correctBits","getNbLayers","codewordSize","gf","AZTEC_DATA_6","AZTEC_DATA_8","AZTEC_DATA_10","AZTEC_DATA_12","numDataCodewords","getNbDatablocks","numCodewords","offset","dataWords","Int32Array","i","rsDecoder","ex","mask","stuffedBits","dataWord","Array","fill","bit","Decoder.prototype.extractBits","compact","isCompact","layers","baseMatrixSize","alignmentMap","totalBitsInLayer","matrixSize","truncDivision","origCenter","center","newOffset","rowOffset","rowSize","low","high","j","columnOffset","k","get","Decoder.readCode","startIndex","res","readByte","Decoder.readByte","n","Decoder.convertBoolArrayToByteArray","boolArr","byteArr","Uint8Array","Decoder.prototype.totalBitsInLayer"]
}
