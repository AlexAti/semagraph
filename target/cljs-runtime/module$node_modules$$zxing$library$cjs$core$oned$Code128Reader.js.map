{
"version":3,
"file":"module$node_modules$$zxing$library$cjs$core$oned$Code128Reader.js",
"lineCount":23,
"mappings":"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",
"sources":["node_modules/@zxing/library/cjs/core/oned/Code128Reader.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$zxing$library$cjs$core$oned$Code128Reader\"] = function(global,require,module,exports) {\n\"use strict\";\n/*\n * Copyright 2008 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/*namespace com.google.zxing.oned {*/\nvar BarcodeFormat_1 = require(\"../BarcodeFormat\");\nvar ChecksumException_1 = require(\"../ChecksumException\");\nvar DecodeHintType_1 = require(\"../DecodeHintType\");\nvar FormatException_1 = require(\"../FormatException\");\nvar NotFoundException_1 = require(\"../NotFoundException\");\n// import Reader from '../Reader';\nvar Result_1 = require(\"../Result\");\n// import ResultMetadataType from '../ResultMetadataType';\nvar ResultPoint_1 = require(\"../ResultPoint\");\nvar OneDReader_1 = require(\"./OneDReader\");\n/**\n * <p>Decodes Code 128 barcodes.</p>\n *\n * @author Sean Owen\n */\nvar Code128Reader = /** @class */ (function (_super) {\n    __extends(Code128Reader, _super);\n    function Code128Reader() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Code128Reader.findStartPattern = function (row) {\n        var width = row.getSize();\n        var rowOffset = row.getNextSet(0);\n        var counterPosition = 0;\n        var counters = Int32Array.from([0, 0, 0, 0, 0, 0]);\n        var patternStart = rowOffset;\n        var isWhite = false;\n        var patternLength = 6;\n        for (var i = rowOffset; i < width; i++) {\n            if (row.get(i) !== isWhite) {\n                counters[counterPosition]++;\n            }\n            else {\n                if (counterPosition === (patternLength - 1)) {\n                    var bestVariance = Code128Reader.MAX_AVG_VARIANCE;\n                    var bestMatch = -1;\n                    for (var startCode = Code128Reader.CODE_START_A; startCode <= Code128Reader.CODE_START_C; startCode++) {\n                        var variance = OneDReader_1.default.patternMatchVariance(counters, Code128Reader.CODE_PATTERNS[startCode], Code128Reader.MAX_INDIVIDUAL_VARIANCE);\n                        if (variance < bestVariance) {\n                            bestVariance = variance;\n                            bestMatch = startCode;\n                        }\n                    }\n                    // Look for whitespace before start pattern, >= 50% of width of start pattern\n                    if (bestMatch >= 0 &&\n                        row.isRange(Math.max(0, patternStart - (i - patternStart) / 2), patternStart, false)) {\n                        return Int32Array.from([patternStart, i, bestMatch]);\n                    }\n                    patternStart += counters[0] + counters[1];\n                    counters = counters.slice(2, counters.length - 1);\n                    counters[counterPosition - 1] = 0;\n                    counters[counterPosition] = 0;\n                    counterPosition--;\n                }\n                else {\n                    counterPosition++;\n                }\n                counters[counterPosition] = 1;\n                isWhite = !isWhite;\n            }\n        }\n        throw new NotFoundException_1.default();\n    };\n    Code128Reader.decodeCode = function (row, counters, rowOffset) {\n        OneDReader_1.default.recordPattern(row, rowOffset, counters);\n        var bestVariance = Code128Reader.MAX_AVG_VARIANCE; // worst variance we'll accept\n        var bestMatch = -1;\n        for (var d = 0; d < Code128Reader.CODE_PATTERNS.length; d++) {\n            var pattern = Code128Reader.CODE_PATTERNS[d];\n            var variance = this.patternMatchVariance(counters, pattern, Code128Reader.MAX_INDIVIDUAL_VARIANCE);\n            if (variance < bestVariance) {\n                bestVariance = variance;\n                bestMatch = d;\n            }\n        }\n        // TODO We're overlooking the fact that the STOP pattern has 7 values, not 6.\n        if (bestMatch >= 0) {\n            return bestMatch;\n        }\n        else {\n            throw new NotFoundException_1.default();\n        }\n    };\n    Code128Reader.prototype.decodeRow = function (rowNumber, row, hints) {\n        var convertFNC1 = hints && (hints.get(DecodeHintType_1.default.ASSUME_GS1) === true);\n        var startPatternInfo = Code128Reader.findStartPattern(row);\n        var startCode = startPatternInfo[2];\n        var currentRawCodesIndex = 0;\n        var rawCodes = new Uint8Array(20);\n        rawCodes[currentRawCodesIndex++] = startCode;\n        var codeSet;\n        switch (startCode) {\n            case Code128Reader.CODE_START_A:\n                codeSet = Code128Reader.CODE_CODE_A;\n                break;\n            case Code128Reader.CODE_START_B:\n                codeSet = Code128Reader.CODE_CODE_B;\n                break;\n            case Code128Reader.CODE_START_C:\n                codeSet = Code128Reader.CODE_CODE_C;\n                break;\n            default:\n                throw new FormatException_1.default();\n        }\n        var done = false;\n        var isNextShifted = false;\n        var result = '';\n        var lastStart = startPatternInfo[0];\n        var nextStart = startPatternInfo[1];\n        var counters = Int32Array.from([0, 0, 0, 0, 0, 0]);\n        var lastCode = 0;\n        var code = 0;\n        var checksumTotal = startCode;\n        var multiplier = 0;\n        var lastCharacterWasPrintable = true;\n        var upperMode = false;\n        var shiftUpperMode = false;\n        while (!done) {\n            var unshift = isNextShifted;\n            isNextShifted = false;\n            // Save off last code\n            lastCode = code;\n            // Decode another code from image\n            code = Code128Reader.decodeCode(row, counters, nextStart);\n            rawCodes[currentRawCodesIndex++] = code;\n            // Remember whether the last code was printable or not (excluding CODE_STOP)\n            if (code !== Code128Reader.CODE_STOP) {\n                lastCharacterWasPrintable = true;\n            }\n            // Add to checksum computation (if not CODE_STOP of course)\n            if (code !== Code128Reader.CODE_STOP) {\n                multiplier++;\n                checksumTotal += multiplier * code;\n            }\n            // Advance to where the next code will to start\n            lastStart = nextStart;\n            nextStart += counters.reduce(function (previous, current) { return previous + current; }, 0);\n            // Take care of illegal start codes\n            switch (code) {\n                case Code128Reader.CODE_START_A:\n                case Code128Reader.CODE_START_B:\n                case Code128Reader.CODE_START_C:\n                    throw new FormatException_1.default();\n            }\n            switch (codeSet) {\n                case Code128Reader.CODE_CODE_A:\n                    if (code < 64) {\n                        if (shiftUpperMode === upperMode) {\n                            result += String.fromCharCode((' '.charCodeAt(0) + code));\n                        }\n                        else {\n                            result += String.fromCharCode((' '.charCodeAt(0) + code + 128));\n                        }\n                        shiftUpperMode = false;\n                    }\n                    else if (code < 96) {\n                        if (shiftUpperMode === upperMode) {\n                            result += String.fromCharCode((code - 64));\n                        }\n                        else {\n                            result += String.fromCharCode((code + 64));\n                        }\n                        shiftUpperMode = false;\n                    }\n                    else {\n                        // Don't let CODE_STOP, which always appears, affect whether whether we think the last\n                        // code was printable or not.\n                        if (code !== Code128Reader.CODE_STOP) {\n                            lastCharacterWasPrintable = false;\n                        }\n                        switch (code) {\n                            case Code128Reader.CODE_FNC_1:\n                                if (convertFNC1) {\n                                    if (result.length === 0) {\n                                        // GS1 specification 5.4.3.7. and 5.4.6.4. If the first char after the start code\n                                        // is FNC1 then this is GS1-128. We add the symbology identifier.\n                                        result += ']C1';\n                                    }\n                                    else {\n                                        // GS1 specification 5.4.7.5. Every subsequent FNC1 is returned as ASCII 29 (GS)\n                                        result += String.fromCharCode(29);\n                                    }\n                                }\n                                break;\n                            case Code128Reader.CODE_FNC_2:\n                            case Code128Reader.CODE_FNC_3:\n                                // do nothing?\n                                break;\n                            case Code128Reader.CODE_FNC_4_A:\n                                if (!upperMode && shiftUpperMode) {\n                                    upperMode = true;\n                                    shiftUpperMode = false;\n                                }\n                                else if (upperMode && shiftUpperMode) {\n                                    upperMode = false;\n                                    shiftUpperMode = false;\n                                }\n                                else {\n                                    shiftUpperMode = true;\n                                }\n                                break;\n                            case Code128Reader.CODE_SHIFT:\n                                isNextShifted = true;\n                                codeSet = Code128Reader.CODE_CODE_B;\n                                break;\n                            case Code128Reader.CODE_CODE_B:\n                                codeSet = Code128Reader.CODE_CODE_B;\n                                break;\n                            case Code128Reader.CODE_CODE_C:\n                                codeSet = Code128Reader.CODE_CODE_C;\n                                break;\n                            case Code128Reader.CODE_STOP:\n                                done = true;\n                                break;\n                        }\n                    }\n                    break;\n                case Code128Reader.CODE_CODE_B:\n                    if (code < 96) {\n                        if (shiftUpperMode === upperMode) {\n                            result += String.fromCharCode((' '.charCodeAt(0) + code));\n                        }\n                        else {\n                            result += String.fromCharCode((' '.charCodeAt(0) + code + 128));\n                        }\n                        shiftUpperMode = false;\n                    }\n                    else {\n                        if (code !== Code128Reader.CODE_STOP) {\n                            lastCharacterWasPrintable = false;\n                        }\n                        switch (code) {\n                            case Code128Reader.CODE_FNC_1:\n                                if (convertFNC1) {\n                                    if (result.length === 0) {\n                                        // GS1 specification 5.4.3.7. and 5.4.6.4. If the first char after the start code\n                                        // is FNC1 then this is GS1-128. We add the symbology identifier.\n                                        result += ']C1';\n                                    }\n                                    else {\n                                        // GS1 specification 5.4.7.5. Every subsequent FNC1 is returned as ASCII 29 (GS)\n                                        result += String.fromCharCode(29);\n                                    }\n                                }\n                                break;\n                            case Code128Reader.CODE_FNC_2:\n                            case Code128Reader.CODE_FNC_3:\n                                // do nothing?\n                                break;\n                            case Code128Reader.CODE_FNC_4_B:\n                                if (!upperMode && shiftUpperMode) {\n                                    upperMode = true;\n                                    shiftUpperMode = false;\n                                }\n                                else if (upperMode && shiftUpperMode) {\n                                    upperMode = false;\n                                    shiftUpperMode = false;\n                                }\n                                else {\n                                    shiftUpperMode = true;\n                                }\n                                break;\n                            case Code128Reader.CODE_SHIFT:\n                                isNextShifted = true;\n                                codeSet = Code128Reader.CODE_CODE_A;\n                                break;\n                            case Code128Reader.CODE_CODE_A:\n                                codeSet = Code128Reader.CODE_CODE_A;\n                                break;\n                            case Code128Reader.CODE_CODE_C:\n                                codeSet = Code128Reader.CODE_CODE_C;\n                                break;\n                            case Code128Reader.CODE_STOP:\n                                done = true;\n                                break;\n                        }\n                    }\n                    break;\n                case Code128Reader.CODE_CODE_C:\n                    if (code < 100) {\n                        if (code < 10) {\n                            result += '0';\n                        }\n                        result += code;\n                    }\n                    else {\n                        if (code !== Code128Reader.CODE_STOP) {\n                            lastCharacterWasPrintable = false;\n                        }\n                        switch (code) {\n                            case Code128Reader.CODE_FNC_1:\n                                if (convertFNC1) {\n                                    if (result.length === 0) {\n                                        // GS1 specification 5.4.3.7. and 5.4.6.4. If the first char after the start code\n                                        // is FNC1 then this is GS1-128. We add the symbology identifier.\n                                        result += ']C1';\n                                    }\n                                    else {\n                                        // GS1 specification 5.4.7.5. Every subsequent FNC1 is returned as ASCII 29 (GS)\n                                        result += String.fromCharCode(29);\n                                    }\n                                }\n                                break;\n                            case Code128Reader.CODE_CODE_A:\n                                codeSet = Code128Reader.CODE_CODE_A;\n                                break;\n                            case Code128Reader.CODE_CODE_B:\n                                codeSet = Code128Reader.CODE_CODE_B;\n                                break;\n                            case Code128Reader.CODE_STOP:\n                                done = true;\n                                break;\n                        }\n                    }\n                    break;\n            }\n            // Unshift back to another code set if we were shifted\n            if (unshift) {\n                codeSet = codeSet === Code128Reader.CODE_CODE_A ? Code128Reader.CODE_CODE_B : Code128Reader.CODE_CODE_A;\n            }\n        }\n        var lastPatternSize = nextStart - lastStart;\n        // Check for ample whitespace following pattern, but, to do this we first need to remember that\n        // we fudged decoding CODE_STOP since it actually has 7 bars, not 6. There is a black bar left\n        // to read off. Would be slightly better to properly read. Here we just skip it:\n        nextStart = row.getNextUnset(nextStart);\n        if (!row.isRange(nextStart, Math.min(row.getSize(), nextStart + (nextStart - lastStart) / 2), false)) {\n            throw new NotFoundException_1.default();\n        }\n        // Pull out from sum the value of the penultimate check code\n        checksumTotal -= multiplier * lastCode;\n        // lastCode is the checksum then:\n        if (checksumTotal % 103 !== lastCode) {\n            throw new ChecksumException_1.default();\n        }\n        // Need to pull out the check digits from string\n        var resultLength = result.length;\n        if (resultLength === 0) {\n            // false positive\n            throw new NotFoundException_1.default();\n        }\n        // Only bother if the result had at least one character, and if the checksum digit happened to\n        // be a printable character. If it was just interpreted as a control code, nothing to remove.\n        if (resultLength > 0 && lastCharacterWasPrintable) {\n            if (codeSet === Code128Reader.CODE_CODE_C) {\n                result = result.substring(0, resultLength - 2);\n            }\n            else {\n                result = result.substring(0, resultLength - 1);\n            }\n        }\n        var left = (startPatternInfo[1] + startPatternInfo[0]) / 2.0;\n        var right = lastStart + lastPatternSize / 2.0;\n        var rawCodesSize = rawCodes.length;\n        var rawBytes = new Uint8Array(rawCodesSize);\n        for (var i = 0; i < rawCodesSize; i++) {\n            rawBytes[i] = rawCodes[i];\n        }\n        var points = [new ResultPoint_1.default(left, rowNumber), new ResultPoint_1.default(right, rowNumber)];\n        return new Result_1.default(result, rawBytes, 0, points, BarcodeFormat_1.default.CODE_128, new Date().getTime());\n    };\n    Code128Reader.CODE_PATTERNS = [\n        Int32Array.from([2, 1, 2, 2, 2, 2]),\n        Int32Array.from([2, 2, 2, 1, 2, 2]),\n        Int32Array.from([2, 2, 2, 2, 2, 1]),\n        Int32Array.from([1, 2, 1, 2, 2, 3]),\n        Int32Array.from([1, 2, 1, 3, 2, 2]),\n        Int32Array.from([1, 3, 1, 2, 2, 2]),\n        Int32Array.from([1, 2, 2, 2, 1, 3]),\n        Int32Array.from([1, 2, 2, 3, 1, 2]),\n        Int32Array.from([1, 3, 2, 2, 1, 2]),\n        Int32Array.from([2, 2, 1, 2, 1, 3]),\n        Int32Array.from([2, 2, 1, 3, 1, 2]),\n        Int32Array.from([2, 3, 1, 2, 1, 2]),\n        Int32Array.from([1, 1, 2, 2, 3, 2]),\n        Int32Array.from([1, 2, 2, 1, 3, 2]),\n        Int32Array.from([1, 2, 2, 2, 3, 1]),\n        Int32Array.from([1, 1, 3, 2, 2, 2]),\n        Int32Array.from([1, 2, 3, 1, 2, 2]),\n        Int32Array.from([1, 2, 3, 2, 2, 1]),\n        Int32Array.from([2, 2, 3, 2, 1, 1]),\n        Int32Array.from([2, 2, 1, 1, 3, 2]),\n        Int32Array.from([2, 2, 1, 2, 3, 1]),\n        Int32Array.from([2, 1, 3, 2, 1, 2]),\n        Int32Array.from([2, 2, 3, 1, 1, 2]),\n        Int32Array.from([3, 1, 2, 1, 3, 1]),\n        Int32Array.from([3, 1, 1, 2, 2, 2]),\n        Int32Array.from([3, 2, 1, 1, 2, 2]),\n        Int32Array.from([3, 2, 1, 2, 2, 1]),\n        Int32Array.from([3, 1, 2, 2, 1, 2]),\n        Int32Array.from([3, 2, 2, 1, 1, 2]),\n        Int32Array.from([3, 2, 2, 2, 1, 1]),\n        Int32Array.from([2, 1, 2, 1, 2, 3]),\n        Int32Array.from([2, 1, 2, 3, 2, 1]),\n        Int32Array.from([2, 3, 2, 1, 2, 1]),\n        Int32Array.from([1, 1, 1, 3, 2, 3]),\n        Int32Array.from([1, 3, 1, 1, 2, 3]),\n        Int32Array.from([1, 3, 1, 3, 2, 1]),\n        Int32Array.from([1, 1, 2, 3, 1, 3]),\n        Int32Array.from([1, 3, 2, 1, 1, 3]),\n        Int32Array.from([1, 3, 2, 3, 1, 1]),\n        Int32Array.from([2, 1, 1, 3, 1, 3]),\n        Int32Array.from([2, 3, 1, 1, 1, 3]),\n        Int32Array.from([2, 3, 1, 3, 1, 1]),\n        Int32Array.from([1, 1, 2, 1, 3, 3]),\n        Int32Array.from([1, 1, 2, 3, 3, 1]),\n        Int32Array.from([1, 3, 2, 1, 3, 1]),\n        Int32Array.from([1, 1, 3, 1, 2, 3]),\n        Int32Array.from([1, 1, 3, 3, 2, 1]),\n        Int32Array.from([1, 3, 3, 1, 2, 1]),\n        Int32Array.from([3, 1, 3, 1, 2, 1]),\n        Int32Array.from([2, 1, 1, 3, 3, 1]),\n        Int32Array.from([2, 3, 1, 1, 3, 1]),\n        Int32Array.from([2, 1, 3, 1, 1, 3]),\n        Int32Array.from([2, 1, 3, 3, 1, 1]),\n        Int32Array.from([2, 1, 3, 1, 3, 1]),\n        Int32Array.from([3, 1, 1, 1, 2, 3]),\n        Int32Array.from([3, 1, 1, 3, 2, 1]),\n        Int32Array.from([3, 3, 1, 1, 2, 1]),\n        Int32Array.from([3, 1, 2, 1, 1, 3]),\n        Int32Array.from([3, 1, 2, 3, 1, 1]),\n        Int32Array.from([3, 3, 2, 1, 1, 1]),\n        Int32Array.from([3, 1, 4, 1, 1, 1]),\n        Int32Array.from([2, 2, 1, 4, 1, 1]),\n        Int32Array.from([4, 3, 1, 1, 1, 1]),\n        Int32Array.from([1, 1, 1, 2, 2, 4]),\n        Int32Array.from([1, 1, 1, 4, 2, 2]),\n        Int32Array.from([1, 2, 1, 1, 2, 4]),\n        Int32Array.from([1, 2, 1, 4, 2, 1]),\n        Int32Array.from([1, 4, 1, 1, 2, 2]),\n        Int32Array.from([1, 4, 1, 2, 2, 1]),\n        Int32Array.from([1, 1, 2, 2, 1, 4]),\n        Int32Array.from([1, 1, 2, 4, 1, 2]),\n        Int32Array.from([1, 2, 2, 1, 1, 4]),\n        Int32Array.from([1, 2, 2, 4, 1, 1]),\n        Int32Array.from([1, 4, 2, 1, 1, 2]),\n        Int32Array.from([1, 4, 2, 2, 1, 1]),\n        Int32Array.from([2, 4, 1, 2, 1, 1]),\n        Int32Array.from([2, 2, 1, 1, 1, 4]),\n        Int32Array.from([4, 1, 3, 1, 1, 1]),\n        Int32Array.from([2, 4, 1, 1, 1, 2]),\n        Int32Array.from([1, 3, 4, 1, 1, 1]),\n        Int32Array.from([1, 1, 1, 2, 4, 2]),\n        Int32Array.from([1, 2, 1, 1, 4, 2]),\n        Int32Array.from([1, 2, 1, 2, 4, 1]),\n        Int32Array.from([1, 1, 4, 2, 1, 2]),\n        Int32Array.from([1, 2, 4, 1, 1, 2]),\n        Int32Array.from([1, 2, 4, 2, 1, 1]),\n        Int32Array.from([4, 1, 1, 2, 1, 2]),\n        Int32Array.from([4, 2, 1, 1, 1, 2]),\n        Int32Array.from([4, 2, 1, 2, 1, 1]),\n        Int32Array.from([2, 1, 2, 1, 4, 1]),\n        Int32Array.from([2, 1, 4, 1, 2, 1]),\n        Int32Array.from([4, 1, 2, 1, 2, 1]),\n        Int32Array.from([1, 1, 1, 1, 4, 3]),\n        Int32Array.from([1, 1, 1, 3, 4, 1]),\n        Int32Array.from([1, 3, 1, 1, 4, 1]),\n        Int32Array.from([1, 1, 4, 1, 1, 3]),\n        Int32Array.from([1, 1, 4, 3, 1, 1]),\n        Int32Array.from([4, 1, 1, 1, 1, 3]),\n        Int32Array.from([4, 1, 1, 3, 1, 1]),\n        Int32Array.from([1, 1, 3, 1, 4, 1]),\n        Int32Array.from([1, 1, 4, 1, 3, 1]),\n        Int32Array.from([3, 1, 1, 1, 4, 1]),\n        Int32Array.from([4, 1, 1, 1, 3, 1]),\n        Int32Array.from([2, 1, 1, 4, 1, 2]),\n        Int32Array.from([2, 1, 1, 2, 1, 4]),\n        Int32Array.from([2, 1, 1, 2, 3, 2]),\n        Int32Array.from([2, 3, 3, 1, 1, 1, 2]),\n    ];\n    Code128Reader.MAX_AVG_VARIANCE = 0.25;\n    Code128Reader.MAX_INDIVIDUAL_VARIANCE = 0.7;\n    Code128Reader.CODE_SHIFT = 98;\n    Code128Reader.CODE_CODE_C = 99;\n    Code128Reader.CODE_CODE_B = 100;\n    Code128Reader.CODE_CODE_A = 101;\n    Code128Reader.CODE_FNC_1 = 102;\n    Code128Reader.CODE_FNC_2 = 97;\n    Code128Reader.CODE_FNC_3 = 96;\n    Code128Reader.CODE_FNC_4_A = 101;\n    Code128Reader.CODE_FNC_4_B = 100;\n    Code128Reader.CODE_START_A = 103;\n    Code128Reader.CODE_START_B = 104;\n    Code128Reader.CODE_START_C = 105;\n    Code128Reader.CODE_STOP = 106;\n    return Code128Reader;\n}(OneDReader_1.default));\nexports.default = Code128Reader;\n//# sourceMappingURL=Code128Reader.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","defineProperty","value","BarcodeFormat_1","ChecksumException_1","DecodeHintType_1","FormatException_1","NotFoundException_1","Result_1","ResultPoint_1","OneDReader_1","Code128Reader","_super","apply","arguments","findStartPattern","Code128Reader.findStartPattern","row","width","getSize","rowOffset","getNextSet","counterPosition","counters","Int32Array","from","patternStart","isWhite","i","get","bestVariance","MAX_AVG_VARIANCE","bestMatch","startCode","CODE_START_A","CODE_START_C","variance","default","patternMatchVariance","CODE_PATTERNS","MAX_INDIVIDUAL_VARIANCE","isRange","Math","max","slice","length","decodeCode","Code128Reader.decodeCode","recordPattern","pattern","decodeRow","Code128Reader.prototype.decodeRow","rowNumber","hints","convertFNC1","ASSUME_GS1","startPatternInfo","currentRawCodesIndex","rawCodes","Uint8Array","codeSet","CODE_CODE_A","CODE_START_B","CODE_CODE_B","CODE_CODE_C","done","isNextShifted","result","lastStart","nextStart","lastCode","code","checksumTotal","multiplier","lastCharacterWasPrintable","upperMode","shiftUpperMode","unshift","CODE_STOP","reduce","previous","current","String","fromCharCode","CODE_FNC_1","CODE_FNC_4_A","CODE_SHIFT","CODE_FNC_4_B","lastPatternSize","getNextUnset","min","resultLength","substring","left","right","rawCodesSize","rawBytes","points","CODE_128","getTime","Date","CODE_FNC_2","CODE_FNC_3"]
}
