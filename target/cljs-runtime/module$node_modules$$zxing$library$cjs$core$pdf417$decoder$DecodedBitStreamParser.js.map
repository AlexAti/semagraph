{
"version":3,
"file":"module$node_modules$$zxing$library$cjs$core$pdf417$decoder$DecodedBitStreamParser.js",
"lineCount":31,
"mappings":"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",
"sources":["node_modules/@zxing/library/cjs/core/pdf417/decoder/DecodedBitStreamParser.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$zxing$library$cjs$core$pdf417$decoder$DecodedBitStreamParser\"] = function(global,require,module,exports) {\n\"use strict\";\n/*\n * Copyright 2009 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// package com.google.zxing.pdf417.decoder;\n// import com.google.zxing.FormatException;\nvar FormatException_1 = require(\"../../FormatException\");\n// import com.google.zxing.common.CharacterSetECI;\nvar CharacterSetECI_1 = require(\"../../common/CharacterSetECI\");\n// import com.google.zxing.common.DecoderResult;\nvar DecoderResult_1 = require(\"../../common/DecoderResult\");\n// import com.google.zxing.pdf417.PDF417ResultMetadata;\nvar PDF417ResultMetadata_1 = require(\"../PDF417ResultMetadata\");\n// import java.io.ByteArrayOutputStream;\n// import java.math.BigInteger;\n// import java.nio.charset.Charset;\n// import java.nio.charset.StandardCharsets;\n// import java.util.Arrays;\nvar Arrays_1 = require(\"../../util/Arrays\");\nvar StringBuilder_1 = require(\"../../util/StringBuilder\");\nvar Integer_1 = require(\"../../util/Integer\");\nvar Long_1 = require(\"../../util/Long\");\nvar ByteArrayOutputStream_1 = require(\"../../util/ByteArrayOutputStream\");\nvar StringEncoding_1 = require(\"../../util/StringEncoding\");\n/*private*/ var Mode;\n(function (Mode) {\n    Mode[Mode[\"ALPHA\"] = 0] = \"ALPHA\";\n    Mode[Mode[\"LOWER\"] = 1] = \"LOWER\";\n    Mode[Mode[\"MIXED\"] = 2] = \"MIXED\";\n    Mode[Mode[\"PUNCT\"] = 3] = \"PUNCT\";\n    Mode[Mode[\"ALPHA_SHIFT\"] = 4] = \"ALPHA_SHIFT\";\n    Mode[Mode[\"PUNCT_SHIFT\"] = 5] = \"PUNCT_SHIFT\";\n})(Mode || (Mode = {}));\n/**\n * Indirectly access the global BigInt constructor, it\n * allows browsers that doesn't support BigInt to run\n * the library without breaking due to \"undefined BigInt\"\n * errors.\n */\nfunction getBigIntConstructor() {\n    if (typeof window !== 'undefined') {\n        return window['BigInt'] || null;\n    }\n    if (typeof global !== 'undefined') {\n        return global['BigInt'] || null;\n    }\n    if (typeof self !== 'undefined') {\n        return self['BigInt'] || null;\n    }\n    throw new Error('Can\\'t search globals for BigInt!');\n}\n/**\n * Used to store the BigInt constructor.\n */\nvar BigInteger;\n/**\n * This function creates a bigint value. It allows browsers\n * that doesn't support BigInt to run the rest of the library\n * by not directly accessing the BigInt constructor.\n */\nfunction createBigInt(num) {\n    if (typeof BigInteger === 'undefined') {\n        BigInteger = getBigIntConstructor();\n    }\n    if (BigInteger === null) {\n        throw new Error('BigInt is not supported!');\n    }\n    return BigInteger(num);\n}\nfunction getEXP900() {\n    // in Java - array with length = 16\n    var EXP900 = [];\n    EXP900[0] = createBigInt(1);\n    var nineHundred = createBigInt(900);\n    EXP900[1] = nineHundred;\n    // in Java - array with length = 16\n    for (var i /*int*/ = 2; i < 16; i++) {\n        EXP900[i] = EXP900[i - 1] * nineHundred;\n    }\n    return EXP900;\n}\n/**\n * <p>This class contains the methods for decoding the PDF417 codewords.</p>\n *\n * @author SITA Lab (kevin.osullivan@sita.aero)\n * @author Guenther Grau\n */\nvar DecodedBitStreamParser = /** @class */ (function () {\n    function DecodedBitStreamParser() {\n    }\n    //   private DecodedBitStreamParser() {\n    // }\n    /**\n     *\n     * @param codewords\n     * @param ecLevel\n     *\n     * @throws FormatException\n     */\n    DecodedBitStreamParser.decode = function (codewords, ecLevel) {\n        // pass encoding to result (will be used for decode symbols in byte mode)\n        var result = new StringBuilder_1.default('');\n        // let encoding: Charset = StandardCharsets.ISO_8859_1;\n        var encoding = CharacterSetECI_1.default.ISO8859_1;\n        /**\n         * @note the next command is specific from this TypeScript library\n         * because TS can't properly cast some values to char and\n         * convert it to string later correctly due to encoding\n         * differences from Java version. As reported here:\n         * https://github.com/zxing-js/library/pull/264/files#r382831593\n         */\n        result.enableDecoding(encoding);\n        // Get compaction mode\n        var codeIndex = 1;\n        var code = codewords[codeIndex++];\n        var resultMetadata = new PDF417ResultMetadata_1.default();\n        while (codeIndex < codewords[0]) {\n            switch (code) {\n                case DecodedBitStreamParser.TEXT_COMPACTION_MODE_LATCH:\n                    codeIndex = DecodedBitStreamParser.textCompaction(codewords, codeIndex, result);\n                    break;\n                case DecodedBitStreamParser.BYTE_COMPACTION_MODE_LATCH:\n                case DecodedBitStreamParser.BYTE_COMPACTION_MODE_LATCH_6:\n                    codeIndex = DecodedBitStreamParser.byteCompaction(code, codewords, encoding, codeIndex, result);\n                    break;\n                case DecodedBitStreamParser.MODE_SHIFT_TO_BYTE_COMPACTION_MODE:\n                    result.append(/*(char)*/ codewords[codeIndex++]);\n                    break;\n                case DecodedBitStreamParser.NUMERIC_COMPACTION_MODE_LATCH:\n                    codeIndex = DecodedBitStreamParser.numericCompaction(codewords, codeIndex, result);\n                    break;\n                case DecodedBitStreamParser.ECI_CHARSET:\n                    var charsetECI = CharacterSetECI_1.default.getCharacterSetECIByValue(codewords[codeIndex++]);\n                    // encoding = Charset.forName(charsetECI.getName());\n                    break;\n                case DecodedBitStreamParser.ECI_GENERAL_PURPOSE:\n                    // Can't do anything with generic ECI; skip its 2 characters\n                    codeIndex += 2;\n                    break;\n                case DecodedBitStreamParser.ECI_USER_DEFINED:\n                    // Can't do anything with user ECI; skip its 1 character\n                    codeIndex++;\n                    break;\n                case DecodedBitStreamParser.BEGIN_MACRO_PDF417_CONTROL_BLOCK:\n                    codeIndex = DecodedBitStreamParser.decodeMacroBlock(codewords, codeIndex, resultMetadata);\n                    break;\n                case DecodedBitStreamParser.BEGIN_MACRO_PDF417_OPTIONAL_FIELD:\n                case DecodedBitStreamParser.MACRO_PDF417_TERMINATOR:\n                    // Should not see these outside a macro block\n                    throw new FormatException_1.default();\n                default:\n                    // Default to text compaction. During testing numerous barcodes\n                    // appeared to be missing the starting mode. In these cases defaulting\n                    // to text compaction seems to work.\n                    codeIndex--;\n                    codeIndex = DecodedBitStreamParser.textCompaction(codewords, codeIndex, result);\n                    break;\n            }\n            if (codeIndex < codewords.length) {\n                code = codewords[codeIndex++];\n            }\n            else {\n                throw FormatException_1.default.getFormatInstance();\n            }\n        }\n        if (result.length() === 0) {\n            throw FormatException_1.default.getFormatInstance();\n        }\n        var decoderResult = new DecoderResult_1.default(null, result.toString(), null, ecLevel);\n        decoderResult.setOther(resultMetadata);\n        return decoderResult;\n    };\n    /**\n     *\n     * @param int\n     * @param param1\n     * @param codewords\n     * @param int\n     * @param codeIndex\n     * @param PDF417ResultMetadata\n     * @param resultMetadata\n     *\n     * @throws FormatException\n     */\n    // @SuppressWarnings(\"deprecation\")\n    DecodedBitStreamParser.decodeMacroBlock = function (codewords, codeIndex, resultMetadata) {\n        if (codeIndex + DecodedBitStreamParser.NUMBER_OF_SEQUENCE_CODEWORDS > codewords[0]) {\n            // we must have at least two bytes left for the segment index\n            throw FormatException_1.default.getFormatInstance();\n        }\n        var segmentIndexArray = new Int32Array(DecodedBitStreamParser.NUMBER_OF_SEQUENCE_CODEWORDS);\n        for (var i /*int*/ = 0; i < DecodedBitStreamParser.NUMBER_OF_SEQUENCE_CODEWORDS; i++, codeIndex++) {\n            segmentIndexArray[i] = codewords[codeIndex];\n        }\n        resultMetadata.setSegmentIndex(Integer_1.default.parseInt(DecodedBitStreamParser.decodeBase900toBase10(segmentIndexArray, DecodedBitStreamParser.NUMBER_OF_SEQUENCE_CODEWORDS)));\n        var fileId = new StringBuilder_1.default();\n        codeIndex = DecodedBitStreamParser.textCompaction(codewords, codeIndex, fileId);\n        resultMetadata.setFileId(fileId.toString());\n        var optionalFieldsStart = -1;\n        if (codewords[codeIndex] === DecodedBitStreamParser.BEGIN_MACRO_PDF417_OPTIONAL_FIELD) {\n            optionalFieldsStart = codeIndex + 1;\n        }\n        while (codeIndex < codewords[0]) {\n            switch (codewords[codeIndex]) {\n                case DecodedBitStreamParser.BEGIN_MACRO_PDF417_OPTIONAL_FIELD:\n                    codeIndex++;\n                    switch (codewords[codeIndex]) {\n                        case DecodedBitStreamParser.MACRO_PDF417_OPTIONAL_FIELD_FILE_NAME:\n                            var fileName = new StringBuilder_1.default();\n                            codeIndex = DecodedBitStreamParser.textCompaction(codewords, codeIndex + 1, fileName);\n                            resultMetadata.setFileName(fileName.toString());\n                            break;\n                        case DecodedBitStreamParser.MACRO_PDF417_OPTIONAL_FIELD_SENDER:\n                            var sender = new StringBuilder_1.default();\n                            codeIndex = DecodedBitStreamParser.textCompaction(codewords, codeIndex + 1, sender);\n                            resultMetadata.setSender(sender.toString());\n                            break;\n                        case DecodedBitStreamParser.MACRO_PDF417_OPTIONAL_FIELD_ADDRESSEE:\n                            var addressee = new StringBuilder_1.default();\n                            codeIndex = DecodedBitStreamParser.textCompaction(codewords, codeIndex + 1, addressee);\n                            resultMetadata.setAddressee(addressee.toString());\n                            break;\n                        case DecodedBitStreamParser.MACRO_PDF417_OPTIONAL_FIELD_SEGMENT_COUNT:\n                            var segmentCount = new StringBuilder_1.default();\n                            codeIndex = DecodedBitStreamParser.numericCompaction(codewords, codeIndex + 1, segmentCount);\n                            resultMetadata.setSegmentCount(Integer_1.default.parseInt(segmentCount.toString()));\n                            break;\n                        case DecodedBitStreamParser.MACRO_PDF417_OPTIONAL_FIELD_TIME_STAMP:\n                            var timestamp = new StringBuilder_1.default();\n                            codeIndex = DecodedBitStreamParser.numericCompaction(codewords, codeIndex + 1, timestamp);\n                            resultMetadata.setTimestamp(Long_1.default.parseLong(timestamp.toString()));\n                            break;\n                        case DecodedBitStreamParser.MACRO_PDF417_OPTIONAL_FIELD_CHECKSUM:\n                            var checksum = new StringBuilder_1.default();\n                            codeIndex = DecodedBitStreamParser.numericCompaction(codewords, codeIndex + 1, checksum);\n                            resultMetadata.setChecksum(Integer_1.default.parseInt(checksum.toString()));\n                            break;\n                        case DecodedBitStreamParser.MACRO_PDF417_OPTIONAL_FIELD_FILE_SIZE:\n                            var fileSize = new StringBuilder_1.default();\n                            codeIndex = DecodedBitStreamParser.numericCompaction(codewords, codeIndex + 1, fileSize);\n                            resultMetadata.setFileSize(Long_1.default.parseLong(fileSize.toString()));\n                            break;\n                        default:\n                            throw FormatException_1.default.getFormatInstance();\n                    }\n                    break;\n                case DecodedBitStreamParser.MACRO_PDF417_TERMINATOR:\n                    codeIndex++;\n                    resultMetadata.setLastSegment(true);\n                    break;\n                default:\n                    throw FormatException_1.default.getFormatInstance();\n            }\n        }\n        // copy optional fields to additional options\n        if (optionalFieldsStart !== -1) {\n            var optionalFieldsLength = codeIndex - optionalFieldsStart;\n            if (resultMetadata.isLastSegment()) {\n                // do not include terminator\n                optionalFieldsLength--;\n            }\n            resultMetadata.setOptionalData(Arrays_1.default.copyOfRange(codewords, optionalFieldsStart, optionalFieldsStart + optionalFieldsLength));\n        }\n        return codeIndex;\n    };\n    /**\n     * Text Compaction mode (see 5.4.1.5) permits all printable ASCII characters to be\n     * encoded, i.e. values 32 - 126 inclusive in accordance with ISO/IEC 646 (IRV), as\n     * well as selected control characters.\n     *\n     * @param codewords The array of codewords (data + error)\n     * @param codeIndex The current index into the codeword array.\n     * @param result    The decoded data is appended to the result.\n     * @return The next index into the codeword array.\n     */\n    DecodedBitStreamParser.textCompaction = function (codewords, codeIndex, result) {\n        // 2 character per codeword\n        var textCompactionData = new Int32Array((codewords[0] - codeIndex) * 2);\n        // Used to hold the byte compaction value if there is a mode shift\n        var byteCompactionData = new Int32Array((codewords[0] - codeIndex) * 2);\n        var index = 0;\n        var end = false;\n        while ((codeIndex < codewords[0]) && !end) {\n            var code = codewords[codeIndex++];\n            if (code < DecodedBitStreamParser.TEXT_COMPACTION_MODE_LATCH) {\n                textCompactionData[index] = code / 30;\n                textCompactionData[index + 1] = code % 30;\n                index += 2;\n            }\n            else {\n                switch (code) {\n                    case DecodedBitStreamParser.TEXT_COMPACTION_MODE_LATCH:\n                        // reinitialize text compaction mode to alpha sub mode\n                        textCompactionData[index++] = DecodedBitStreamParser.TEXT_COMPACTION_MODE_LATCH;\n                        break;\n                    case DecodedBitStreamParser.BYTE_COMPACTION_MODE_LATCH:\n                    case DecodedBitStreamParser.BYTE_COMPACTION_MODE_LATCH_6:\n                    case DecodedBitStreamParser.NUMERIC_COMPACTION_MODE_LATCH:\n                    case DecodedBitStreamParser.BEGIN_MACRO_PDF417_CONTROL_BLOCK:\n                    case DecodedBitStreamParser.BEGIN_MACRO_PDF417_OPTIONAL_FIELD:\n                    case DecodedBitStreamParser.MACRO_PDF417_TERMINATOR:\n                        codeIndex--;\n                        end = true;\n                        break;\n                    case DecodedBitStreamParser.MODE_SHIFT_TO_BYTE_COMPACTION_MODE:\n                        // The Mode Shift codeword 913 shall cause a temporary\n                        // switch from Text Compaction mode to Byte Compaction mode.\n                        // This switch shall be in effect for only the next codeword,\n                        // after which the mode shall revert to the prevailing sub-mode\n                        // of the Text Compaction mode. Codeword 913 is only available\n                        // in Text Compaction mode; its use is described in 5.4.2.4.\n                        textCompactionData[index] = DecodedBitStreamParser.MODE_SHIFT_TO_BYTE_COMPACTION_MODE;\n                        code = codewords[codeIndex++];\n                        byteCompactionData[index] = code;\n                        index++;\n                        break;\n                }\n            }\n        }\n        DecodedBitStreamParser.decodeTextCompaction(textCompactionData, byteCompactionData, index, result);\n        return codeIndex;\n    };\n    /**\n     * The Text Compaction mode includes all the printable ASCII characters\n     * (i.e. values from 32 to 126) and three ASCII control characters: HT or tab\n     * (9: e), LF or line feed (10: e), and CR or carriage\n     * return (13: e). The Text Compaction mode also includes various latch\n     * and shift characters which are used exclusively within the mode. The Text\n     * Compaction mode encodes up to 2 characters per codeword. The compaction rules\n     * for converting data into PDF417 codewords are defined in 5.4.2.2. The sub-mode\n     * switches are defined in 5.4.2.3.\n     *\n     * @param textCompactionData The text compaction data.\n     * @param byteCompactionData The byte compaction data if there\n     *                           was a mode shift.\n     * @param length             The size of the text compaction and byte compaction data.\n     * @param result             The decoded data is appended to the result.\n     */\n    DecodedBitStreamParser.decodeTextCompaction = function (textCompactionData, byteCompactionData, length, result) {\n        // Beginning from an initial state of the Alpha sub-mode\n        // The default compaction mode for PDF417 in effect at the start of each symbol shall always be Text\n        // Compaction mode Alpha sub-mode (alphabetic: uppercase). A latch codeword from another mode to the Text\n        // Compaction mode shall always switch to the Text Compaction Alpha sub-mode.\n        var subMode = Mode.ALPHA;\n        var priorToShiftMode = Mode.ALPHA;\n        var i = 0;\n        while (i < length) {\n            var subModeCh = textCompactionData[i];\n            var ch = /*char*/ '';\n            switch (subMode) {\n                case Mode.ALPHA:\n                    // Alpha (alphabetic: uppercase)\n                    if (subModeCh < 26) {\n                        // Upper case Alpha Character\n                        // Note: 65 = 'A' ASCII -> there is byte code of symbol\n                        ch = /*(char)('A' + subModeCh) */ String.fromCharCode(65 + subModeCh);\n                    }\n                    else {\n                        switch (subModeCh) {\n                            case 26:\n                                ch = ' ';\n                                break;\n                            case DecodedBitStreamParser.LL:\n                                subMode = Mode.LOWER;\n                                break;\n                            case DecodedBitStreamParser.ML:\n                                subMode = Mode.MIXED;\n                                break;\n                            case DecodedBitStreamParser.PS:\n                                // Shift to punctuation\n                                priorToShiftMode = subMode;\n                                subMode = Mode.PUNCT_SHIFT;\n                                break;\n                            case DecodedBitStreamParser.MODE_SHIFT_TO_BYTE_COMPACTION_MODE:\n                                result.append(/*(char)*/ byteCompactionData[i]);\n                                break;\n                            case DecodedBitStreamParser.TEXT_COMPACTION_MODE_LATCH:\n                                subMode = Mode.ALPHA;\n                                break;\n                        }\n                    }\n                    break;\n                case Mode.LOWER:\n                    // Lower (alphabetic: lowercase)\n                    if (subModeCh < 26) {\n                        ch = /*(char)('a' + subModeCh)*/ String.fromCharCode(97 + subModeCh);\n                    }\n                    else {\n                        switch (subModeCh) {\n                            case 26:\n                                ch = ' ';\n                                break;\n                            case DecodedBitStreamParser.AS:\n                                // Shift to alpha\n                                priorToShiftMode = subMode;\n                                subMode = Mode.ALPHA_SHIFT;\n                                break;\n                            case DecodedBitStreamParser.ML:\n                                subMode = Mode.MIXED;\n                                break;\n                            case DecodedBitStreamParser.PS:\n                                // Shift to punctuation\n                                priorToShiftMode = subMode;\n                                subMode = Mode.PUNCT_SHIFT;\n                                break;\n                            case DecodedBitStreamParser.MODE_SHIFT_TO_BYTE_COMPACTION_MODE:\n                                // TODO Does this need to use the current character encoding? See other occurrences below\n                                result.append(/*(char)*/ byteCompactionData[i]);\n                                break;\n                            case DecodedBitStreamParser.TEXT_COMPACTION_MODE_LATCH:\n                                subMode = Mode.ALPHA;\n                                break;\n                        }\n                    }\n                    break;\n                case Mode.MIXED:\n                    // Mixed (punctuation: e)\n                    if (subModeCh < DecodedBitStreamParser.PL) {\n                        ch = DecodedBitStreamParser.MIXED_CHARS[subModeCh];\n                    }\n                    else {\n                        switch (subModeCh) {\n                            case DecodedBitStreamParser.PL:\n                                subMode = Mode.PUNCT;\n                                break;\n                            case 26:\n                                ch = ' ';\n                                break;\n                            case DecodedBitStreamParser.LL:\n                                subMode = Mode.LOWER;\n                                break;\n                            case DecodedBitStreamParser.AL:\n                                subMode = Mode.ALPHA;\n                                break;\n                            case DecodedBitStreamParser.PS:\n                                // Shift to punctuation\n                                priorToShiftMode = subMode;\n                                subMode = Mode.PUNCT_SHIFT;\n                                break;\n                            case DecodedBitStreamParser.MODE_SHIFT_TO_BYTE_COMPACTION_MODE:\n                                result.append(/*(char)*/ byteCompactionData[i]);\n                                break;\n                            case DecodedBitStreamParser.TEXT_COMPACTION_MODE_LATCH:\n                                subMode = Mode.ALPHA;\n                                break;\n                        }\n                    }\n                    break;\n                case Mode.PUNCT:\n                    // Punctuation\n                    if (subModeCh < DecodedBitStreamParser.PAL) {\n                        ch = DecodedBitStreamParser.PUNCT_CHARS[subModeCh];\n                    }\n                    else {\n                        switch (subModeCh) {\n                            case DecodedBitStreamParser.PAL:\n                                subMode = Mode.ALPHA;\n                                break;\n                            case DecodedBitStreamParser.MODE_SHIFT_TO_BYTE_COMPACTION_MODE:\n                                result.append(/*(char)*/ byteCompactionData[i]);\n                                break;\n                            case DecodedBitStreamParser.TEXT_COMPACTION_MODE_LATCH:\n                                subMode = Mode.ALPHA;\n                                break;\n                        }\n                    }\n                    break;\n                case Mode.ALPHA_SHIFT:\n                    // Restore sub-mode\n                    subMode = priorToShiftMode;\n                    if (subModeCh < 26) {\n                        ch = /*(char)('A' + subModeCh)*/ String.fromCharCode(65 + subModeCh);\n                    }\n                    else {\n                        switch (subModeCh) {\n                            case 26:\n                                ch = ' ';\n                                break;\n                            case DecodedBitStreamParser.TEXT_COMPACTION_MODE_LATCH:\n                                subMode = Mode.ALPHA;\n                                break;\n                        }\n                    }\n                    break;\n                case Mode.PUNCT_SHIFT:\n                    // Restore sub-mode\n                    subMode = priorToShiftMode;\n                    if (subModeCh < DecodedBitStreamParser.PAL) {\n                        ch = DecodedBitStreamParser.PUNCT_CHARS[subModeCh];\n                    }\n                    else {\n                        switch (subModeCh) {\n                            case DecodedBitStreamParser.PAL:\n                                subMode = Mode.ALPHA;\n                                break;\n                            case DecodedBitStreamParser.MODE_SHIFT_TO_BYTE_COMPACTION_MODE:\n                                // PS before Shift-to-Byte is used as a padding character,\n                                // see 5.4.2.4 of the specification\n                                result.append(/*(char)*/ byteCompactionData[i]);\n                                break;\n                            case DecodedBitStreamParser.TEXT_COMPACTION_MODE_LATCH:\n                                subMode = Mode.ALPHA;\n                                break;\n                        }\n                    }\n                    break;\n            }\n            // if (ch !== 0) {\n            if (ch !== '') {\n                // Append decoded character to result\n                result.append(ch);\n            }\n            i++;\n        }\n    };\n    /**\n     * Byte Compaction mode (see 5.4.3) permits all 256 possible 8-bit byte values to be encoded.\n     * This includes all ASCII characters value 0 to 127 inclusive and provides for international\n     * character set support.\n     *\n     * @param mode      The byte compaction mode i.e. 901 or 924\n     * @param codewords The array of codewords (data + error)\n     * @param encoding  Currently active character encoding\n     * @param codeIndex The current index into the codeword array.\n     * @param result    The decoded data is appended to the result.\n     * @return The next index into the codeword array.\n     */\n    DecodedBitStreamParser.byteCompaction = function (mode, codewords, encoding, codeIndex, result) {\n        var decodedBytes = new ByteArrayOutputStream_1.default();\n        var count = 0;\n        var value = /*long*/ 0;\n        var end = false;\n        switch (mode) {\n            case DecodedBitStreamParser.BYTE_COMPACTION_MODE_LATCH:\n                // Total number of Byte Compaction characters to be encoded\n                // is not a multiple of 6\n                var byteCompactedCodewords = new Int32Array(6);\n                var nextCode = codewords[codeIndex++];\n                while ((codeIndex < codewords[0]) && !end) {\n                    byteCompactedCodewords[count++] = nextCode;\n                    // Base 900\n                    value = 900 * value + nextCode;\n                    nextCode = codewords[codeIndex++];\n                    // perhaps it should be ok to check only nextCode >= TEXT_COMPACTION_MODE_LATCH\n                    switch (nextCode) {\n                        case DecodedBitStreamParser.TEXT_COMPACTION_MODE_LATCH:\n                        case DecodedBitStreamParser.BYTE_COMPACTION_MODE_LATCH:\n                        case DecodedBitStreamParser.NUMERIC_COMPACTION_MODE_LATCH:\n                        case DecodedBitStreamParser.BYTE_COMPACTION_MODE_LATCH_6:\n                        case DecodedBitStreamParser.BEGIN_MACRO_PDF417_CONTROL_BLOCK:\n                        case DecodedBitStreamParser.BEGIN_MACRO_PDF417_OPTIONAL_FIELD:\n                        case DecodedBitStreamParser.MACRO_PDF417_TERMINATOR:\n                            codeIndex--;\n                            end = true;\n                            break;\n                        default:\n                            if ((count % 5 === 0) && (count > 0)) {\n                                // Decode every 5 codewords\n                                // Convert to Base 256\n                                for (var j /*int*/ = 0; j < 6; ++j) {\n                                    /* @note\n                                     * JavaScript stores numbers as 64 bits floating point numbers, but all bitwise operations are performed on 32 bits binary numbers.\n                                     * So the next bitwise operation could not be done with simple numbers\n                                     */\n                                    decodedBytes.write(/*(byte)*/ Number(createBigInt(value) >> createBigInt(8 * (5 - j))));\n                                }\n                                value = 0;\n                                count = 0;\n                            }\n                            break;\n                    }\n                }\n                // if the end of all codewords is reached the last codeword needs to be added\n                if (codeIndex === codewords[0] && nextCode < DecodedBitStreamParser.TEXT_COMPACTION_MODE_LATCH) {\n                    byteCompactedCodewords[count++] = nextCode;\n                }\n                // If Byte Compaction mode is invoked with codeword 901,\n                // the last group of codewords is interpreted directly\n                // as one byte per codeword, without compaction.\n                for (var i /*int*/ = 0; i < count; i++) {\n                    decodedBytes.write(/*(byte)*/ byteCompactedCodewords[i]);\n                }\n                break;\n            case DecodedBitStreamParser.BYTE_COMPACTION_MODE_LATCH_6:\n                // Total number of Byte Compaction characters to be encoded\n                // is an integer multiple of 6\n                while (codeIndex < codewords[0] && !end) {\n                    var code = codewords[codeIndex++];\n                    if (code < DecodedBitStreamParser.TEXT_COMPACTION_MODE_LATCH) {\n                        count++;\n                        // Base 900\n                        value = 900 * value + code;\n                    }\n                    else {\n                        switch (code) {\n                            case DecodedBitStreamParser.TEXT_COMPACTION_MODE_LATCH:\n                            case DecodedBitStreamParser.BYTE_COMPACTION_MODE_LATCH:\n                            case DecodedBitStreamParser.NUMERIC_COMPACTION_MODE_LATCH:\n                            case DecodedBitStreamParser.BYTE_COMPACTION_MODE_LATCH_6:\n                            case DecodedBitStreamParser.BEGIN_MACRO_PDF417_CONTROL_BLOCK:\n                            case DecodedBitStreamParser.BEGIN_MACRO_PDF417_OPTIONAL_FIELD:\n                            case DecodedBitStreamParser.MACRO_PDF417_TERMINATOR:\n                                codeIndex--;\n                                end = true;\n                                break;\n                        }\n                    }\n                    if ((count % 5 === 0) && (count > 0)) {\n                        // Decode every 5 codewords\n                        // Convert to Base 256\n                        /* @note\n                         * JavaScript stores numbers as 64 bits floating point numbers, but all bitwise operations are performed on 32 bits binary numbers.\n                         * So the next bitwise operation could not be done with simple numbers\n                        */\n                        for (var j /*int*/ = 0; j < 6; ++j) {\n                            decodedBytes.write(/*(byte)*/ Number(createBigInt(value) >> createBigInt(8 * (5 - j))));\n                        }\n                        value = 0;\n                        count = 0;\n                    }\n                }\n                break;\n        }\n        result.append(StringEncoding_1.default.decode(decodedBytes.toByteArray(), encoding));\n        return codeIndex;\n    };\n    /**\n     * Numeric Compaction mode (see 5.4.4) permits efficient encoding of numeric data strings.\n     *\n     * @param codewords The array of codewords (data + error)\n     * @param codeIndex The current index into the codeword array.\n     * @param result    The decoded data is appended to the result.\n     * @return The next index into the codeword array.\n     *\n     * @throws FormatException\n     */\n    DecodedBitStreamParser.numericCompaction = function (codewords, codeIndex /*int*/, result) {\n        var count = 0;\n        var end = false;\n        var numericCodewords = new Int32Array(DecodedBitStreamParser.MAX_NUMERIC_CODEWORDS);\n        while (codeIndex < codewords[0] && !end) {\n            var code = codewords[codeIndex++];\n            if (codeIndex === codewords[0]) {\n                end = true;\n            }\n            if (code < DecodedBitStreamParser.TEXT_COMPACTION_MODE_LATCH) {\n                numericCodewords[count] = code;\n                count++;\n            }\n            else {\n                switch (code) {\n                    case DecodedBitStreamParser.TEXT_COMPACTION_MODE_LATCH:\n                    case DecodedBitStreamParser.BYTE_COMPACTION_MODE_LATCH:\n                    case DecodedBitStreamParser.BYTE_COMPACTION_MODE_LATCH_6:\n                    case DecodedBitStreamParser.BEGIN_MACRO_PDF417_CONTROL_BLOCK:\n                    case DecodedBitStreamParser.BEGIN_MACRO_PDF417_OPTIONAL_FIELD:\n                    case DecodedBitStreamParser.MACRO_PDF417_TERMINATOR:\n                        codeIndex--;\n                        end = true;\n                        break;\n                }\n            }\n            if ((count % DecodedBitStreamParser.MAX_NUMERIC_CODEWORDS === 0 || code === DecodedBitStreamParser.NUMERIC_COMPACTION_MODE_LATCH || end) && count > 0) {\n                // Re-invoking Numeric Compaction mode (by using codeword 902\n                // while in Numeric Compaction mode) serves  to terminate the\n                // current Numeric Compaction mode grouping as described in 5.4.4.2,\n                // and then to start a new one grouping.\n                result.append(DecodedBitStreamParser.decodeBase900toBase10(numericCodewords, count));\n                count = 0;\n            }\n        }\n        return codeIndex;\n    };\n    /**\n     * Convert a list of Numeric Compacted codewords from Base 900 to Base 10.\n     *\n     * @param codewords The array of codewords\n     * @param count     The number of codewords\n     * @return The decoded string representing the Numeric data.\n     *\n     * EXAMPLE\n     * Encode the fifteen digit numeric string 000213298174000\n     * Prefix the numeric string with a 1 and set the initial value of\n     * t = 1 000 213 298 174 000\n     * Calculate codeword 0\n     * d0 = 1 000 213 298 174 000 mod 900 = 200\n     *\n     * t = 1 000 213 298 174 000 div 900 = 1 111 348 109 082\n     * Calculate codeword 1\n     * d1 = 1 111 348 109 082 mod 900 = 282\n     *\n     * t = 1 111 348 109 082 div 900 = 1 234 831 232\n     * Calculate codeword 2\n     * d2 = 1 234 831 232 mod 900 = 632\n     *\n     * t = 1 234 831 232 div 900 = 1 372 034\n     * Calculate codeword 3\n     * d3 = 1 372 034 mod 900 = 434\n     *\n     * t = 1 372 034 div 900 = 1 524\n     * Calculate codeword 4\n     * d4 = 1 524 mod 900 = 624\n     *\n     * t = 1 524 div 900 = 1\n     * Calculate codeword 5\n     * d5 = 1 mod 900 = 1\n     * t = 1 div 900 = 0\n     * Codeword sequence is: 1, 624, 434, 632, 282, 200\n     *\n     * Decode the above codewords involves\n     *   1 x 900 power of 5 + 624 x 900 power of 4 + 434 x 900 power of 3 +\n     * 632 x 900 power of 2 + 282 x 900 power of 1 + 200 x 900 power of 0 = 1000213298174000\n     *\n     * Remove leading 1 =>  Result is 000213298174000\n     *\n     * @throws FormatException\n     */\n    DecodedBitStreamParser.decodeBase900toBase10 = function (codewords, count) {\n        var result = createBigInt(0);\n        for (var i /*int*/ = 0; i < count; i++) {\n            result += DecodedBitStreamParser.EXP900[count - i - 1] * createBigInt(codewords[i]);\n        }\n        var resultString = result.toString();\n        if (resultString.charAt(0) !== '1') {\n            throw new FormatException_1.default();\n        }\n        return resultString.substring(1);\n    };\n    DecodedBitStreamParser.TEXT_COMPACTION_MODE_LATCH = 900;\n    DecodedBitStreamParser.BYTE_COMPACTION_MODE_LATCH = 901;\n    DecodedBitStreamParser.NUMERIC_COMPACTION_MODE_LATCH = 902;\n    DecodedBitStreamParser.BYTE_COMPACTION_MODE_LATCH_6 = 924;\n    DecodedBitStreamParser.ECI_USER_DEFINED = 925;\n    DecodedBitStreamParser.ECI_GENERAL_PURPOSE = 926;\n    DecodedBitStreamParser.ECI_CHARSET = 927;\n    DecodedBitStreamParser.BEGIN_MACRO_PDF417_CONTROL_BLOCK = 928;\n    DecodedBitStreamParser.BEGIN_MACRO_PDF417_OPTIONAL_FIELD = 923;\n    DecodedBitStreamParser.MACRO_PDF417_TERMINATOR = 922;\n    DecodedBitStreamParser.MODE_SHIFT_TO_BYTE_COMPACTION_MODE = 913;\n    DecodedBitStreamParser.MAX_NUMERIC_CODEWORDS = 15;\n    DecodedBitStreamParser.MACRO_PDF417_OPTIONAL_FIELD_FILE_NAME = 0;\n    DecodedBitStreamParser.MACRO_PDF417_OPTIONAL_FIELD_SEGMENT_COUNT = 1;\n    DecodedBitStreamParser.MACRO_PDF417_OPTIONAL_FIELD_TIME_STAMP = 2;\n    DecodedBitStreamParser.MACRO_PDF417_OPTIONAL_FIELD_SENDER = 3;\n    DecodedBitStreamParser.MACRO_PDF417_OPTIONAL_FIELD_ADDRESSEE = 4;\n    DecodedBitStreamParser.MACRO_PDF417_OPTIONAL_FIELD_FILE_SIZE = 5;\n    DecodedBitStreamParser.MACRO_PDF417_OPTIONAL_FIELD_CHECKSUM = 6;\n    DecodedBitStreamParser.PL = 25;\n    DecodedBitStreamParser.LL = 27;\n    DecodedBitStreamParser.AS = 27;\n    DecodedBitStreamParser.ML = 28;\n    DecodedBitStreamParser.AL = 28;\n    DecodedBitStreamParser.PS = 29;\n    DecodedBitStreamParser.PAL = 29;\n    DecodedBitStreamParser.PUNCT_CHARS = ';<>@[\\\\]_`~!\\r\\t,:\\n-.$/\"|*()?{}\\'';\n    DecodedBitStreamParser.MIXED_CHARS = '0123456789&\\r\\t,:#-.$/+%*=^';\n    /**\n     * Table containing values for the exponent of 900.\n     * This is used in the numeric compaction decode algorithm.\n     */\n    DecodedBitStreamParser.EXP900 = getBigIntConstructor() ? getEXP900() : [];\n    DecodedBitStreamParser.NUMBER_OF_SEQUENCE_CODEWORDS = 2;\n    return DecodedBitStreamParser;\n}());\nexports.default = DecodedBitStreamParser;\n//# sourceMappingURL=DecodedBitStreamParser.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","getBigIntConstructor","window","self","Error","createBigInt","num","BigInteger","getEXP900","EXP900","nineHundred","i","Object","defineProperty","value","FormatException_1","CharacterSetECI_1","DecoderResult_1","PDF417ResultMetadata_1","Arrays_1","StringBuilder_1","Integer_1","Long_1","ByteArrayOutputStream_1","StringEncoding_1","Mode","DecodedBitStreamParser","decode","DecodedBitStreamParser.decode","codewords","ecLevel","result","default","encoding","ISO8859_1","enableDecoding","codeIndex","code","resultMetadata","TEXT_COMPACTION_MODE_LATCH","textCompaction","BYTE_COMPACTION_MODE_LATCH","BYTE_COMPACTION_MODE_LATCH_6","byteCompaction","MODE_SHIFT_TO_BYTE_COMPACTION_MODE","append","NUMERIC_COMPACTION_MODE_LATCH","numericCompaction","ECI_CHARSET","getCharacterSetECIByValue","ECI_GENERAL_PURPOSE","ECI_USER_DEFINED","BEGIN_MACRO_PDF417_CONTROL_BLOCK","decodeMacroBlock","BEGIN_MACRO_PDF417_OPTIONAL_FIELD","MACRO_PDF417_TERMINATOR","length","getFormatInstance","decoderResult","toString","setOther","DecodedBitStreamParser.decodeMacroBlock","NUMBER_OF_SEQUENCE_CODEWORDS","segmentIndexArray","Int32Array","setSegmentIndex","parseInt","decodeBase900toBase10","fileId","setFileId","optionalFieldsStart","MACRO_PDF417_OPTIONAL_FIELD_FILE_NAME","fileName","setFileName","MACRO_PDF417_OPTIONAL_FIELD_SENDER","sender","setSender","MACRO_PDF417_OPTIONAL_FIELD_ADDRESSEE","addressee","setAddressee","MACRO_PDF417_OPTIONAL_FIELD_SEGMENT_COUNT","segmentCount","setSegmentCount","MACRO_PDF417_OPTIONAL_FIELD_TIME_STAMP","timestamp","setTimestamp","parseLong","MACRO_PDF417_OPTIONAL_FIELD_CHECKSUM","checksum","setChecksum","MACRO_PDF417_OPTIONAL_FIELD_FILE_SIZE","fileSize","setFileSize","setLastSegment","optionalFieldsLength","isLastSegment","setOptionalData","copyOfRange","DecodedBitStreamParser.textCompaction","textCompactionData","byteCompactionData","index","end","decodeTextCompaction","DecodedBitStreamParser.decodeTextCompaction","subMode","ALPHA","priorToShiftMode","subModeCh","ch","String","fromCharCode","LL","LOWER","ML","MIXED","PS","PUNCT_SHIFT","AS","ALPHA_SHIFT","PL","MIXED_CHARS","PUNCT","AL","PAL","PUNCT_CHARS","DecodedBitStreamParser.byteCompaction","mode","decodedBytes","count","byteCompactedCodewords","nextCode","j","write","Number","toByteArray","DecodedBitStreamParser.numericCompaction","numericCodewords","MAX_NUMERIC_CODEWORDS","DecodedBitStreamParser.decodeBase900toBase10","resultString","charAt","substring"]
}
