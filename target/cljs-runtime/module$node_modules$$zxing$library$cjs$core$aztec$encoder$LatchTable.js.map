{
"version":3,
"file":"module$node_modules$$zxing$library$cjs$core$aztec$encoder$LatchTable.js",
"lineCount":1,
"mappings":"AAAAA,cAAA,CAAA,oEAAA,CAAyF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAEjIC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAAEG,MAAO,CAAA,CAAT,CAA7C,CACAH,QAAQI,CAAAA,WAAR,CAAsB,IAAK,EAM3BJ,QAAQI,CAAAA,WAAR,CAAsB,CAClBC,UAAWC,CAAAA,IAAX,CAAgB,CACZ,CADY,CAEZ,MAFY,CAGZ,MAHY,CAIZ,MAJY,CAKZ,MALY,CAAhB,CADkB,CAQlBD,UAAWC,CAAAA,IAAX,CAAgB,CACZ,MADY,CAEZ,CAFY,CAGZ,MAHY,CAIZ,MAJY,CAKZ,MALY,CAAhB,CARkB,CAelBD,UAAWC,CAAAA,IAAX,CAAgB,CACZ,MADY,CAEZ,MAFY,CAGZ,CAHY,CAIZ,MAJY,CAKZ,MALY,CAAhB,CAfkB,CAuBlBD,UAAWC,CAAAA,IAAX,CAAgB,CACZ,MADY,CAEZ,MAFY,CAGZ,MAHY,CAIZ,CAJY,CAKZ,MALY,CAAhB,CAvBkB,CA8BlBD,UAAWC,CAAAA,IAAX,CAAgB,CACZ,MADY,CAEZ,MAFY,CAGZ,MAHY,CAIZ,MAJY,CAKZ,CALY,CAAhB,CA9BkB,CAT2G;",
"sources":["node_modules/@zxing/library/cjs/core/aztec/encoder/LatchTable.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$zxing$library$cjs$core$aztec$encoder$LatchTable\"] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LATCH_TABLE = void 0;\n// The Latch Table shows, for each pair of Modes, the optimal method for\n// getting from one mode to another.  In the worst possible case, this can\n// be up to 14 bits.  In the best possible case, we are already there!\n// The high half-word of each entry gives the number of bits.\n// The low half-word of each entry are the actual bits necessary to change\nexports.LATCH_TABLE = [\n    Int32Array.from([\n        0,\n        (5 << 16) + 28,\n        (5 << 16) + 30,\n        (5 << 16) + 29,\n        (10 << 16) + (29 << 5) + 30 // UPPER -> MIXED -> PUNCT\n    ]),\n    Int32Array.from([\n        (9 << 16) + (30 << 4) + 14,\n        0,\n        (5 << 16) + 30,\n        (5 << 16) + 29,\n        (10 << 16) + (29 << 5) + 30 // LOWER -> MIXED -> PUNCT\n    ]),\n    Int32Array.from([\n        (4 << 16) + 14,\n        (9 << 16) + (14 << 5) + 28,\n        0,\n        (9 << 16) + (14 << 5) + 29,\n        (14 << 16) + (14 << 10) + (29 << 5) + 30\n        // DIGIT -> UPPER -> MIXED -> PUNCT\n    ]),\n    Int32Array.from([\n        (5 << 16) + 29,\n        (5 << 16) + 28,\n        (10 << 16) + (29 << 5) + 30,\n        0,\n        (5 << 16) + 30 // MIXED -> PUNCT\n    ]),\n    Int32Array.from([\n        (5 << 16) + 31,\n        (10 << 16) + (31 << 5) + 28,\n        (10 << 16) + (31 << 5) + 30,\n        (10 << 16) + (31 << 5) + 29,\n        0\n    ])\n];\n//# sourceMappingURL=LatchTable.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","LATCH_TABLE","Int32Array","from"]
}
